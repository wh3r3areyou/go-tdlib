// AUTOGENERATED - DO NOT EDIT

package tdlib

type AuthFunctions interface {
	Authorize() (AuthorizationState, error)
	SendPhoneNumber(phoneNumber string) (AuthorizationState, error)
	SendAuthCode(code string) (AuthorizationState, error)
	SendAuthPassword(password string) (AuthorizationState, error)
}

// Authorize is used to authorize the users
func (client *ClientImpl) Authorize() (AuthorizationState, error) {
	state, err := client.GetAuthorizationState()
	if err != nil {
		return nil, err
	}

	if state.GetAuthorizationStateEnum() == AuthorizationStateWaitEncryptionKeyType {
		ok, err := client.CheckDatabaseEncryptionKey(nil)

		if ok == nil || err != nil {
			return nil, err
		}
	} else if state.GetAuthorizationStateEnum() == AuthorizationStateWaitTdlibParametersType {
		client.sendTdLibParams()
	}

	return client.GetAuthorizationState()
}

// SendPhoneNumber sends phone number to tdlib
func (client *ClientImpl) SendPhoneNumber(phoneNumber string) (AuthorizationState, error) {
	phoneNumberConfig := PhoneNumberAuthenticationSettings{AllowFlashCall: false, IsCurrentPhoneNumber: false, AllowSmsRetrieverAPI: false}
	_, err := client.SetAuthenticationPhoneNumber(phoneNumber, &phoneNumberConfig)

	if err != nil {
		return nil, err
	}

	return client.GetAuthorizationState()
}

// SendAuthCode sends auth code to tdlib
func (client *ClientImpl) SendAuthCode(code string) (AuthorizationState, error) {
	_, err := client.CheckAuthenticationCode(code)

	if err != nil {
		return nil, err
	}

	return client.GetAuthorizationState()
}

// SendAuthPassword sends two-step verification password (user defined)to tdlib
func (client *ClientImpl) SendAuthPassword(password string) (AuthorizationState, error) {
	_, err := client.CheckAuthenticationPassword(password)

	if err != nil {
		return nil, err
	}

	return client.GetAuthorizationState()
}
