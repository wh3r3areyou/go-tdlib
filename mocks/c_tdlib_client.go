// Code generated by MockGen. DO NOT EDIT.
// Source: c_tdlib_client.go

// Package mock_tdlib is a generated GoMock package.
package mock_tdlib

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tdlib "github.com/wh3r3areyou/go-tdlib"
)

// MocktdlibClient is a mock of tdlibClient interface.
type MocktdlibClient struct {
	ctrl     *gomock.Controller
	recorder *MocktdlibClientMockRecorder
}

// MocktdlibClientMockRecorder is the mock recorder for MocktdlibClient.
type MocktdlibClientMockRecorder struct {
	mock *MocktdlibClient
}

// NewMocktdlibClient creates a new mock instance.
func NewMocktdlibClient(ctrl *gomock.Controller) *MocktdlibClient {
	mock := &MocktdlibClient{ctrl: ctrl}
	mock.recorder = &MocktdlibClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktdlibClient) EXPECT() *MocktdlibClientMockRecorder {
	return m.recorder
}

// destroyInstance mocks base method.
func (m *MocktdlibClient) destroyInstance() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "destroyInstance")
}

// destroyInstance indicates an expected call of destroyInstance.
func (mr *MocktdlibClientMockRecorder) destroyInstance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "destroyInstance", reflect.TypeOf((*MocktdlibClient)(nil).destroyInstance))
}

// execute mocks base method.
func (m *MocktdlibClient) execute(jsonQuery interface{}) tdlib.UpdateMsg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "execute", jsonQuery)
	ret0, _ := ret[0].(tdlib.UpdateMsg)
	return ret0
}

// execute indicates an expected call of execute.
func (mr *MocktdlibClientMockRecorder) execute(jsonQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "execute", reflect.TypeOf((*MocktdlibClient)(nil).execute), jsonQuery)
}

// receive mocks base method.
func (m *MocktdlibClient) receive(timeout float64) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "receive", timeout)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// receive indicates an expected call of receive.
func (mr *MocktdlibClientMockRecorder) receive(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "receive", reflect.TypeOf((*MocktdlibClient)(nil).receive), timeout)
}

// send mocks base method.
func (m *MocktdlibClient) send(jsonQuery interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "send", jsonQuery)
}

// send indicates an expected call of send.
func (mr *MocktdlibClientMockRecorder) send(jsonQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "send", reflect.TypeOf((*MocktdlibClient)(nil).send), jsonQuery)
}
