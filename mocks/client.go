// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_tdlib is a generated GoMock package.
package mock_tdlib

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tdlib "github.com/wh3r3areyou/go-tdlib"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AcceptCall mocks base method.
func (m *MockClient) AcceptCall(callID int32, protocol *tdlib.CallProtocol) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptCall", callID, protocol)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptCall indicates an expected call of AcceptCall.
func (mr *MockClientMockRecorder) AcceptCall(callID, protocol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptCall", reflect.TypeOf((*MockClient)(nil).AcceptCall), callID, protocol)
}

// AcceptTermsOfService mocks base method.
func (m *MockClient) AcceptTermsOfService(termsOfServiceID string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptTermsOfService", termsOfServiceID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptTermsOfService indicates an expected call of AcceptTermsOfService.
func (mr *MockClientMockRecorder) AcceptTermsOfService(termsOfServiceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptTermsOfService", reflect.TypeOf((*MockClient)(nil).AcceptTermsOfService), termsOfServiceID)
}

// AddChatMember mocks base method.
func (m *MockClient) AddChatMember(chatID, userID int64, forwardLimit int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChatMember", chatID, userID, forwardLimit)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddChatMember indicates an expected call of AddChatMember.
func (mr *MockClientMockRecorder) AddChatMember(chatID, userID, forwardLimit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChatMember", reflect.TypeOf((*MockClient)(nil).AddChatMember), chatID, userID, forwardLimit)
}

// AddChatMembers mocks base method.
func (m *MockClient) AddChatMembers(chatID int64, userIDs []int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChatMembers", chatID, userIDs)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddChatMembers indicates an expected call of AddChatMembers.
func (mr *MockClientMockRecorder) AddChatMembers(chatID, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChatMembers", reflect.TypeOf((*MockClient)(nil).AddChatMembers), chatID, userIDs)
}

// AddChatToList mocks base method.
func (m *MockClient) AddChatToList(chatID int64, chatList tdlib.ChatList) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChatToList", chatID, chatList)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddChatToList indicates an expected call of AddChatToList.
func (mr *MockClientMockRecorder) AddChatToList(chatID, chatList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChatToList", reflect.TypeOf((*MockClient)(nil).AddChatToList), chatID, chatList)
}

// AddContact mocks base method.
func (m *MockClient) AddContact(contact *tdlib.Contact, sharePhoneNumber bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContact", contact, sharePhoneNumber)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddContact indicates an expected call of AddContact.
func (mr *MockClientMockRecorder) AddContact(contact, sharePhoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContact", reflect.TypeOf((*MockClient)(nil).AddContact), contact, sharePhoneNumber)
}

// AddCustomServerLanguagePack mocks base method.
func (m *MockClient) AddCustomServerLanguagePack(languagePackID string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCustomServerLanguagePack", languagePackID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCustomServerLanguagePack indicates an expected call of AddCustomServerLanguagePack.
func (mr *MockClientMockRecorder) AddCustomServerLanguagePack(languagePackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCustomServerLanguagePack", reflect.TypeOf((*MockClient)(nil).AddCustomServerLanguagePack), languagePackID)
}

// AddEventReceiver mocks base method.
func (m *MockClient) AddEventReceiver(msgInstance tdlib.TdMessage, filterFunc tdlib.EventFilterFunc, channelCapacity int) tdlib.EventReceiver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEventReceiver", msgInstance, filterFunc, channelCapacity)
	ret0, _ := ret[0].(tdlib.EventReceiver)
	return ret0
}

// AddEventReceiver indicates an expected call of AddEventReceiver.
func (mr *MockClientMockRecorder) AddEventReceiver(msgInstance, filterFunc, channelCapacity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventReceiver", reflect.TypeOf((*MockClient)(nil).AddEventReceiver), msgInstance, filterFunc, channelCapacity)
}

// AddFavoriteSticker mocks base method.
func (m *MockClient) AddFavoriteSticker(sticker tdlib.InputFile) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFavoriteSticker", sticker)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFavoriteSticker indicates an expected call of AddFavoriteSticker.
func (mr *MockClientMockRecorder) AddFavoriteSticker(sticker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFavoriteSticker", reflect.TypeOf((*MockClient)(nil).AddFavoriteSticker), sticker)
}

// AddLocalMessage mocks base method.
func (m *MockClient) AddLocalMessage(chatID int64, senderID tdlib.MessageSender, replyToMessageID int64, disableNotification bool, inputMessageContent tdlib.InputMessageContent) (*tdlib.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLocalMessage", chatID, senderID, replyToMessageID, disableNotification, inputMessageContent)
	ret0, _ := ret[0].(*tdlib.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLocalMessage indicates an expected call of AddLocalMessage.
func (mr *MockClientMockRecorder) AddLocalMessage(chatID, senderID, replyToMessageID, disableNotification, inputMessageContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocalMessage", reflect.TypeOf((*MockClient)(nil).AddLocalMessage), chatID, senderID, replyToMessageID, disableNotification, inputMessageContent)
}

// AddLogMessage mocks base method.
func (m *MockClient) AddLogMessage(verbosityLevel int32, text string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLogMessage", verbosityLevel, text)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLogMessage indicates an expected call of AddLogMessage.
func (mr *MockClientMockRecorder) AddLogMessage(verbosityLevel, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLogMessage", reflect.TypeOf((*MockClient)(nil).AddLogMessage), verbosityLevel, text)
}

// AddNetworkStatistics mocks base method.
func (m *MockClient) AddNetworkStatistics(entry tdlib.NetworkStatisticsEntry) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNetworkStatistics", entry)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNetworkStatistics indicates an expected call of AddNetworkStatistics.
func (mr *MockClientMockRecorder) AddNetworkStatistics(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNetworkStatistics", reflect.TypeOf((*MockClient)(nil).AddNetworkStatistics), entry)
}

// AddProxy mocks base method.
func (m *MockClient) AddProxy(server string, port int32, enable bool, typeParam tdlib.ProxyType) (*tdlib.Proxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProxy", server, port, enable, typeParam)
	ret0, _ := ret[0].(*tdlib.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProxy indicates an expected call of AddProxy.
func (mr *MockClientMockRecorder) AddProxy(server, port, enable, typeParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProxy", reflect.TypeOf((*MockClient)(nil).AddProxy), server, port, enable, typeParam)
}

// AddRecentSticker mocks base method.
func (m *MockClient) AddRecentSticker(isAttached bool, sticker tdlib.InputFile) (*tdlib.Stickers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRecentSticker", isAttached, sticker)
	ret0, _ := ret[0].(*tdlib.Stickers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRecentSticker indicates an expected call of AddRecentSticker.
func (mr *MockClientMockRecorder) AddRecentSticker(isAttached, sticker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRecentSticker", reflect.TypeOf((*MockClient)(nil).AddRecentSticker), isAttached, sticker)
}

// AddRecentlyFoundChat mocks base method.
func (m *MockClient) AddRecentlyFoundChat(chatID int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRecentlyFoundChat", chatID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRecentlyFoundChat indicates an expected call of AddRecentlyFoundChat.
func (mr *MockClientMockRecorder) AddRecentlyFoundChat(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRecentlyFoundChat", reflect.TypeOf((*MockClient)(nil).AddRecentlyFoundChat), chatID)
}

// AddSavedAnimation mocks base method.
func (m *MockClient) AddSavedAnimation(animation tdlib.InputFile) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSavedAnimation", animation)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSavedAnimation indicates an expected call of AddSavedAnimation.
func (mr *MockClientMockRecorder) AddSavedAnimation(animation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSavedAnimation", reflect.TypeOf((*MockClient)(nil).AddSavedAnimation), animation)
}

// AddStickerToSet mocks base method.
func (m *MockClient) AddStickerToSet(userID int64, name string, sticker tdlib.InputSticker) (*tdlib.StickerSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStickerToSet", userID, name, sticker)
	ret0, _ := ret[0].(*tdlib.StickerSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddStickerToSet indicates an expected call of AddStickerToSet.
func (mr *MockClientMockRecorder) AddStickerToSet(userID, name, sticker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStickerToSet", reflect.TypeOf((*MockClient)(nil).AddStickerToSet), userID, name, sticker)
}

// AnswerCallbackQuery mocks base method.
func (m *MockClient) AnswerCallbackQuery(callbackQueryID *tdlib.JSONInt64, text string, showAlert bool, uRL string, cacheTime int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnswerCallbackQuery", callbackQueryID, text, showAlert, uRL, cacheTime)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnswerCallbackQuery indicates an expected call of AnswerCallbackQuery.
func (mr *MockClientMockRecorder) AnswerCallbackQuery(callbackQueryID, text, showAlert, uRL, cacheTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswerCallbackQuery", reflect.TypeOf((*MockClient)(nil).AnswerCallbackQuery), callbackQueryID, text, showAlert, uRL, cacheTime)
}

// AnswerCustomQuery mocks base method.
func (m *MockClient) AnswerCustomQuery(customQueryID *tdlib.JSONInt64, data string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnswerCustomQuery", customQueryID, data)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnswerCustomQuery indicates an expected call of AnswerCustomQuery.
func (mr *MockClientMockRecorder) AnswerCustomQuery(customQueryID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswerCustomQuery", reflect.TypeOf((*MockClient)(nil).AnswerCustomQuery), customQueryID, data)
}

// AnswerInlineQuery mocks base method.
func (m *MockClient) AnswerInlineQuery(inlineQueryID *tdlib.JSONInt64, isPersonal bool, results []tdlib.InputInlineQueryResult, cacheTime int32, nextOffset, switchPmText, switchPmParameter string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnswerInlineQuery", inlineQueryID, isPersonal, results, cacheTime, nextOffset, switchPmText, switchPmParameter)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnswerInlineQuery indicates an expected call of AnswerInlineQuery.
func (mr *MockClientMockRecorder) AnswerInlineQuery(inlineQueryID, isPersonal, results, cacheTime, nextOffset, switchPmText, switchPmParameter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswerInlineQuery", reflect.TypeOf((*MockClient)(nil).AnswerInlineQuery), inlineQueryID, isPersonal, results, cacheTime, nextOffset, switchPmText, switchPmParameter)
}

// AnswerPreCheckoutQuery mocks base method.
func (m *MockClient) AnswerPreCheckoutQuery(preCheckoutQueryID *tdlib.JSONInt64, errParamMessage string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnswerPreCheckoutQuery", preCheckoutQueryID, errParamMessage)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnswerPreCheckoutQuery indicates an expected call of AnswerPreCheckoutQuery.
func (mr *MockClientMockRecorder) AnswerPreCheckoutQuery(preCheckoutQueryID, errParamMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswerPreCheckoutQuery", reflect.TypeOf((*MockClient)(nil).AnswerPreCheckoutQuery), preCheckoutQueryID, errParamMessage)
}

// AnswerShippingQuery mocks base method.
func (m *MockClient) AnswerShippingQuery(shippingQueryID *tdlib.JSONInt64, shippingOptions []tdlib.ShippingOption, errParamMessage string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnswerShippingQuery", shippingQueryID, shippingOptions, errParamMessage)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnswerShippingQuery indicates an expected call of AnswerShippingQuery.
func (mr *MockClientMockRecorder) AnswerShippingQuery(shippingQueryID, shippingOptions, errParamMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswerShippingQuery", reflect.TypeOf((*MockClient)(nil).AnswerShippingQuery), shippingQueryID, shippingOptions, errParamMessage)
}

// Authorize mocks base method.
func (m *MockClient) Authorize() (tdlib.AuthorizationState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize")
	ret0, _ := ret[0].(tdlib.AuthorizationState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockClientMockRecorder) Authorize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockClient)(nil).Authorize))
}

// BanChatMember mocks base method.
func (m *MockClient) BanChatMember(chatID int64, memberID tdlib.MessageSender, bannedUntilDate int32, revokeMessages bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BanChatMember", chatID, memberID, bannedUntilDate, revokeMessages)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BanChatMember indicates an expected call of BanChatMember.
func (mr *MockClientMockRecorder) BanChatMember(chatID, memberID, bannedUntilDate, revokeMessages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanChatMember", reflect.TypeOf((*MockClient)(nil).BanChatMember), chatID, memberID, bannedUntilDate, revokeMessages)
}

// BlockMessageSenderFromReplies mocks base method.
func (m *MockClient) BlockMessageSenderFromReplies(messageID int64, deleteMessage, deleteAllMessages, reportSpam bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockMessageSenderFromReplies", messageID, deleteMessage, deleteAllMessages, reportSpam)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockMessageSenderFromReplies indicates an expected call of BlockMessageSenderFromReplies.
func (mr *MockClientMockRecorder) BlockMessageSenderFromReplies(messageID, deleteMessage, deleteAllMessages, reportSpam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockMessageSenderFromReplies", reflect.TypeOf((*MockClient)(nil).BlockMessageSenderFromReplies), messageID, deleteMessage, deleteAllMessages, reportSpam)
}

// CanTransferOwnership mocks base method.
func (m *MockClient) CanTransferOwnership() (tdlib.CanTransferOwnershipResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanTransferOwnership")
	ret0, _ := ret[0].(tdlib.CanTransferOwnershipResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanTransferOwnership indicates an expected call of CanTransferOwnership.
func (mr *MockClientMockRecorder) CanTransferOwnership() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanTransferOwnership", reflect.TypeOf((*MockClient)(nil).CanTransferOwnership))
}

// CancelDownloadFile mocks base method.
func (m *MockClient) CancelDownloadFile(fileID int32, onlyIfPending bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelDownloadFile", fileID, onlyIfPending)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelDownloadFile indicates an expected call of CancelDownloadFile.
func (mr *MockClientMockRecorder) CancelDownloadFile(fileID, onlyIfPending interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDownloadFile", reflect.TypeOf((*MockClient)(nil).CancelDownloadFile), fileID, onlyIfPending)
}

// CancelPasswordReset mocks base method.
func (m *MockClient) CancelPasswordReset() (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelPasswordReset")
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelPasswordReset indicates an expected call of CancelPasswordReset.
func (mr *MockClientMockRecorder) CancelPasswordReset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelPasswordReset", reflect.TypeOf((*MockClient)(nil).CancelPasswordReset))
}

// CancelUploadFile mocks base method.
func (m *MockClient) CancelUploadFile(fileID int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelUploadFile", fileID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelUploadFile indicates an expected call of CancelUploadFile.
func (mr *MockClientMockRecorder) CancelUploadFile(fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelUploadFile", reflect.TypeOf((*MockClient)(nil).CancelUploadFile), fileID)
}

// ChangeImportedContacts mocks base method.
func (m *MockClient) ChangeImportedContacts(contacts []tdlib.Contact) (*tdlib.ImportedContacts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeImportedContacts", contacts)
	ret0, _ := ret[0].(*tdlib.ImportedContacts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeImportedContacts indicates an expected call of ChangeImportedContacts.
func (mr *MockClientMockRecorder) ChangeImportedContacts(contacts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeImportedContacts", reflect.TypeOf((*MockClient)(nil).ChangeImportedContacts), contacts)
}

// ChangePhoneNumber mocks base method.
func (m *MockClient) ChangePhoneNumber(phoneNumber string, settings *tdlib.PhoneNumberAuthenticationSettings) (*tdlib.AuthenticationCodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePhoneNumber", phoneNumber, settings)
	ret0, _ := ret[0].(*tdlib.AuthenticationCodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePhoneNumber indicates an expected call of ChangePhoneNumber.
func (mr *MockClientMockRecorder) ChangePhoneNumber(phoneNumber, settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePhoneNumber", reflect.TypeOf((*MockClient)(nil).ChangePhoneNumber), phoneNumber, settings)
}

// ChangeStickerSet mocks base method.
func (m *MockClient) ChangeStickerSet(setID *tdlib.JSONInt64, isInstalled, isArchived bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeStickerSet", setID, isInstalled, isArchived)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeStickerSet indicates an expected call of ChangeStickerSet.
func (mr *MockClientMockRecorder) ChangeStickerSet(setID, isInstalled, isArchived interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStickerSet", reflect.TypeOf((*MockClient)(nil).ChangeStickerSet), setID, isInstalled, isArchived)
}

// CheckAuthenticationBotToken mocks base method.
func (m *MockClient) CheckAuthenticationBotToken(token string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthenticationBotToken", token)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuthenticationBotToken indicates an expected call of CheckAuthenticationBotToken.
func (mr *MockClientMockRecorder) CheckAuthenticationBotToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthenticationBotToken", reflect.TypeOf((*MockClient)(nil).CheckAuthenticationBotToken), token)
}

// CheckAuthenticationCode mocks base method.
func (m *MockClient) CheckAuthenticationCode(code string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthenticationCode", code)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuthenticationCode indicates an expected call of CheckAuthenticationCode.
func (mr *MockClientMockRecorder) CheckAuthenticationCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthenticationCode", reflect.TypeOf((*MockClient)(nil).CheckAuthenticationCode), code)
}

// CheckAuthenticationPassword mocks base method.
func (m *MockClient) CheckAuthenticationPassword(password string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthenticationPassword", password)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuthenticationPassword indicates an expected call of CheckAuthenticationPassword.
func (mr *MockClientMockRecorder) CheckAuthenticationPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthenticationPassword", reflect.TypeOf((*MockClient)(nil).CheckAuthenticationPassword), password)
}

// CheckAuthenticationPasswordRecoveryCode mocks base method.
func (m *MockClient) CheckAuthenticationPasswordRecoveryCode(recoveryCode string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthenticationPasswordRecoveryCode", recoveryCode)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuthenticationPasswordRecoveryCode indicates an expected call of CheckAuthenticationPasswordRecoveryCode.
func (mr *MockClientMockRecorder) CheckAuthenticationPasswordRecoveryCode(recoveryCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthenticationPasswordRecoveryCode", reflect.TypeOf((*MockClient)(nil).CheckAuthenticationPasswordRecoveryCode), recoveryCode)
}

// CheckChangePhoneNumberCode mocks base method.
func (m *MockClient) CheckChangePhoneNumberCode(code string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckChangePhoneNumberCode", code)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckChangePhoneNumberCode indicates an expected call of CheckChangePhoneNumberCode.
func (mr *MockClientMockRecorder) CheckChangePhoneNumberCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckChangePhoneNumberCode", reflect.TypeOf((*MockClient)(nil).CheckChangePhoneNumberCode), code)
}

// CheckChatInviteLink mocks base method.
func (m *MockClient) CheckChatInviteLink(inviteLink string) (*tdlib.ChatInviteLinkInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckChatInviteLink", inviteLink)
	ret0, _ := ret[0].(*tdlib.ChatInviteLinkInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckChatInviteLink indicates an expected call of CheckChatInviteLink.
func (mr *MockClientMockRecorder) CheckChatInviteLink(inviteLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckChatInviteLink", reflect.TypeOf((*MockClient)(nil).CheckChatInviteLink), inviteLink)
}

// CheckChatUsername mocks base method.
func (m *MockClient) CheckChatUsername(chatID int64, username string) (tdlib.CheckChatUsernameResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckChatUsername", chatID, username)
	ret0, _ := ret[0].(tdlib.CheckChatUsernameResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckChatUsername indicates an expected call of CheckChatUsername.
func (mr *MockClientMockRecorder) CheckChatUsername(chatID, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckChatUsername", reflect.TypeOf((*MockClient)(nil).CheckChatUsername), chatID, username)
}

// CheckCreatedPublicChatsLimit mocks base method.
func (m *MockClient) CheckCreatedPublicChatsLimit(typeParam tdlib.PublicChatType) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCreatedPublicChatsLimit", typeParam)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCreatedPublicChatsLimit indicates an expected call of CheckCreatedPublicChatsLimit.
func (mr *MockClientMockRecorder) CheckCreatedPublicChatsLimit(typeParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCreatedPublicChatsLimit", reflect.TypeOf((*MockClient)(nil).CheckCreatedPublicChatsLimit), typeParam)
}

// CheckDatabaseEncryptionKey mocks base method.
func (m *MockClient) CheckDatabaseEncryptionKey(encryptionKey []byte) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDatabaseEncryptionKey", encryptionKey)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDatabaseEncryptionKey indicates an expected call of CheckDatabaseEncryptionKey.
func (mr *MockClientMockRecorder) CheckDatabaseEncryptionKey(encryptionKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDatabaseEncryptionKey", reflect.TypeOf((*MockClient)(nil).CheckDatabaseEncryptionKey), encryptionKey)
}

// CheckEmailAddressVerificationCode mocks base method.
func (m *MockClient) CheckEmailAddressVerificationCode(code string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmailAddressVerificationCode", code)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEmailAddressVerificationCode indicates an expected call of CheckEmailAddressVerificationCode.
func (mr *MockClientMockRecorder) CheckEmailAddressVerificationCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmailAddressVerificationCode", reflect.TypeOf((*MockClient)(nil).CheckEmailAddressVerificationCode), code)
}

// CheckPasswordRecoveryCode mocks base method.
func (m *MockClient) CheckPasswordRecoveryCode(recoveryCode string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPasswordRecoveryCode", recoveryCode)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPasswordRecoveryCode indicates an expected call of CheckPasswordRecoveryCode.
func (mr *MockClientMockRecorder) CheckPasswordRecoveryCode(recoveryCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPasswordRecoveryCode", reflect.TypeOf((*MockClient)(nil).CheckPasswordRecoveryCode), recoveryCode)
}

// CheckPhoneNumberConfirmationCode mocks base method.
func (m *MockClient) CheckPhoneNumberConfirmationCode(code string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPhoneNumberConfirmationCode", code)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPhoneNumberConfirmationCode indicates an expected call of CheckPhoneNumberConfirmationCode.
func (mr *MockClientMockRecorder) CheckPhoneNumberConfirmationCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPhoneNumberConfirmationCode", reflect.TypeOf((*MockClient)(nil).CheckPhoneNumberConfirmationCode), code)
}

// CheckPhoneNumberVerificationCode mocks base method.
func (m *MockClient) CheckPhoneNumberVerificationCode(code string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPhoneNumberVerificationCode", code)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPhoneNumberVerificationCode indicates an expected call of CheckPhoneNumberVerificationCode.
func (mr *MockClientMockRecorder) CheckPhoneNumberVerificationCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPhoneNumberVerificationCode", reflect.TypeOf((*MockClient)(nil).CheckPhoneNumberVerificationCode), code)
}

// CheckRecoveryEmailAddressCode mocks base method.
func (m *MockClient) CheckRecoveryEmailAddressCode(code string) (*tdlib.PasswordState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRecoveryEmailAddressCode", code)
	ret0, _ := ret[0].(*tdlib.PasswordState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRecoveryEmailAddressCode indicates an expected call of CheckRecoveryEmailAddressCode.
func (mr *MockClientMockRecorder) CheckRecoveryEmailAddressCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRecoveryEmailAddressCode", reflect.TypeOf((*MockClient)(nil).CheckRecoveryEmailAddressCode), code)
}

// CheckStickerSetName mocks base method.
func (m *MockClient) CheckStickerSetName(name string) (tdlib.CheckStickerSetNameResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStickerSetName", name)
	ret0, _ := ret[0].(tdlib.CheckStickerSetNameResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckStickerSetName indicates an expected call of CheckStickerSetName.
func (mr *MockClientMockRecorder) CheckStickerSetName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStickerSetName", reflect.TypeOf((*MockClient)(nil).CheckStickerSetName), name)
}

// CleanFileName mocks base method.
func (m *MockClient) CleanFileName(fileName string) (*tdlib.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanFileName", fileName)
	ret0, _ := ret[0].(*tdlib.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanFileName indicates an expected call of CleanFileName.
func (mr *MockClientMockRecorder) CleanFileName(fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanFileName", reflect.TypeOf((*MockClient)(nil).CleanFileName), fileName)
}

// ClearAllDraftMessages mocks base method.
func (m *MockClient) ClearAllDraftMessages(excludeSecretChats bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearAllDraftMessages", excludeSecretChats)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearAllDraftMessages indicates an expected call of ClearAllDraftMessages.
func (mr *MockClientMockRecorder) ClearAllDraftMessages(excludeSecretChats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAllDraftMessages", reflect.TypeOf((*MockClient)(nil).ClearAllDraftMessages), excludeSecretChats)
}

// ClearImportedContacts mocks base method.
func (m *MockClient) ClearImportedContacts() (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearImportedContacts")
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearImportedContacts indicates an expected call of ClearImportedContacts.
func (mr *MockClientMockRecorder) ClearImportedContacts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearImportedContacts", reflect.TypeOf((*MockClient)(nil).ClearImportedContacts))
}

// ClearRecentStickers mocks base method.
func (m *MockClient) ClearRecentStickers(isAttached bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearRecentStickers", isAttached)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearRecentStickers indicates an expected call of ClearRecentStickers.
func (mr *MockClientMockRecorder) ClearRecentStickers(isAttached interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearRecentStickers", reflect.TypeOf((*MockClient)(nil).ClearRecentStickers), isAttached)
}

// ClearRecentlyFoundChats mocks base method.
func (m *MockClient) ClearRecentlyFoundChats() (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearRecentlyFoundChats")
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearRecentlyFoundChats indicates an expected call of ClearRecentlyFoundChats.
func (mr *MockClientMockRecorder) ClearRecentlyFoundChats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearRecentlyFoundChats", reflect.TypeOf((*MockClient)(nil).ClearRecentlyFoundChats))
}

// ClickAnimatedEmojiMessage mocks base method.
func (m *MockClient) ClickAnimatedEmojiMessage(chatID, messageID int64) (*tdlib.Sticker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClickAnimatedEmojiMessage", chatID, messageID)
	ret0, _ := ret[0].(*tdlib.Sticker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClickAnimatedEmojiMessage indicates an expected call of ClickAnimatedEmojiMessage.
func (mr *MockClientMockRecorder) ClickAnimatedEmojiMessage(chatID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClickAnimatedEmojiMessage", reflect.TypeOf((*MockClient)(nil).ClickAnimatedEmojiMessage), chatID, messageID)
}

// Close mocks base method.
func (m *MockClient) Close() (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// CloseChat mocks base method.
func (m *MockClient) CloseChat(chatID int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseChat", chatID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseChat indicates an expected call of CloseChat.
func (mr *MockClientMockRecorder) CloseChat(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseChat", reflect.TypeOf((*MockClient)(nil).CloseChat), chatID)
}

// CloseSecretChat mocks base method.
func (m *MockClient) CloseSecretChat(secretChatID int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSecretChat", secretChatID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseSecretChat indicates an expected call of CloseSecretChat.
func (mr *MockClientMockRecorder) CloseSecretChat(secretChatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSecretChat", reflect.TypeOf((*MockClient)(nil).CloseSecretChat), secretChatID)
}

// ConfirmQrCodeAuthentication mocks base method.
func (m *MockClient) ConfirmQrCodeAuthentication(link string) (*tdlib.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmQrCodeAuthentication", link)
	ret0, _ := ret[0].(*tdlib.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmQrCodeAuthentication indicates an expected call of ConfirmQrCodeAuthentication.
func (mr *MockClientMockRecorder) ConfirmQrCodeAuthentication(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmQrCodeAuthentication", reflect.TypeOf((*MockClient)(nil).ConfirmQrCodeAuthentication), link)
}

// CreateBasicGroupChat mocks base method.
func (m *MockClient) CreateBasicGroupChat(basicGroupID int64, force bool) (*tdlib.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBasicGroupChat", basicGroupID, force)
	ret0, _ := ret[0].(*tdlib.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBasicGroupChat indicates an expected call of CreateBasicGroupChat.
func (mr *MockClientMockRecorder) CreateBasicGroupChat(basicGroupID, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBasicGroupChat", reflect.TypeOf((*MockClient)(nil).CreateBasicGroupChat), basicGroupID, force)
}

// CreateCall mocks base method.
func (m *MockClient) CreateCall(userID int64, protocol *tdlib.CallProtocol, isVideo bool) (*tdlib.CallID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCall", userID, protocol, isVideo)
	ret0, _ := ret[0].(*tdlib.CallID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCall indicates an expected call of CreateCall.
func (mr *MockClientMockRecorder) CreateCall(userID, protocol, isVideo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCall", reflect.TypeOf((*MockClient)(nil).CreateCall), userID, protocol, isVideo)
}

// CreateChatFilter mocks base method.
func (m *MockClient) CreateChatFilter(filter *tdlib.ChatFilter) (*tdlib.ChatFilterInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatFilter", filter)
	ret0, _ := ret[0].(*tdlib.ChatFilterInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatFilter indicates an expected call of CreateChatFilter.
func (mr *MockClientMockRecorder) CreateChatFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatFilter", reflect.TypeOf((*MockClient)(nil).CreateChatFilter), filter)
}

// CreateChatInviteLink mocks base method.
func (m *MockClient) CreateChatInviteLink(chatID int64, name string, expirationDate, memberLimit int32, createsJoinRequest bool) (*tdlib.ChatInviteLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatInviteLink", chatID, name, expirationDate, memberLimit, createsJoinRequest)
	ret0, _ := ret[0].(*tdlib.ChatInviteLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatInviteLink indicates an expected call of CreateChatInviteLink.
func (mr *MockClientMockRecorder) CreateChatInviteLink(chatID, name, expirationDate, memberLimit, createsJoinRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatInviteLink", reflect.TypeOf((*MockClient)(nil).CreateChatInviteLink), chatID, name, expirationDate, memberLimit, createsJoinRequest)
}

// CreateNewBasicGroupChat mocks base method.
func (m *MockClient) CreateNewBasicGroupChat(userIDs []int64, title string) (*tdlib.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewBasicGroupChat", userIDs, title)
	ret0, _ := ret[0].(*tdlib.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewBasicGroupChat indicates an expected call of CreateNewBasicGroupChat.
func (mr *MockClientMockRecorder) CreateNewBasicGroupChat(userIDs, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewBasicGroupChat", reflect.TypeOf((*MockClient)(nil).CreateNewBasicGroupChat), userIDs, title)
}

// CreateNewSecretChat mocks base method.
func (m *MockClient) CreateNewSecretChat(userID int64) (*tdlib.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewSecretChat", userID)
	ret0, _ := ret[0].(*tdlib.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewSecretChat indicates an expected call of CreateNewSecretChat.
func (mr *MockClientMockRecorder) CreateNewSecretChat(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewSecretChat", reflect.TypeOf((*MockClient)(nil).CreateNewSecretChat), userID)
}

// CreateNewStickerSet mocks base method.
func (m *MockClient) CreateNewStickerSet(userID int64, title, name string, isMasks bool, stickers []tdlib.InputSticker, source string) (*tdlib.StickerSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewStickerSet", userID, title, name, isMasks, stickers, source)
	ret0, _ := ret[0].(*tdlib.StickerSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewStickerSet indicates an expected call of CreateNewStickerSet.
func (mr *MockClientMockRecorder) CreateNewStickerSet(userID, title, name, isMasks, stickers, source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewStickerSet", reflect.TypeOf((*MockClient)(nil).CreateNewStickerSet), userID, title, name, isMasks, stickers, source)
}

// CreateNewSupergroupChat mocks base method.
func (m *MockClient) CreateNewSupergroupChat(title string, isChannel bool, description string, location *tdlib.ChatLocation, forImport bool) (*tdlib.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewSupergroupChat", title, isChannel, description, location, forImport)
	ret0, _ := ret[0].(*tdlib.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewSupergroupChat indicates an expected call of CreateNewSupergroupChat.
func (mr *MockClientMockRecorder) CreateNewSupergroupChat(title, isChannel, description, location, forImport interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewSupergroupChat", reflect.TypeOf((*MockClient)(nil).CreateNewSupergroupChat), title, isChannel, description, location, forImport)
}

// CreatePrivateChat mocks base method.
func (m *MockClient) CreatePrivateChat(userID int64, force bool) (*tdlib.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivateChat", userID, force)
	ret0, _ := ret[0].(*tdlib.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivateChat indicates an expected call of CreatePrivateChat.
func (mr *MockClientMockRecorder) CreatePrivateChat(userID, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateChat", reflect.TypeOf((*MockClient)(nil).CreatePrivateChat), userID, force)
}

// CreateSecretChat mocks base method.
func (m *MockClient) CreateSecretChat(secretChatID int32) (*tdlib.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecretChat", secretChatID)
	ret0, _ := ret[0].(*tdlib.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecretChat indicates an expected call of CreateSecretChat.
func (mr *MockClientMockRecorder) CreateSecretChat(secretChatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecretChat", reflect.TypeOf((*MockClient)(nil).CreateSecretChat), secretChatID)
}

// CreateSupergroupChat mocks base method.
func (m *MockClient) CreateSupergroupChat(supergroupID int64, force bool) (*tdlib.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSupergroupChat", supergroupID, force)
	ret0, _ := ret[0].(*tdlib.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSupergroupChat indicates an expected call of CreateSupergroupChat.
func (mr *MockClientMockRecorder) CreateSupergroupChat(supergroupID, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSupergroupChat", reflect.TypeOf((*MockClient)(nil).CreateSupergroupChat), supergroupID, force)
}

// CreateTemporaryPassword mocks base method.
func (m *MockClient) CreateTemporaryPassword(password string, validFor int32) (*tdlib.TemporaryPasswordState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemporaryPassword", password, validFor)
	ret0, _ := ret[0].(*tdlib.TemporaryPasswordState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemporaryPassword indicates an expected call of CreateTemporaryPassword.
func (mr *MockClientMockRecorder) CreateTemporaryPassword(password, validFor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemporaryPassword", reflect.TypeOf((*MockClient)(nil).CreateTemporaryPassword), password, validFor)
}

// CreateVideoChat mocks base method.
func (m *MockClient) CreateVideoChat(chatID int64, title string, startDate int32) (*tdlib.GroupCallID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVideoChat", chatID, title, startDate)
	ret0, _ := ret[0].(*tdlib.GroupCallID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVideoChat indicates an expected call of CreateVideoChat.
func (mr *MockClientMockRecorder) CreateVideoChat(chatID, title, startDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVideoChat", reflect.TypeOf((*MockClient)(nil).CreateVideoChat), chatID, title, startDate)
}

// DeleteAccount mocks base method.
func (m *MockClient) DeleteAccount(reason string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", reason)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockClientMockRecorder) DeleteAccount(reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockClient)(nil).DeleteAccount), reason)
}

// DeleteAllCallMessages mocks base method.
func (m *MockClient) DeleteAllCallMessages(revoke bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllCallMessages", revoke)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllCallMessages indicates an expected call of DeleteAllCallMessages.
func (mr *MockClientMockRecorder) DeleteAllCallMessages(revoke interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllCallMessages", reflect.TypeOf((*MockClient)(nil).DeleteAllCallMessages), revoke)
}

// DeleteAllRevokedChatInviteLinks mocks base method.
func (m *MockClient) DeleteAllRevokedChatInviteLinks(chatID, creatorUserID int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllRevokedChatInviteLinks", chatID, creatorUserID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllRevokedChatInviteLinks indicates an expected call of DeleteAllRevokedChatInviteLinks.
func (mr *MockClientMockRecorder) DeleteAllRevokedChatInviteLinks(chatID, creatorUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllRevokedChatInviteLinks", reflect.TypeOf((*MockClient)(nil).DeleteAllRevokedChatInviteLinks), chatID, creatorUserID)
}

// DeleteChat mocks base method.
func (m *MockClient) DeleteChat(chatID int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChat", chatID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChat indicates an expected call of DeleteChat.
func (mr *MockClientMockRecorder) DeleteChat(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChat", reflect.TypeOf((*MockClient)(nil).DeleteChat), chatID)
}

// DeleteChatFilter mocks base method.
func (m *MockClient) DeleteChatFilter(chatFilterID int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChatFilter", chatFilterID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChatFilter indicates an expected call of DeleteChatFilter.
func (mr *MockClientMockRecorder) DeleteChatFilter(chatFilterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChatFilter", reflect.TypeOf((*MockClient)(nil).DeleteChatFilter), chatFilterID)
}

// DeleteChatHistory mocks base method.
func (m *MockClient) DeleteChatHistory(chatID int64, removeFromChatList, revoke bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChatHistory", chatID, removeFromChatList, revoke)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChatHistory indicates an expected call of DeleteChatHistory.
func (mr *MockClientMockRecorder) DeleteChatHistory(chatID, removeFromChatList, revoke interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChatHistory", reflect.TypeOf((*MockClient)(nil).DeleteChatHistory), chatID, removeFromChatList, revoke)
}

// DeleteChatMessagesByDate mocks base method.
func (m *MockClient) DeleteChatMessagesByDate(chatID int64, minDate, maxDate int32, revoke bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChatMessagesByDate", chatID, minDate, maxDate, revoke)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChatMessagesByDate indicates an expected call of DeleteChatMessagesByDate.
func (mr *MockClientMockRecorder) DeleteChatMessagesByDate(chatID, minDate, maxDate, revoke interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChatMessagesByDate", reflect.TypeOf((*MockClient)(nil).DeleteChatMessagesByDate), chatID, minDate, maxDate, revoke)
}

// DeleteChatMessagesBySender mocks base method.
func (m *MockClient) DeleteChatMessagesBySender(chatID int64, senderID tdlib.MessageSender) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChatMessagesBySender", chatID, senderID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChatMessagesBySender indicates an expected call of DeleteChatMessagesBySender.
func (mr *MockClientMockRecorder) DeleteChatMessagesBySender(chatID, senderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChatMessagesBySender", reflect.TypeOf((*MockClient)(nil).DeleteChatMessagesBySender), chatID, senderID)
}

// DeleteChatReplyMarkup mocks base method.
func (m *MockClient) DeleteChatReplyMarkup(chatID, messageID int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChatReplyMarkup", chatID, messageID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChatReplyMarkup indicates an expected call of DeleteChatReplyMarkup.
func (mr *MockClientMockRecorder) DeleteChatReplyMarkup(chatID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChatReplyMarkup", reflect.TypeOf((*MockClient)(nil).DeleteChatReplyMarkup), chatID, messageID)
}

// DeleteCommands mocks base method.
func (m *MockClient) DeleteCommands(scope tdlib.BotCommandScope, languageCode string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommands", scope, languageCode)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommands indicates an expected call of DeleteCommands.
func (mr *MockClientMockRecorder) DeleteCommands(scope, languageCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommands", reflect.TypeOf((*MockClient)(nil).DeleteCommands), scope, languageCode)
}

// DeleteFile mocks base method.
func (m *MockClient) DeleteFile(fileID int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", fileID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockClientMockRecorder) DeleteFile(fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockClient)(nil).DeleteFile), fileID)
}

// DeleteLanguagePack mocks base method.
func (m *MockClient) DeleteLanguagePack(languagePackID string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLanguagePack", languagePackID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLanguagePack indicates an expected call of DeleteLanguagePack.
func (mr *MockClientMockRecorder) DeleteLanguagePack(languagePackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLanguagePack", reflect.TypeOf((*MockClient)(nil).DeleteLanguagePack), languagePackID)
}

// DeleteMessages mocks base method.
func (m *MockClient) DeleteMessages(chatID int64, messageIDs []int64, revoke bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessages", chatID, messageIDs, revoke)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMessages indicates an expected call of DeleteMessages.
func (mr *MockClientMockRecorder) DeleteMessages(chatID, messageIDs, revoke interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessages", reflect.TypeOf((*MockClient)(nil).DeleteMessages), chatID, messageIDs, revoke)
}

// DeletePassportElement mocks base method.
func (m *MockClient) DeletePassportElement(typeParam tdlib.PassportElementType) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePassportElement", typeParam)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePassportElement indicates an expected call of DeletePassportElement.
func (mr *MockClientMockRecorder) DeletePassportElement(typeParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePassportElement", reflect.TypeOf((*MockClient)(nil).DeletePassportElement), typeParam)
}

// DeleteProfilePhoto mocks base method.
func (m *MockClient) DeleteProfilePhoto(profilePhotoID *tdlib.JSONInt64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfilePhoto", profilePhotoID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfilePhoto indicates an expected call of DeleteProfilePhoto.
func (mr *MockClientMockRecorder) DeleteProfilePhoto(profilePhotoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfilePhoto", reflect.TypeOf((*MockClient)(nil).DeleteProfilePhoto), profilePhotoID)
}

// DeleteRevokedChatInviteLink mocks base method.
func (m *MockClient) DeleteRevokedChatInviteLink(chatID int64, inviteLink string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRevokedChatInviteLink", chatID, inviteLink)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRevokedChatInviteLink indicates an expected call of DeleteRevokedChatInviteLink.
func (mr *MockClientMockRecorder) DeleteRevokedChatInviteLink(chatID, inviteLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRevokedChatInviteLink", reflect.TypeOf((*MockClient)(nil).DeleteRevokedChatInviteLink), chatID, inviteLink)
}

// DeleteSavedCredentials mocks base method.
func (m *MockClient) DeleteSavedCredentials() (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSavedCredentials")
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSavedCredentials indicates an expected call of DeleteSavedCredentials.
func (mr *MockClientMockRecorder) DeleteSavedCredentials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSavedCredentials", reflect.TypeOf((*MockClient)(nil).DeleteSavedCredentials))
}

// DeleteSavedOrderInfo mocks base method.
func (m *MockClient) DeleteSavedOrderInfo() (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSavedOrderInfo")
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSavedOrderInfo indicates an expected call of DeleteSavedOrderInfo.
func (mr *MockClientMockRecorder) DeleteSavedOrderInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSavedOrderInfo", reflect.TypeOf((*MockClient)(nil).DeleteSavedOrderInfo))
}

// Destroy mocks base method.
func (m *MockClient) Destroy() (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Destroy indicates an expected call of Destroy.
func (mr *MockClientMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockClient)(nil).Destroy))
}

// DisableProxy mocks base method.
func (m *MockClient) DisableProxy() (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableProxy")
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableProxy indicates an expected call of DisableProxy.
func (mr *MockClientMockRecorder) DisableProxy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableProxy", reflect.TypeOf((*MockClient)(nil).DisableProxy))
}

// DiscardCall mocks base method.
func (m *MockClient) DiscardCall(callID int32, isDisconnected bool, duration int32, isVideo bool, connectionID *tdlib.JSONInt64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscardCall", callID, isDisconnected, duration, isVideo, connectionID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscardCall indicates an expected call of DiscardCall.
func (mr *MockClientMockRecorder) DiscardCall(callID, isDisconnected, duration, isVideo, connectionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscardCall", reflect.TypeOf((*MockClient)(nil).DiscardCall), callID, isDisconnected, duration, isVideo, connectionID)
}

// DisconnectAllWebsites mocks base method.
func (m *MockClient) DisconnectAllWebsites() (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectAllWebsites")
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectAllWebsites indicates an expected call of DisconnectAllWebsites.
func (mr *MockClientMockRecorder) DisconnectAllWebsites() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectAllWebsites", reflect.TypeOf((*MockClient)(nil).DisconnectAllWebsites))
}

// DisconnectWebsite mocks base method.
func (m *MockClient) DisconnectWebsite(websiteID *tdlib.JSONInt64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectWebsite", websiteID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectWebsite indicates an expected call of DisconnectWebsite.
func (mr *MockClientMockRecorder) DisconnectWebsite(websiteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectWebsite", reflect.TypeOf((*MockClient)(nil).DisconnectWebsite), websiteID)
}

// DownloadFile mocks base method.
func (m *MockClient) DownloadFile(fileID, priority, offset, limit int32, synchronous bool) (*tdlib.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", fileID, priority, offset, limit, synchronous)
	ret0, _ := ret[0].(*tdlib.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockClientMockRecorder) DownloadFile(fileID, priority, offset, limit, synchronous interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockClient)(nil).DownloadFile), fileID, priority, offset, limit, synchronous)
}

// EditChatFilter mocks base method.
func (m *MockClient) EditChatFilter(chatFilterID int32, filter *tdlib.ChatFilter) (*tdlib.ChatFilterInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditChatFilter", chatFilterID, filter)
	ret0, _ := ret[0].(*tdlib.ChatFilterInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditChatFilter indicates an expected call of EditChatFilter.
func (mr *MockClientMockRecorder) EditChatFilter(chatFilterID, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditChatFilter", reflect.TypeOf((*MockClient)(nil).EditChatFilter), chatFilterID, filter)
}

// EditChatInviteLink mocks base method.
func (m *MockClient) EditChatInviteLink(chatID int64, inviteLink, name string, expirationDate, memberLimit int32, createsJoinRequest bool) (*tdlib.ChatInviteLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditChatInviteLink", chatID, inviteLink, name, expirationDate, memberLimit, createsJoinRequest)
	ret0, _ := ret[0].(*tdlib.ChatInviteLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditChatInviteLink indicates an expected call of EditChatInviteLink.
func (mr *MockClientMockRecorder) EditChatInviteLink(chatID, inviteLink, name, expirationDate, memberLimit, createsJoinRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditChatInviteLink", reflect.TypeOf((*MockClient)(nil).EditChatInviteLink), chatID, inviteLink, name, expirationDate, memberLimit, createsJoinRequest)
}

// EditCustomLanguagePackInfo mocks base method.
func (m *MockClient) EditCustomLanguagePackInfo(info *tdlib.LanguagePackInfo) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCustomLanguagePackInfo", info)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditCustomLanguagePackInfo indicates an expected call of EditCustomLanguagePackInfo.
func (mr *MockClientMockRecorder) EditCustomLanguagePackInfo(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCustomLanguagePackInfo", reflect.TypeOf((*MockClient)(nil).EditCustomLanguagePackInfo), info)
}

// EditInlineMessageCaption mocks base method.
func (m *MockClient) EditInlineMessageCaption(inlineMessageID string, replyMarkup tdlib.ReplyMarkup, caption *tdlib.FormattedText) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditInlineMessageCaption", inlineMessageID, replyMarkup, caption)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditInlineMessageCaption indicates an expected call of EditInlineMessageCaption.
func (mr *MockClientMockRecorder) EditInlineMessageCaption(inlineMessageID, replyMarkup, caption interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditInlineMessageCaption", reflect.TypeOf((*MockClient)(nil).EditInlineMessageCaption), inlineMessageID, replyMarkup, caption)
}

// EditInlineMessageLiveLocation mocks base method.
func (m *MockClient) EditInlineMessageLiveLocation(inlineMessageID string, replyMarkup tdlib.ReplyMarkup, location *tdlib.Location, heading, proximityAlertRadius int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditInlineMessageLiveLocation", inlineMessageID, replyMarkup, location, heading, proximityAlertRadius)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditInlineMessageLiveLocation indicates an expected call of EditInlineMessageLiveLocation.
func (mr *MockClientMockRecorder) EditInlineMessageLiveLocation(inlineMessageID, replyMarkup, location, heading, proximityAlertRadius interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditInlineMessageLiveLocation", reflect.TypeOf((*MockClient)(nil).EditInlineMessageLiveLocation), inlineMessageID, replyMarkup, location, heading, proximityAlertRadius)
}

// EditInlineMessageMedia mocks base method.
func (m *MockClient) EditInlineMessageMedia(inlineMessageID string, replyMarkup tdlib.ReplyMarkup, inputMessageContent tdlib.InputMessageContent) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditInlineMessageMedia", inlineMessageID, replyMarkup, inputMessageContent)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditInlineMessageMedia indicates an expected call of EditInlineMessageMedia.
func (mr *MockClientMockRecorder) EditInlineMessageMedia(inlineMessageID, replyMarkup, inputMessageContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditInlineMessageMedia", reflect.TypeOf((*MockClient)(nil).EditInlineMessageMedia), inlineMessageID, replyMarkup, inputMessageContent)
}

// EditInlineMessageReplyMarkup mocks base method.
func (m *MockClient) EditInlineMessageReplyMarkup(inlineMessageID string, replyMarkup tdlib.ReplyMarkup) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditInlineMessageReplyMarkup", inlineMessageID, replyMarkup)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditInlineMessageReplyMarkup indicates an expected call of EditInlineMessageReplyMarkup.
func (mr *MockClientMockRecorder) EditInlineMessageReplyMarkup(inlineMessageID, replyMarkup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditInlineMessageReplyMarkup", reflect.TypeOf((*MockClient)(nil).EditInlineMessageReplyMarkup), inlineMessageID, replyMarkup)
}

// EditInlineMessageText mocks base method.
func (m *MockClient) EditInlineMessageText(inlineMessageID string, replyMarkup tdlib.ReplyMarkup, inputMessageContent tdlib.InputMessageContent) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditInlineMessageText", inlineMessageID, replyMarkup, inputMessageContent)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditInlineMessageText indicates an expected call of EditInlineMessageText.
func (mr *MockClientMockRecorder) EditInlineMessageText(inlineMessageID, replyMarkup, inputMessageContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditInlineMessageText", reflect.TypeOf((*MockClient)(nil).EditInlineMessageText), inlineMessageID, replyMarkup, inputMessageContent)
}

// EditMessageCaption mocks base method.
func (m *MockClient) EditMessageCaption(chatID, messageID int64, replyMarkup tdlib.ReplyMarkup, caption *tdlib.FormattedText) (*tdlib.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditMessageCaption", chatID, messageID, replyMarkup, caption)
	ret0, _ := ret[0].(*tdlib.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditMessageCaption indicates an expected call of EditMessageCaption.
func (mr *MockClientMockRecorder) EditMessageCaption(chatID, messageID, replyMarkup, caption interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditMessageCaption", reflect.TypeOf((*MockClient)(nil).EditMessageCaption), chatID, messageID, replyMarkup, caption)
}

// EditMessageLiveLocation mocks base method.
func (m *MockClient) EditMessageLiveLocation(chatID, messageID int64, replyMarkup tdlib.ReplyMarkup, location *tdlib.Location, heading, proximityAlertRadius int32) (*tdlib.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditMessageLiveLocation", chatID, messageID, replyMarkup, location, heading, proximityAlertRadius)
	ret0, _ := ret[0].(*tdlib.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditMessageLiveLocation indicates an expected call of EditMessageLiveLocation.
func (mr *MockClientMockRecorder) EditMessageLiveLocation(chatID, messageID, replyMarkup, location, heading, proximityAlertRadius interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditMessageLiveLocation", reflect.TypeOf((*MockClient)(nil).EditMessageLiveLocation), chatID, messageID, replyMarkup, location, heading, proximityAlertRadius)
}

// EditMessageMedia mocks base method.
func (m *MockClient) EditMessageMedia(chatID, messageID int64, replyMarkup tdlib.ReplyMarkup, inputMessageContent tdlib.InputMessageContent) (*tdlib.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditMessageMedia", chatID, messageID, replyMarkup, inputMessageContent)
	ret0, _ := ret[0].(*tdlib.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditMessageMedia indicates an expected call of EditMessageMedia.
func (mr *MockClientMockRecorder) EditMessageMedia(chatID, messageID, replyMarkup, inputMessageContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditMessageMedia", reflect.TypeOf((*MockClient)(nil).EditMessageMedia), chatID, messageID, replyMarkup, inputMessageContent)
}

// EditMessageReplyMarkup mocks base method.
func (m *MockClient) EditMessageReplyMarkup(chatID, messageID int64, replyMarkup tdlib.ReplyMarkup) (*tdlib.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditMessageReplyMarkup", chatID, messageID, replyMarkup)
	ret0, _ := ret[0].(*tdlib.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditMessageReplyMarkup indicates an expected call of EditMessageReplyMarkup.
func (mr *MockClientMockRecorder) EditMessageReplyMarkup(chatID, messageID, replyMarkup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditMessageReplyMarkup", reflect.TypeOf((*MockClient)(nil).EditMessageReplyMarkup), chatID, messageID, replyMarkup)
}

// EditMessageSchedulingState mocks base method.
func (m *MockClient) EditMessageSchedulingState(chatID, messageID int64, schedulingState tdlib.MessageSchedulingState) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditMessageSchedulingState", chatID, messageID, schedulingState)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditMessageSchedulingState indicates an expected call of EditMessageSchedulingState.
func (mr *MockClientMockRecorder) EditMessageSchedulingState(chatID, messageID, schedulingState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditMessageSchedulingState", reflect.TypeOf((*MockClient)(nil).EditMessageSchedulingState), chatID, messageID, schedulingState)
}

// EditMessageText mocks base method.
func (m *MockClient) EditMessageText(chatID, messageID int64, replyMarkup tdlib.ReplyMarkup, inputMessageContent tdlib.InputMessageContent) (*tdlib.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditMessageText", chatID, messageID, replyMarkup, inputMessageContent)
	ret0, _ := ret[0].(*tdlib.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditMessageText indicates an expected call of EditMessageText.
func (mr *MockClientMockRecorder) EditMessageText(chatID, messageID, replyMarkup, inputMessageContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditMessageText", reflect.TypeOf((*MockClient)(nil).EditMessageText), chatID, messageID, replyMarkup, inputMessageContent)
}

// EditProxy mocks base method.
func (m *MockClient) EditProxy(proxyID int32, server string, port int32, enable bool, typeParam tdlib.ProxyType) (*tdlib.Proxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProxy", proxyID, server, port, enable, typeParam)
	ret0, _ := ret[0].(*tdlib.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditProxy indicates an expected call of EditProxy.
func (mr *MockClientMockRecorder) EditProxy(proxyID, server, port, enable, typeParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProxy", reflect.TypeOf((*MockClient)(nil).EditProxy), proxyID, server, port, enable, typeParam)
}

// EnableProxy mocks base method.
func (m *MockClient) EnableProxy(proxyID int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableProxy", proxyID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableProxy indicates an expected call of EnableProxy.
func (mr *MockClientMockRecorder) EnableProxy(proxyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableProxy", reflect.TypeOf((*MockClient)(nil).EnableProxy), proxyID)
}

// EndGroupCall mocks base method.
func (m *MockClient) EndGroupCall(groupCallID int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndGroupCall", groupCallID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndGroupCall indicates an expected call of EndGroupCall.
func (mr *MockClientMockRecorder) EndGroupCall(groupCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndGroupCall", reflect.TypeOf((*MockClient)(nil).EndGroupCall), groupCallID)
}

// EndGroupCallRecording mocks base method.
func (m *MockClient) EndGroupCallRecording(groupCallID int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndGroupCallRecording", groupCallID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndGroupCallRecording indicates an expected call of EndGroupCallRecording.
func (mr *MockClientMockRecorder) EndGroupCallRecording(groupCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndGroupCallRecording", reflect.TypeOf((*MockClient)(nil).EndGroupCallRecording), groupCallID)
}

// EndGroupCallScreenSharing mocks base method.
func (m *MockClient) EndGroupCallScreenSharing(groupCallID int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndGroupCallScreenSharing", groupCallID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndGroupCallScreenSharing indicates an expected call of EndGroupCallScreenSharing.
func (mr *MockClientMockRecorder) EndGroupCallScreenSharing(groupCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndGroupCallScreenSharing", reflect.TypeOf((*MockClient)(nil).EndGroupCallScreenSharing), groupCallID)
}

// FinishFileGeneration mocks base method.
func (m *MockClient) FinishFileGeneration(generationID *tdlib.JSONInt64, errParam *tdlib.Error) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishFileGeneration", generationID, errParam)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishFileGeneration indicates an expected call of FinishFileGeneration.
func (mr *MockClientMockRecorder) FinishFileGeneration(generationID, errParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishFileGeneration", reflect.TypeOf((*MockClient)(nil).FinishFileGeneration), generationID, errParam)
}

// ForwardMessages mocks base method.
func (m *MockClient) ForwardMessages(chatID, fromChatID int64, messageIDs []int64, options *tdlib.MessageSendOptions, sendCopy, removeCaption, onlyPreview bool) (*tdlib.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardMessages", chatID, fromChatID, messageIDs, options, sendCopy, removeCaption, onlyPreview)
	ret0, _ := ret[0].(*tdlib.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForwardMessages indicates an expected call of ForwardMessages.
func (mr *MockClientMockRecorder) ForwardMessages(chatID, fromChatID, messageIDs, options, sendCopy, removeCaption, onlyPreview interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardMessages", reflect.TypeOf((*MockClient)(nil).ForwardMessages), chatID, fromChatID, messageIDs, options, sendCopy, removeCaption, onlyPreview)
}

// GetAccountTTL mocks base method.
func (m *MockClient) GetAccountTTL() (*tdlib.AccountTTL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountTTL")
	ret0, _ := ret[0].(*tdlib.AccountTTL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTTL indicates an expected call of GetAccountTTL.
func (mr *MockClientMockRecorder) GetAccountTTL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTTL", reflect.TypeOf((*MockClient)(nil).GetAccountTTL))
}

// GetActiveLiveLocationMessages mocks base method.
func (m *MockClient) GetActiveLiveLocationMessages() (*tdlib.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveLiveLocationMessages")
	ret0, _ := ret[0].(*tdlib.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveLiveLocationMessages indicates an expected call of GetActiveLiveLocationMessages.
func (mr *MockClientMockRecorder) GetActiveLiveLocationMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveLiveLocationMessages", reflect.TypeOf((*MockClient)(nil).GetActiveLiveLocationMessages))
}

// GetActiveSessions mocks base method.
func (m *MockClient) GetActiveSessions() (*tdlib.Sessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveSessions")
	ret0, _ := ret[0].(*tdlib.Sessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveSessions indicates an expected call of GetActiveSessions.
func (mr *MockClientMockRecorder) GetActiveSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveSessions", reflect.TypeOf((*MockClient)(nil).GetActiveSessions))
}

// GetAllPassportElements mocks base method.
func (m *MockClient) GetAllPassportElements(password string) (*tdlib.PassportElements, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPassportElements", password)
	ret0, _ := ret[0].(*tdlib.PassportElements)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPassportElements indicates an expected call of GetAllPassportElements.
func (mr *MockClientMockRecorder) GetAllPassportElements(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPassportElements", reflect.TypeOf((*MockClient)(nil).GetAllPassportElements), password)
}

// GetAnimatedEmoji mocks base method.
func (m *MockClient) GetAnimatedEmoji(emoji string) (*tdlib.AnimatedEmoji, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimatedEmoji", emoji)
	ret0, _ := ret[0].(*tdlib.AnimatedEmoji)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimatedEmoji indicates an expected call of GetAnimatedEmoji.
func (mr *MockClientMockRecorder) GetAnimatedEmoji(emoji interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimatedEmoji", reflect.TypeOf((*MockClient)(nil).GetAnimatedEmoji), emoji)
}

// GetApplicationConfig mocks base method.
func (m *MockClient) GetApplicationConfig() (tdlib.JsonValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationConfig")
	ret0, _ := ret[0].(tdlib.JsonValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationConfig indicates an expected call of GetApplicationConfig.
func (mr *MockClientMockRecorder) GetApplicationConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationConfig", reflect.TypeOf((*MockClient)(nil).GetApplicationConfig))
}

// GetApplicationDownloadLink mocks base method.
func (m *MockClient) GetApplicationDownloadLink() (*tdlib.HttpURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationDownloadLink")
	ret0, _ := ret[0].(*tdlib.HttpURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationDownloadLink indicates an expected call of GetApplicationDownloadLink.
func (mr *MockClientMockRecorder) GetApplicationDownloadLink() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationDownloadLink", reflect.TypeOf((*MockClient)(nil).GetApplicationDownloadLink))
}

// GetArchivedStickerSets mocks base method.
func (m *MockClient) GetArchivedStickerSets(isMasks bool, offsetStickerSetID *tdlib.JSONInt64, limit int32) (*tdlib.StickerSets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchivedStickerSets", isMasks, offsetStickerSetID, limit)
	ret0, _ := ret[0].(*tdlib.StickerSets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchivedStickerSets indicates an expected call of GetArchivedStickerSets.
func (mr *MockClientMockRecorder) GetArchivedStickerSets(isMasks, offsetStickerSetID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchivedStickerSets", reflect.TypeOf((*MockClient)(nil).GetArchivedStickerSets), isMasks, offsetStickerSetID, limit)
}

// GetAttachedStickerSets mocks base method.
func (m *MockClient) GetAttachedStickerSets(fileID int32) (*tdlib.StickerSets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachedStickerSets", fileID)
	ret0, _ := ret[0].(*tdlib.StickerSets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttachedStickerSets indicates an expected call of GetAttachedStickerSets.
func (mr *MockClientMockRecorder) GetAttachedStickerSets(fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachedStickerSets", reflect.TypeOf((*MockClient)(nil).GetAttachedStickerSets), fileID)
}

// GetAuthorizationState mocks base method.
func (m *MockClient) GetAuthorizationState() (tdlib.AuthorizationState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationState")
	ret0, _ := ret[0].(tdlib.AuthorizationState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationState indicates an expected call of GetAuthorizationState.
func (mr *MockClientMockRecorder) GetAuthorizationState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationState", reflect.TypeOf((*MockClient)(nil).GetAuthorizationState))
}

// GetAutoDownloadSettingsPresets mocks base method.
func (m *MockClient) GetAutoDownloadSettingsPresets() (*tdlib.AutoDownloadSettingsPresets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoDownloadSettingsPresets")
	ret0, _ := ret[0].(*tdlib.AutoDownloadSettingsPresets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutoDownloadSettingsPresets indicates an expected call of GetAutoDownloadSettingsPresets.
func (mr *MockClientMockRecorder) GetAutoDownloadSettingsPresets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoDownloadSettingsPresets", reflect.TypeOf((*MockClient)(nil).GetAutoDownloadSettingsPresets))
}

// GetBackgroundURL mocks base method.
func (m *MockClient) GetBackgroundURL(name string, typeParam tdlib.BackgroundType) (*tdlib.HttpURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackgroundURL", name, typeParam)
	ret0, _ := ret[0].(*tdlib.HttpURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackgroundURL indicates an expected call of GetBackgroundURL.
func (mr *MockClientMockRecorder) GetBackgroundURL(name, typeParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackgroundURL", reflect.TypeOf((*MockClient)(nil).GetBackgroundURL), name, typeParam)
}

// GetBackgrounds mocks base method.
func (m *MockClient) GetBackgrounds(forDarkTheme bool) (*tdlib.Backgrounds, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackgrounds", forDarkTheme)
	ret0, _ := ret[0].(*tdlib.Backgrounds)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackgrounds indicates an expected call of GetBackgrounds.
func (mr *MockClientMockRecorder) GetBackgrounds(forDarkTheme interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackgrounds", reflect.TypeOf((*MockClient)(nil).GetBackgrounds), forDarkTheme)
}

// GetBankCardInfo mocks base method.
func (m *MockClient) GetBankCardInfo(bankCardNumber string) (*tdlib.BankCardInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankCardInfo", bankCardNumber)
	ret0, _ := ret[0].(*tdlib.BankCardInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankCardInfo indicates an expected call of GetBankCardInfo.
func (mr *MockClientMockRecorder) GetBankCardInfo(bankCardNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankCardInfo", reflect.TypeOf((*MockClient)(nil).GetBankCardInfo), bankCardNumber)
}

// GetBasicGroup mocks base method.
func (m *MockClient) GetBasicGroup(basicGroupID int64) (*tdlib.BasicGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBasicGroup", basicGroupID)
	ret0, _ := ret[0].(*tdlib.BasicGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasicGroup indicates an expected call of GetBasicGroup.
func (mr *MockClientMockRecorder) GetBasicGroup(basicGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasicGroup", reflect.TypeOf((*MockClient)(nil).GetBasicGroup), basicGroupID)
}

// GetBasicGroupFullInfo mocks base method.
func (m *MockClient) GetBasicGroupFullInfo(basicGroupID int64) (*tdlib.BasicGroupFullInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBasicGroupFullInfo", basicGroupID)
	ret0, _ := ret[0].(*tdlib.BasicGroupFullInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasicGroupFullInfo indicates an expected call of GetBasicGroupFullInfo.
func (mr *MockClientMockRecorder) GetBasicGroupFullInfo(basicGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasicGroupFullInfo", reflect.TypeOf((*MockClient)(nil).GetBasicGroupFullInfo), basicGroupID)
}

// GetBlockedMessageSenders mocks base method.
func (m *MockClient) GetBlockedMessageSenders(offset, limit int32) (*tdlib.MessageSenders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockedMessageSenders", offset, limit)
	ret0, _ := ret[0].(*tdlib.MessageSenders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockedMessageSenders indicates an expected call of GetBlockedMessageSenders.
func (mr *MockClientMockRecorder) GetBlockedMessageSenders(offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockedMessageSenders", reflect.TypeOf((*MockClient)(nil).GetBlockedMessageSenders), offset, limit)
}

// GetCallbackQueryAnswer mocks base method.
func (m *MockClient) GetCallbackQueryAnswer(chatID, messageID int64, payload tdlib.CallbackQueryPayload) (*tdlib.CallbackQueryAnswer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCallbackQueryAnswer", chatID, messageID, payload)
	ret0, _ := ret[0].(*tdlib.CallbackQueryAnswer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCallbackQueryAnswer indicates an expected call of GetCallbackQueryAnswer.
func (mr *MockClientMockRecorder) GetCallbackQueryAnswer(chatID, messageID, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallbackQueryAnswer", reflect.TypeOf((*MockClient)(nil).GetCallbackQueryAnswer), chatID, messageID, payload)
}

// GetCallbackQueryMessage mocks base method.
func (m *MockClient) GetCallbackQueryMessage(chatID, messageID int64, callbackQueryID *tdlib.JSONInt64) (*tdlib.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCallbackQueryMessage", chatID, messageID, callbackQueryID)
	ret0, _ := ret[0].(*tdlib.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCallbackQueryMessage indicates an expected call of GetCallbackQueryMessage.
func (mr *MockClientMockRecorder) GetCallbackQueryMessage(chatID, messageID, callbackQueryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallbackQueryMessage", reflect.TypeOf((*MockClient)(nil).GetCallbackQueryMessage), chatID, messageID, callbackQueryID)
}

// GetChat mocks base method.
func (m *MockClient) GetChat(chatID int64) (*tdlib.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChat", chatID)
	ret0, _ := ret[0].(*tdlib.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChat indicates an expected call of GetChat.
func (mr *MockClientMockRecorder) GetChat(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChat", reflect.TypeOf((*MockClient)(nil).GetChat), chatID)
}

// GetChatAdministrators mocks base method.
func (m *MockClient) GetChatAdministrators(chatID int64) (*tdlib.ChatAdministrators, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatAdministrators", chatID)
	ret0, _ := ret[0].(*tdlib.ChatAdministrators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatAdministrators indicates an expected call of GetChatAdministrators.
func (mr *MockClientMockRecorder) GetChatAdministrators(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatAdministrators", reflect.TypeOf((*MockClient)(nil).GetChatAdministrators), chatID)
}

// GetChatAvailableMessageSenders mocks base method.
func (m *MockClient) GetChatAvailableMessageSenders(chatID int64) (*tdlib.MessageSenders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatAvailableMessageSenders", chatID)
	ret0, _ := ret[0].(*tdlib.MessageSenders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatAvailableMessageSenders indicates an expected call of GetChatAvailableMessageSenders.
func (mr *MockClientMockRecorder) GetChatAvailableMessageSenders(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatAvailableMessageSenders", reflect.TypeOf((*MockClient)(nil).GetChatAvailableMessageSenders), chatID)
}

// GetChatEventLog mocks base method.
func (m *MockClient) GetChatEventLog(chatID int64, query string, fromEventID *tdlib.JSONInt64, limit int32, filters *tdlib.ChatEventLogFilters, userIDs []int64) (*tdlib.ChatEvents, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatEventLog", chatID, query, fromEventID, limit, filters, userIDs)
	ret0, _ := ret[0].(*tdlib.ChatEvents)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatEventLog indicates an expected call of GetChatEventLog.
func (mr *MockClientMockRecorder) GetChatEventLog(chatID, query, fromEventID, limit, filters, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatEventLog", reflect.TypeOf((*MockClient)(nil).GetChatEventLog), chatID, query, fromEventID, limit, filters, userIDs)
}

// GetChatFilter mocks base method.
func (m *MockClient) GetChatFilter(chatFilterID int32) (*tdlib.ChatFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatFilter", chatFilterID)
	ret0, _ := ret[0].(*tdlib.ChatFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatFilter indicates an expected call of GetChatFilter.
func (mr *MockClientMockRecorder) GetChatFilter(chatFilterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatFilter", reflect.TypeOf((*MockClient)(nil).GetChatFilter), chatFilterID)
}

// GetChatFilterDefaultIconName mocks base method.
func (m *MockClient) GetChatFilterDefaultIconName(filter *tdlib.ChatFilter) (*tdlib.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatFilterDefaultIconName", filter)
	ret0, _ := ret[0].(*tdlib.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatFilterDefaultIconName indicates an expected call of GetChatFilterDefaultIconName.
func (mr *MockClientMockRecorder) GetChatFilterDefaultIconName(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatFilterDefaultIconName", reflect.TypeOf((*MockClient)(nil).GetChatFilterDefaultIconName), filter)
}

// GetChatHistory mocks base method.
func (m *MockClient) GetChatHistory(chatID, fromMessageID int64, offset, limit int32, onlyLocal bool) (*tdlib.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatHistory", chatID, fromMessageID, offset, limit, onlyLocal)
	ret0, _ := ret[0].(*tdlib.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatHistory indicates an expected call of GetChatHistory.
func (mr *MockClientMockRecorder) GetChatHistory(chatID, fromMessageID, offset, limit, onlyLocal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatHistory", reflect.TypeOf((*MockClient)(nil).GetChatHistory), chatID, fromMessageID, offset, limit, onlyLocal)
}

// GetChatInviteLink mocks base method.
func (m *MockClient) GetChatInviteLink(chatID int64, inviteLink string) (*tdlib.ChatInviteLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatInviteLink", chatID, inviteLink)
	ret0, _ := ret[0].(*tdlib.ChatInviteLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatInviteLink indicates an expected call of GetChatInviteLink.
func (mr *MockClientMockRecorder) GetChatInviteLink(chatID, inviteLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatInviteLink", reflect.TypeOf((*MockClient)(nil).GetChatInviteLink), chatID, inviteLink)
}

// GetChatInviteLinkCounts mocks base method.
func (m *MockClient) GetChatInviteLinkCounts(chatID int64) (*tdlib.ChatInviteLinkCounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatInviteLinkCounts", chatID)
	ret0, _ := ret[0].(*tdlib.ChatInviteLinkCounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatInviteLinkCounts indicates an expected call of GetChatInviteLinkCounts.
func (mr *MockClientMockRecorder) GetChatInviteLinkCounts(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatInviteLinkCounts", reflect.TypeOf((*MockClient)(nil).GetChatInviteLinkCounts), chatID)
}

// GetChatInviteLinkMembers mocks base method.
func (m *MockClient) GetChatInviteLinkMembers(chatID int64, inviteLink string, offsetMember *tdlib.ChatInviteLinkMember, limit int32) (*tdlib.ChatInviteLinkMembers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatInviteLinkMembers", chatID, inviteLink, offsetMember, limit)
	ret0, _ := ret[0].(*tdlib.ChatInviteLinkMembers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatInviteLinkMembers indicates an expected call of GetChatInviteLinkMembers.
func (mr *MockClientMockRecorder) GetChatInviteLinkMembers(chatID, inviteLink, offsetMember, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatInviteLinkMembers", reflect.TypeOf((*MockClient)(nil).GetChatInviteLinkMembers), chatID, inviteLink, offsetMember, limit)
}

// GetChatInviteLinks mocks base method.
func (m *MockClient) GetChatInviteLinks(chatID, creatorUserID int64, isRevoked bool, offsetDate int32, offsetInviteLink string, limit int32) (*tdlib.ChatInviteLinks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatInviteLinks", chatID, creatorUserID, isRevoked, offsetDate, offsetInviteLink, limit)
	ret0, _ := ret[0].(*tdlib.ChatInviteLinks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatInviteLinks indicates an expected call of GetChatInviteLinks.
func (mr *MockClientMockRecorder) GetChatInviteLinks(chatID, creatorUserID, isRevoked, offsetDate, offsetInviteLink, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatInviteLinks", reflect.TypeOf((*MockClient)(nil).GetChatInviteLinks), chatID, creatorUserID, isRevoked, offsetDate, offsetInviteLink, limit)
}

// GetChatJoinRequests mocks base method.
func (m *MockClient) GetChatJoinRequests(chatID int64, inviteLink, query string, offsetRequest *tdlib.ChatJoinRequest, limit int32) (*tdlib.ChatJoinRequests, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatJoinRequests", chatID, inviteLink, query, offsetRequest, limit)
	ret0, _ := ret[0].(*tdlib.ChatJoinRequests)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatJoinRequests indicates an expected call of GetChatJoinRequests.
func (mr *MockClientMockRecorder) GetChatJoinRequests(chatID, inviteLink, query, offsetRequest, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatJoinRequests", reflect.TypeOf((*MockClient)(nil).GetChatJoinRequests), chatID, inviteLink, query, offsetRequest, limit)
}

// GetChatListsToAddChat mocks base method.
func (m *MockClient) GetChatListsToAddChat(chatID int64) (*tdlib.ChatLists, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatListsToAddChat", chatID)
	ret0, _ := ret[0].(*tdlib.ChatLists)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatListsToAddChat indicates an expected call of GetChatListsToAddChat.
func (mr *MockClientMockRecorder) GetChatListsToAddChat(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatListsToAddChat", reflect.TypeOf((*MockClient)(nil).GetChatListsToAddChat), chatID)
}

// GetChatMember mocks base method.
func (m *MockClient) GetChatMember(chatID int64, memberID tdlib.MessageSender) (*tdlib.ChatMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMember", chatID, memberID)
	ret0, _ := ret[0].(*tdlib.ChatMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMember indicates an expected call of GetChatMember.
func (mr *MockClientMockRecorder) GetChatMember(chatID, memberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMember", reflect.TypeOf((*MockClient)(nil).GetChatMember), chatID, memberID)
}

// GetChatMessageByDate mocks base method.
func (m *MockClient) GetChatMessageByDate(chatID int64, date int32) (*tdlib.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMessageByDate", chatID, date)
	ret0, _ := ret[0].(*tdlib.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMessageByDate indicates an expected call of GetChatMessageByDate.
func (mr *MockClientMockRecorder) GetChatMessageByDate(chatID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMessageByDate", reflect.TypeOf((*MockClient)(nil).GetChatMessageByDate), chatID, date)
}

// GetChatMessageCalendar mocks base method.
func (m *MockClient) GetChatMessageCalendar(chatID int64, filter tdlib.SearchMessagesFilter, fromMessageID int64) (*tdlib.MessageCalendar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMessageCalendar", chatID, filter, fromMessageID)
	ret0, _ := ret[0].(*tdlib.MessageCalendar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMessageCalendar indicates an expected call of GetChatMessageCalendar.
func (mr *MockClientMockRecorder) GetChatMessageCalendar(chatID, filter, fromMessageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMessageCalendar", reflect.TypeOf((*MockClient)(nil).GetChatMessageCalendar), chatID, filter, fromMessageID)
}

// GetChatMessageCount mocks base method.
func (m *MockClient) GetChatMessageCount(chatID int64, filter tdlib.SearchMessagesFilter, returnLocal bool) (*tdlib.Count, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMessageCount", chatID, filter, returnLocal)
	ret0, _ := ret[0].(*tdlib.Count)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMessageCount indicates an expected call of GetChatMessageCount.
func (mr *MockClientMockRecorder) GetChatMessageCount(chatID, filter, returnLocal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMessageCount", reflect.TypeOf((*MockClient)(nil).GetChatMessageCount), chatID, filter, returnLocal)
}

// GetChatNotificationSettingsExceptions mocks base method.
func (m *MockClient) GetChatNotificationSettingsExceptions(scope tdlib.NotificationSettingsScope, compareSound bool) (*tdlib.Chats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatNotificationSettingsExceptions", scope, compareSound)
	ret0, _ := ret[0].(*tdlib.Chats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatNotificationSettingsExceptions indicates an expected call of GetChatNotificationSettingsExceptions.
func (mr *MockClientMockRecorder) GetChatNotificationSettingsExceptions(scope, compareSound interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatNotificationSettingsExceptions", reflect.TypeOf((*MockClient)(nil).GetChatNotificationSettingsExceptions), scope, compareSound)
}

// GetChatPinnedMessage mocks base method.
func (m *MockClient) GetChatPinnedMessage(chatID int64) (*tdlib.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatPinnedMessage", chatID)
	ret0, _ := ret[0].(*tdlib.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatPinnedMessage indicates an expected call of GetChatPinnedMessage.
func (mr *MockClientMockRecorder) GetChatPinnedMessage(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatPinnedMessage", reflect.TypeOf((*MockClient)(nil).GetChatPinnedMessage), chatID)
}

// GetChatScheduledMessages mocks base method.
func (m *MockClient) GetChatScheduledMessages(chatID int64) (*tdlib.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatScheduledMessages", chatID)
	ret0, _ := ret[0].(*tdlib.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatScheduledMessages indicates an expected call of GetChatScheduledMessages.
func (mr *MockClientMockRecorder) GetChatScheduledMessages(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatScheduledMessages", reflect.TypeOf((*MockClient)(nil).GetChatScheduledMessages), chatID)
}

// GetChatSparseMessagePositions mocks base method.
func (m *MockClient) GetChatSparseMessagePositions(chatID int64, filter tdlib.SearchMessagesFilter, fromMessageID int64, limit int32) (*tdlib.MessagePositions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatSparseMessagePositions", chatID, filter, fromMessageID, limit)
	ret0, _ := ret[0].(*tdlib.MessagePositions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatSparseMessagePositions indicates an expected call of GetChatSparseMessagePositions.
func (mr *MockClientMockRecorder) GetChatSparseMessagePositions(chatID, filter, fromMessageID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatSparseMessagePositions", reflect.TypeOf((*MockClient)(nil).GetChatSparseMessagePositions), chatID, filter, fromMessageID, limit)
}

// GetChatSponsoredMessage mocks base method.
func (m *MockClient) GetChatSponsoredMessage(chatID int64) (*tdlib.SponsoredMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatSponsoredMessage", chatID)
	ret0, _ := ret[0].(*tdlib.SponsoredMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatSponsoredMessage indicates an expected call of GetChatSponsoredMessage.
func (mr *MockClientMockRecorder) GetChatSponsoredMessage(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatSponsoredMessage", reflect.TypeOf((*MockClient)(nil).GetChatSponsoredMessage), chatID)
}

// GetChatStatistics mocks base method.
func (m *MockClient) GetChatStatistics(chatID int64, isDark bool) (tdlib.ChatStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatStatistics", chatID, isDark)
	ret0, _ := ret[0].(tdlib.ChatStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatStatistics indicates an expected call of GetChatStatistics.
func (mr *MockClientMockRecorder) GetChatStatistics(chatID, isDark interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatStatistics", reflect.TypeOf((*MockClient)(nil).GetChatStatistics), chatID, isDark)
}

// GetChats mocks base method.
func (m *MockClient) GetChats(chatList tdlib.ChatList, limit int32) (*tdlib.Chats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChats", chatList, limit)
	ret0, _ := ret[0].(*tdlib.Chats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChats indicates an expected call of GetChats.
func (mr *MockClientMockRecorder) GetChats(chatList, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChats", reflect.TypeOf((*MockClient)(nil).GetChats), chatList, limit)
}

// GetCommands mocks base method.
func (m *MockClient) GetCommands(scope tdlib.BotCommandScope, languageCode string) (*tdlib.BotCommands, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommands", scope, languageCode)
	ret0, _ := ret[0].(*tdlib.BotCommands)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommands indicates an expected call of GetCommands.
func (mr *MockClientMockRecorder) GetCommands(scope, languageCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommands", reflect.TypeOf((*MockClient)(nil).GetCommands), scope, languageCode)
}

// GetConfig mocks base method.
func (m *MockClient) GetConfig() *tdlib.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(*tdlib.Config)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockClientMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockClient)(nil).GetConfig))
}

// GetConnectedWebsites mocks base method.
func (m *MockClient) GetConnectedWebsites() (*tdlib.ConnectedWebsites, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectedWebsites")
	ret0, _ := ret[0].(*tdlib.ConnectedWebsites)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectedWebsites indicates an expected call of GetConnectedWebsites.
func (mr *MockClientMockRecorder) GetConnectedWebsites() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectedWebsites", reflect.TypeOf((*MockClient)(nil).GetConnectedWebsites))
}

// GetContacts mocks base method.
func (m *MockClient) GetContacts() (*tdlib.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContacts")
	ret0, _ := ret[0].(*tdlib.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContacts indicates an expected call of GetContacts.
func (mr *MockClientMockRecorder) GetContacts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContacts", reflect.TypeOf((*MockClient)(nil).GetContacts))
}

// GetCountries mocks base method.
func (m *MockClient) GetCountries() (*tdlib.Countries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountries")
	ret0, _ := ret[0].(*tdlib.Countries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountries indicates an expected call of GetCountries.
func (mr *MockClientMockRecorder) GetCountries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountries", reflect.TypeOf((*MockClient)(nil).GetCountries))
}

// GetCountryCode mocks base method.
func (m *MockClient) GetCountryCode() (*tdlib.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountryCode")
	ret0, _ := ret[0].(*tdlib.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountryCode indicates an expected call of GetCountryCode.
func (mr *MockClientMockRecorder) GetCountryCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryCode", reflect.TypeOf((*MockClient)(nil).GetCountryCode))
}

// GetCreatedPublicChats mocks base method.
func (m *MockClient) GetCreatedPublicChats(typeParam tdlib.PublicChatType) (*tdlib.Chats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatedPublicChats", typeParam)
	ret0, _ := ret[0].(*tdlib.Chats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreatedPublicChats indicates an expected call of GetCreatedPublicChats.
func (mr *MockClientMockRecorder) GetCreatedPublicChats(typeParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatedPublicChats", reflect.TypeOf((*MockClient)(nil).GetCreatedPublicChats), typeParam)
}

// GetCurrentState mocks base method.
func (m *MockClient) GetCurrentState() (*tdlib.Updates, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentState")
	ret0, _ := ret[0].(*tdlib.Updates)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentState indicates an expected call of GetCurrentState.
func (mr *MockClientMockRecorder) GetCurrentState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentState", reflect.TypeOf((*MockClient)(nil).GetCurrentState))
}

// GetDatabaseStatistics mocks base method.
func (m *MockClient) GetDatabaseStatistics() (*tdlib.DatabaseStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseStatistics")
	ret0, _ := ret[0].(*tdlib.DatabaseStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabaseStatistics indicates an expected call of GetDatabaseStatistics.
func (mr *MockClientMockRecorder) GetDatabaseStatistics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseStatistics", reflect.TypeOf((*MockClient)(nil).GetDatabaseStatistics))
}

// GetDeepLinkInfo mocks base method.
func (m *MockClient) GetDeepLinkInfo(link string) (*tdlib.DeepLinkInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeepLinkInfo", link)
	ret0, _ := ret[0].(*tdlib.DeepLinkInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeepLinkInfo indicates an expected call of GetDeepLinkInfo.
func (mr *MockClientMockRecorder) GetDeepLinkInfo(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeepLinkInfo", reflect.TypeOf((*MockClient)(nil).GetDeepLinkInfo), link)
}

// GetEmojiSuggestionsURL mocks base method.
func (m *MockClient) GetEmojiSuggestionsURL(languageCode string) (*tdlib.HttpURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmojiSuggestionsURL", languageCode)
	ret0, _ := ret[0].(*tdlib.HttpURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmojiSuggestionsURL indicates an expected call of GetEmojiSuggestionsURL.
func (mr *MockClientMockRecorder) GetEmojiSuggestionsURL(languageCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmojiSuggestionsURL", reflect.TypeOf((*MockClient)(nil).GetEmojiSuggestionsURL), languageCode)
}

// GetExternalLink mocks base method.
func (m *MockClient) GetExternalLink(link string, allowWriteAccess bool) (*tdlib.HttpURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalLink", link, allowWriteAccess)
	ret0, _ := ret[0].(*tdlib.HttpURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalLink indicates an expected call of GetExternalLink.
func (mr *MockClientMockRecorder) GetExternalLink(link, allowWriteAccess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalLink", reflect.TypeOf((*MockClient)(nil).GetExternalLink), link, allowWriteAccess)
}

// GetExternalLinkInfo mocks base method.
func (m *MockClient) GetExternalLinkInfo(link string) (tdlib.LoginURLInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalLinkInfo", link)
	ret0, _ := ret[0].(tdlib.LoginURLInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalLinkInfo indicates an expected call of GetExternalLinkInfo.
func (mr *MockClientMockRecorder) GetExternalLinkInfo(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalLinkInfo", reflect.TypeOf((*MockClient)(nil).GetExternalLinkInfo), link)
}

// GetFavoriteStickers mocks base method.
func (m *MockClient) GetFavoriteStickers() (*tdlib.Stickers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteStickers")
	ret0, _ := ret[0].(*tdlib.Stickers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteStickers indicates an expected call of GetFavoriteStickers.
func (mr *MockClientMockRecorder) GetFavoriteStickers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteStickers", reflect.TypeOf((*MockClient)(nil).GetFavoriteStickers))
}

// GetFile mocks base method.
func (m *MockClient) GetFile(fileID int32) (*tdlib.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", fileID)
	ret0, _ := ret[0].(*tdlib.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockClientMockRecorder) GetFile(fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockClient)(nil).GetFile), fileID)
}

// GetFileDownloadedPrefixSize mocks base method.
func (m *MockClient) GetFileDownloadedPrefixSize(fileID, offset int32) (*tdlib.Count, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileDownloadedPrefixSize", fileID, offset)
	ret0, _ := ret[0].(*tdlib.Count)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileDownloadedPrefixSize indicates an expected call of GetFileDownloadedPrefixSize.
func (mr *MockClientMockRecorder) GetFileDownloadedPrefixSize(fileID, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileDownloadedPrefixSize", reflect.TypeOf((*MockClient)(nil).GetFileDownloadedPrefixSize), fileID, offset)
}

// GetFileExtension mocks base method.
func (m *MockClient) GetFileExtension(mimeType string) (*tdlib.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileExtension", mimeType)
	ret0, _ := ret[0].(*tdlib.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileExtension indicates an expected call of GetFileExtension.
func (mr *MockClientMockRecorder) GetFileExtension(mimeType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileExtension", reflect.TypeOf((*MockClient)(nil).GetFileExtension), mimeType)
}

// GetFileMimeType mocks base method.
func (m *MockClient) GetFileMimeType(fileName string) (*tdlib.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileMimeType", fileName)
	ret0, _ := ret[0].(*tdlib.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileMimeType indicates an expected call of GetFileMimeType.
func (mr *MockClientMockRecorder) GetFileMimeType(fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileMimeType", reflect.TypeOf((*MockClient)(nil).GetFileMimeType), fileName)
}

// GetGameHighScores mocks base method.
func (m *MockClient) GetGameHighScores(chatID, messageID, userID int64) (*tdlib.GameHighScores, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameHighScores", chatID, messageID, userID)
	ret0, _ := ret[0].(*tdlib.GameHighScores)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameHighScores indicates an expected call of GetGameHighScores.
func (mr *MockClientMockRecorder) GetGameHighScores(chatID, messageID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameHighScores", reflect.TypeOf((*MockClient)(nil).GetGameHighScores), chatID, messageID, userID)
}

// GetGroupCall mocks base method.
func (m *MockClient) GetGroupCall(groupCallID int32) (*tdlib.GroupCall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupCall", groupCallID)
	ret0, _ := ret[0].(*tdlib.GroupCall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupCall indicates an expected call of GetGroupCall.
func (mr *MockClientMockRecorder) GetGroupCall(groupCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupCall", reflect.TypeOf((*MockClient)(nil).GetGroupCall), groupCallID)
}

// GetGroupCallInviteLink mocks base method.
func (m *MockClient) GetGroupCallInviteLink(groupCallID int32, canSelfUnmute bool) (*tdlib.HttpURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupCallInviteLink", groupCallID, canSelfUnmute)
	ret0, _ := ret[0].(*tdlib.HttpURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupCallInviteLink indicates an expected call of GetGroupCallInviteLink.
func (mr *MockClientMockRecorder) GetGroupCallInviteLink(groupCallID, canSelfUnmute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupCallInviteLink", reflect.TypeOf((*MockClient)(nil).GetGroupCallInviteLink), groupCallID, canSelfUnmute)
}

// GetGroupCallStreamSegment mocks base method.
func (m *MockClient) GetGroupCallStreamSegment(groupCallID int32, timeOffset int64, scale, channelID int32, videoQuality tdlib.GroupCallVideoQuality) (*tdlib.FilePart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupCallStreamSegment", groupCallID, timeOffset, scale, channelID, videoQuality)
	ret0, _ := ret[0].(*tdlib.FilePart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupCallStreamSegment indicates an expected call of GetGroupCallStreamSegment.
func (mr *MockClientMockRecorder) GetGroupCallStreamSegment(groupCallID, timeOffset, scale, channelID, videoQuality interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupCallStreamSegment", reflect.TypeOf((*MockClient)(nil).GetGroupCallStreamSegment), groupCallID, timeOffset, scale, channelID, videoQuality)
}

// GetGroupsInCommon mocks base method.
func (m *MockClient) GetGroupsInCommon(userID, offsetChatID int64, limit int32) (*tdlib.Chats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsInCommon", userID, offsetChatID, limit)
	ret0, _ := ret[0].(*tdlib.Chats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsInCommon indicates an expected call of GetGroupsInCommon.
func (mr *MockClientMockRecorder) GetGroupsInCommon(userID, offsetChatID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsInCommon", reflect.TypeOf((*MockClient)(nil).GetGroupsInCommon), userID, offsetChatID, limit)
}

// GetImportedContactCount mocks base method.
func (m *MockClient) GetImportedContactCount() (*tdlib.Count, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImportedContactCount")
	ret0, _ := ret[0].(*tdlib.Count)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImportedContactCount indicates an expected call of GetImportedContactCount.
func (mr *MockClientMockRecorder) GetImportedContactCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImportedContactCount", reflect.TypeOf((*MockClient)(nil).GetImportedContactCount))
}

// GetInactiveSupergroupChats mocks base method.
func (m *MockClient) GetInactiveSupergroupChats() (*tdlib.Chats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInactiveSupergroupChats")
	ret0, _ := ret[0].(*tdlib.Chats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInactiveSupergroupChats indicates an expected call of GetInactiveSupergroupChats.
func (mr *MockClientMockRecorder) GetInactiveSupergroupChats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInactiveSupergroupChats", reflect.TypeOf((*MockClient)(nil).GetInactiveSupergroupChats))
}

// GetInlineGameHighScores mocks base method.
func (m *MockClient) GetInlineGameHighScores(inlineMessageID string, userID int64) (*tdlib.GameHighScores, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInlineGameHighScores", inlineMessageID, userID)
	ret0, _ := ret[0].(*tdlib.GameHighScores)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInlineGameHighScores indicates an expected call of GetInlineGameHighScores.
func (mr *MockClientMockRecorder) GetInlineGameHighScores(inlineMessageID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInlineGameHighScores", reflect.TypeOf((*MockClient)(nil).GetInlineGameHighScores), inlineMessageID, userID)
}

// GetInlineQueryResults mocks base method.
func (m *MockClient) GetInlineQueryResults(botUserID, chatID int64, userLocation *tdlib.Location, query, offset string) (*tdlib.InlineQueryResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInlineQueryResults", botUserID, chatID, userLocation, query, offset)
	ret0, _ := ret[0].(*tdlib.InlineQueryResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInlineQueryResults indicates an expected call of GetInlineQueryResults.
func (mr *MockClientMockRecorder) GetInlineQueryResults(botUserID, chatID, userLocation, query, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInlineQueryResults", reflect.TypeOf((*MockClient)(nil).GetInlineQueryResults), botUserID, chatID, userLocation, query, offset)
}

// GetInstalledStickerSets mocks base method.
func (m *MockClient) GetInstalledStickerSets(isMasks bool) (*tdlib.StickerSets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstalledStickerSets", isMasks)
	ret0, _ := ret[0].(*tdlib.StickerSets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstalledStickerSets indicates an expected call of GetInstalledStickerSets.
func (mr *MockClientMockRecorder) GetInstalledStickerSets(isMasks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstalledStickerSets", reflect.TypeOf((*MockClient)(nil).GetInstalledStickerSets), isMasks)
}

// GetInternalLinkType mocks base method.
func (m *MockClient) GetInternalLinkType(link string) (tdlib.InternalLinkType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInternalLinkType", link)
	ret0, _ := ret[0].(tdlib.InternalLinkType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInternalLinkType indicates an expected call of GetInternalLinkType.
func (mr *MockClientMockRecorder) GetInternalLinkType(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInternalLinkType", reflect.TypeOf((*MockClient)(nil).GetInternalLinkType), link)
}

// GetJsonString mocks base method.
func (m *MockClient) GetJsonString(jsonStringValue tdlib.JsonValue) (*tdlib.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJsonString", jsonStringValue)
	ret0, _ := ret[0].(*tdlib.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJsonString indicates an expected call of GetJsonString.
func (mr *MockClientMockRecorder) GetJsonString(jsonStringValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJsonString", reflect.TypeOf((*MockClient)(nil).GetJsonString), jsonStringValue)
}

// GetJsonValue mocks base method.
func (m *MockClient) GetJsonValue(jsonString string) (tdlib.JsonValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJsonValue", jsonString)
	ret0, _ := ret[0].(tdlib.JsonValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJsonValue indicates an expected call of GetJsonValue.
func (mr *MockClientMockRecorder) GetJsonValue(jsonString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJsonValue", reflect.TypeOf((*MockClient)(nil).GetJsonValue), jsonString)
}

// GetLanguagePackInfo mocks base method.
func (m *MockClient) GetLanguagePackInfo(languagePackID string) (*tdlib.LanguagePackInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguagePackInfo", languagePackID)
	ret0, _ := ret[0].(*tdlib.LanguagePackInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguagePackInfo indicates an expected call of GetLanguagePackInfo.
func (mr *MockClientMockRecorder) GetLanguagePackInfo(languagePackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguagePackInfo", reflect.TypeOf((*MockClient)(nil).GetLanguagePackInfo), languagePackID)
}

// GetLanguagePackString mocks base method.
func (m *MockClient) GetLanguagePackString(languagePackDatabasePath, localizationTarget, languagePackID, key string) (tdlib.LanguagePackStringValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguagePackString", languagePackDatabasePath, localizationTarget, languagePackID, key)
	ret0, _ := ret[0].(tdlib.LanguagePackStringValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguagePackString indicates an expected call of GetLanguagePackString.
func (mr *MockClientMockRecorder) GetLanguagePackString(languagePackDatabasePath, localizationTarget, languagePackID, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguagePackString", reflect.TypeOf((*MockClient)(nil).GetLanguagePackString), languagePackDatabasePath, localizationTarget, languagePackID, key)
}

// GetLanguagePackStrings mocks base method.
func (m *MockClient) GetLanguagePackStrings(languagePackID string, keys []string) (*tdlib.LanguagePackStrings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguagePackStrings", languagePackID, keys)
	ret0, _ := ret[0].(*tdlib.LanguagePackStrings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguagePackStrings indicates an expected call of GetLanguagePackStrings.
func (mr *MockClientMockRecorder) GetLanguagePackStrings(languagePackID, keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguagePackStrings", reflect.TypeOf((*MockClient)(nil).GetLanguagePackStrings), languagePackID, keys)
}

// GetLocalizationTargetInfo mocks base method.
func (m *MockClient) GetLocalizationTargetInfo(onlyLocal bool) (*tdlib.LocalizationTargetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalizationTargetInfo", onlyLocal)
	ret0, _ := ret[0].(*tdlib.LocalizationTargetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalizationTargetInfo indicates an expected call of GetLocalizationTargetInfo.
func (mr *MockClientMockRecorder) GetLocalizationTargetInfo(onlyLocal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalizationTargetInfo", reflect.TypeOf((*MockClient)(nil).GetLocalizationTargetInfo), onlyLocal)
}

// GetLogStream mocks base method.
func (m *MockClient) GetLogStream() (tdlib.LogStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogStream")
	ret0, _ := ret[0].(tdlib.LogStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogStream indicates an expected call of GetLogStream.
func (mr *MockClientMockRecorder) GetLogStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogStream", reflect.TypeOf((*MockClient)(nil).GetLogStream))
}

// GetLogTagVerbosityLevel mocks base method.
func (m *MockClient) GetLogTagVerbosityLevel(tag string) (*tdlib.LogVerbosityLevel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogTagVerbosityLevel", tag)
	ret0, _ := ret[0].(*tdlib.LogVerbosityLevel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogTagVerbosityLevel indicates an expected call of GetLogTagVerbosityLevel.
func (mr *MockClientMockRecorder) GetLogTagVerbosityLevel(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogTagVerbosityLevel", reflect.TypeOf((*MockClient)(nil).GetLogTagVerbosityLevel), tag)
}

// GetLogTags mocks base method.
func (m *MockClient) GetLogTags() (*tdlib.LogTags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogTags")
	ret0, _ := ret[0].(*tdlib.LogTags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogTags indicates an expected call of GetLogTags.
func (mr *MockClientMockRecorder) GetLogTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogTags", reflect.TypeOf((*MockClient)(nil).GetLogTags))
}

// GetLogVerbosityLevel mocks base method.
func (m *MockClient) GetLogVerbosityLevel() (*tdlib.LogVerbosityLevel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogVerbosityLevel")
	ret0, _ := ret[0].(*tdlib.LogVerbosityLevel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogVerbosityLevel indicates an expected call of GetLogVerbosityLevel.
func (mr *MockClientMockRecorder) GetLogVerbosityLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogVerbosityLevel", reflect.TypeOf((*MockClient)(nil).GetLogVerbosityLevel))
}

// GetLoginURL mocks base method.
func (m *MockClient) GetLoginURL(chatID, messageID, buttonID int64, allowWriteAccess bool) (*tdlib.HttpURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginURL", chatID, messageID, buttonID, allowWriteAccess)
	ret0, _ := ret[0].(*tdlib.HttpURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginURL indicates an expected call of GetLoginURL.
func (mr *MockClientMockRecorder) GetLoginURL(chatID, messageID, buttonID, allowWriteAccess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginURL", reflect.TypeOf((*MockClient)(nil).GetLoginURL), chatID, messageID, buttonID, allowWriteAccess)
}

// GetLoginURLInfo mocks base method.
func (m *MockClient) GetLoginURLInfo(chatID, messageID, buttonID int64) (tdlib.LoginURLInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginURLInfo", chatID, messageID, buttonID)
	ret0, _ := ret[0].(tdlib.LoginURLInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginURLInfo indicates an expected call of GetLoginURLInfo.
func (mr *MockClientMockRecorder) GetLoginURLInfo(chatID, messageID, buttonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginURLInfo", reflect.TypeOf((*MockClient)(nil).GetLoginURLInfo), chatID, messageID, buttonID)
}

// GetMapThumbnailFile mocks base method.
func (m *MockClient) GetMapThumbnailFile(location *tdlib.Location, zoom, width, height, scale int32, chatID int64) (*tdlib.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapThumbnailFile", location, zoom, width, height, scale, chatID)
	ret0, _ := ret[0].(*tdlib.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapThumbnailFile indicates an expected call of GetMapThumbnailFile.
func (mr *MockClientMockRecorder) GetMapThumbnailFile(location, zoom, width, height, scale, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapThumbnailFile", reflect.TypeOf((*MockClient)(nil).GetMapThumbnailFile), location, zoom, width, height, scale, chatID)
}

// GetMarkdownText mocks base method.
func (m *MockClient) GetMarkdownText(text *tdlib.FormattedText) (*tdlib.FormattedText, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarkdownText", text)
	ret0, _ := ret[0].(*tdlib.FormattedText)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarkdownText indicates an expected call of GetMarkdownText.
func (mr *MockClientMockRecorder) GetMarkdownText(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarkdownText", reflect.TypeOf((*MockClient)(nil).GetMarkdownText), text)
}

// GetMe mocks base method.
func (m *MockClient) GetMe() (*tdlib.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMe")
	ret0, _ := ret[0].(*tdlib.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMe indicates an expected call of GetMe.
func (mr *MockClientMockRecorder) GetMe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMe", reflect.TypeOf((*MockClient)(nil).GetMe))
}

// GetMessage mocks base method.
func (m *MockClient) GetMessage(chatID, messageID int64) (*tdlib.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", chatID, messageID)
	ret0, _ := ret[0].(*tdlib.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockClientMockRecorder) GetMessage(chatID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockClient)(nil).GetMessage), chatID, messageID)
}

// GetMessageEmbeddingCode mocks base method.
func (m *MockClient) GetMessageEmbeddingCode(chatID, messageID int64, forAlbum bool) (*tdlib.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageEmbeddingCode", chatID, messageID, forAlbum)
	ret0, _ := ret[0].(*tdlib.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageEmbeddingCode indicates an expected call of GetMessageEmbeddingCode.
func (mr *MockClientMockRecorder) GetMessageEmbeddingCode(chatID, messageID, forAlbum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageEmbeddingCode", reflect.TypeOf((*MockClient)(nil).GetMessageEmbeddingCode), chatID, messageID, forAlbum)
}

// GetMessageFileType mocks base method.
func (m *MockClient) GetMessageFileType(messageFileHead string) (tdlib.MessageFileType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageFileType", messageFileHead)
	ret0, _ := ret[0].(tdlib.MessageFileType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageFileType indicates an expected call of GetMessageFileType.
func (mr *MockClientMockRecorder) GetMessageFileType(messageFileHead interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageFileType", reflect.TypeOf((*MockClient)(nil).GetMessageFileType), messageFileHead)
}

// GetMessageImportConfirmationText mocks base method.
func (m *MockClient) GetMessageImportConfirmationText(chatID int64) (*tdlib.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageImportConfirmationText", chatID)
	ret0, _ := ret[0].(*tdlib.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageImportConfirmationText indicates an expected call of GetMessageImportConfirmationText.
func (mr *MockClientMockRecorder) GetMessageImportConfirmationText(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageImportConfirmationText", reflect.TypeOf((*MockClient)(nil).GetMessageImportConfirmationText), chatID)
}

// GetMessageLink mocks base method.
func (m *MockClient) GetMessageLink(chatID, messageID int64, mediaTimestamp int32, forAlbum, forComment bool) (*tdlib.MessageLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageLink", chatID, messageID, mediaTimestamp, forAlbum, forComment)
	ret0, _ := ret[0].(*tdlib.MessageLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageLink indicates an expected call of GetMessageLink.
func (mr *MockClientMockRecorder) GetMessageLink(chatID, messageID, mediaTimestamp, forAlbum, forComment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageLink", reflect.TypeOf((*MockClient)(nil).GetMessageLink), chatID, messageID, mediaTimestamp, forAlbum, forComment)
}

// GetMessageLinkInfo mocks base method.
func (m *MockClient) GetMessageLinkInfo(uRL string) (*tdlib.MessageLinkInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageLinkInfo", uRL)
	ret0, _ := ret[0].(*tdlib.MessageLinkInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageLinkInfo indicates an expected call of GetMessageLinkInfo.
func (mr *MockClientMockRecorder) GetMessageLinkInfo(uRL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageLinkInfo", reflect.TypeOf((*MockClient)(nil).GetMessageLinkInfo), uRL)
}

// GetMessageLocally mocks base method.
func (m *MockClient) GetMessageLocally(chatID, messageID int64) (*tdlib.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageLocally", chatID, messageID)
	ret0, _ := ret[0].(*tdlib.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageLocally indicates an expected call of GetMessageLocally.
func (mr *MockClientMockRecorder) GetMessageLocally(chatID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageLocally", reflect.TypeOf((*MockClient)(nil).GetMessageLocally), chatID, messageID)
}

// GetMessagePublicForwards mocks base method.
func (m *MockClient) GetMessagePublicForwards(chatID, messageID int64, offset string, limit int32) (*tdlib.FoundMessages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagePublicForwards", chatID, messageID, offset, limit)
	ret0, _ := ret[0].(*tdlib.FoundMessages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagePublicForwards indicates an expected call of GetMessagePublicForwards.
func (mr *MockClientMockRecorder) GetMessagePublicForwards(chatID, messageID, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagePublicForwards", reflect.TypeOf((*MockClient)(nil).GetMessagePublicForwards), chatID, messageID, offset, limit)
}

// GetMessageStatistics mocks base method.
func (m *MockClient) GetMessageStatistics(chatID, messageID int64, isDark bool) (*tdlib.MessageStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageStatistics", chatID, messageID, isDark)
	ret0, _ := ret[0].(*tdlib.MessageStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageStatistics indicates an expected call of GetMessageStatistics.
func (mr *MockClientMockRecorder) GetMessageStatistics(chatID, messageID, isDark interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageStatistics", reflect.TypeOf((*MockClient)(nil).GetMessageStatistics), chatID, messageID, isDark)
}

// GetMessageThread mocks base method.
func (m *MockClient) GetMessageThread(chatID, messageID int64) (*tdlib.MessageThreadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageThread", chatID, messageID)
	ret0, _ := ret[0].(*tdlib.MessageThreadInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageThread indicates an expected call of GetMessageThread.
func (mr *MockClientMockRecorder) GetMessageThread(chatID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageThread", reflect.TypeOf((*MockClient)(nil).GetMessageThread), chatID, messageID)
}

// GetMessageThreadHistory mocks base method.
func (m *MockClient) GetMessageThreadHistory(chatID, messageID, fromMessageID int64, offset, limit int32) (*tdlib.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageThreadHistory", chatID, messageID, fromMessageID, offset, limit)
	ret0, _ := ret[0].(*tdlib.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageThreadHistory indicates an expected call of GetMessageThreadHistory.
func (mr *MockClientMockRecorder) GetMessageThreadHistory(chatID, messageID, fromMessageID, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageThreadHistory", reflect.TypeOf((*MockClient)(nil).GetMessageThreadHistory), chatID, messageID, fromMessageID, offset, limit)
}

// GetMessageViewers mocks base method.
func (m *MockClient) GetMessageViewers(chatID, messageID int64) (*tdlib.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageViewers", chatID, messageID)
	ret0, _ := ret[0].(*tdlib.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageViewers indicates an expected call of GetMessageViewers.
func (mr *MockClientMockRecorder) GetMessageViewers(chatID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageViewers", reflect.TypeOf((*MockClient)(nil).GetMessageViewers), chatID, messageID)
}

// GetMessages mocks base method.
func (m *MockClient) GetMessages(chatID int64, messageIDs []int64) (*tdlib.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", chatID, messageIDs)
	ret0, _ := ret[0].(*tdlib.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockClientMockRecorder) GetMessages(chatID, messageIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockClient)(nil).GetMessages), chatID, messageIDs)
}

// GetNetworkStatistics mocks base method.
func (m *MockClient) GetNetworkStatistics(onlyCurrent bool) (*tdlib.NetworkStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkStatistics", onlyCurrent)
	ret0, _ := ret[0].(*tdlib.NetworkStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkStatistics indicates an expected call of GetNetworkStatistics.
func (mr *MockClientMockRecorder) GetNetworkStatistics(onlyCurrent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkStatistics", reflect.TypeOf((*MockClient)(nil).GetNetworkStatistics), onlyCurrent)
}

// GetOption mocks base method.
func (m *MockClient) GetOption(name string) (tdlib.OptionValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOption", name)
	ret0, _ := ret[0].(tdlib.OptionValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOption indicates an expected call of GetOption.
func (mr *MockClientMockRecorder) GetOption(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOption", reflect.TypeOf((*MockClient)(nil).GetOption), name)
}

// GetPassportAuthorizationForm mocks base method.
func (m *MockClient) GetPassportAuthorizationForm(botUserID int64, scope, publicKey, nonce string) (*tdlib.PassportAuthorizationForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassportAuthorizationForm", botUserID, scope, publicKey, nonce)
	ret0, _ := ret[0].(*tdlib.PassportAuthorizationForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassportAuthorizationForm indicates an expected call of GetPassportAuthorizationForm.
func (mr *MockClientMockRecorder) GetPassportAuthorizationForm(botUserID, scope, publicKey, nonce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassportAuthorizationForm", reflect.TypeOf((*MockClient)(nil).GetPassportAuthorizationForm), botUserID, scope, publicKey, nonce)
}

// GetPassportAuthorizationFormAvailableElements mocks base method.
func (m *MockClient) GetPassportAuthorizationFormAvailableElements(autorizationFormID int32, password string) (*tdlib.PassportElementsWithErrors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassportAuthorizationFormAvailableElements", autorizationFormID, password)
	ret0, _ := ret[0].(*tdlib.PassportElementsWithErrors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassportAuthorizationFormAvailableElements indicates an expected call of GetPassportAuthorizationFormAvailableElements.
func (mr *MockClientMockRecorder) GetPassportAuthorizationFormAvailableElements(autorizationFormID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassportAuthorizationFormAvailableElements", reflect.TypeOf((*MockClient)(nil).GetPassportAuthorizationFormAvailableElements), autorizationFormID, password)
}

// GetPassportElement mocks base method.
func (m *MockClient) GetPassportElement(typeParam tdlib.PassportElementType, password string) (tdlib.PassportElement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassportElement", typeParam, password)
	ret0, _ := ret[0].(tdlib.PassportElement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassportElement indicates an expected call of GetPassportElement.
func (mr *MockClientMockRecorder) GetPassportElement(typeParam, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassportElement", reflect.TypeOf((*MockClient)(nil).GetPassportElement), typeParam, password)
}

// GetPasswordState mocks base method.
func (m *MockClient) GetPasswordState() (*tdlib.PasswordState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordState")
	ret0, _ := ret[0].(*tdlib.PasswordState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordState indicates an expected call of GetPasswordState.
func (mr *MockClientMockRecorder) GetPasswordState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordState", reflect.TypeOf((*MockClient)(nil).GetPasswordState))
}

// GetPaymentForm mocks base method.
func (m *MockClient) GetPaymentForm(chatID, messageID int64, theme *tdlib.PaymentFormTheme) (*tdlib.PaymentForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentForm", chatID, messageID, theme)
	ret0, _ := ret[0].(*tdlib.PaymentForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentForm indicates an expected call of GetPaymentForm.
func (mr *MockClientMockRecorder) GetPaymentForm(chatID, messageID, theme interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentForm", reflect.TypeOf((*MockClient)(nil).GetPaymentForm), chatID, messageID, theme)
}

// GetPaymentReceipt mocks base method.
func (m *MockClient) GetPaymentReceipt(chatID, messageID int64) (*tdlib.PaymentReceipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentReceipt", chatID, messageID)
	ret0, _ := ret[0].(*tdlib.PaymentReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentReceipt indicates an expected call of GetPaymentReceipt.
func (mr *MockClientMockRecorder) GetPaymentReceipt(chatID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentReceipt", reflect.TypeOf((*MockClient)(nil).GetPaymentReceipt), chatID, messageID)
}

// GetPhoneNumberInfo mocks base method.
func (m *MockClient) GetPhoneNumberInfo(phoneNumberPrefix string) (*tdlib.PhoneNumberInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhoneNumberInfo", phoneNumberPrefix)
	ret0, _ := ret[0].(*tdlib.PhoneNumberInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhoneNumberInfo indicates an expected call of GetPhoneNumberInfo.
func (mr *MockClientMockRecorder) GetPhoneNumberInfo(phoneNumberPrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhoneNumberInfo", reflect.TypeOf((*MockClient)(nil).GetPhoneNumberInfo), phoneNumberPrefix)
}

// GetPhoneNumberInfoSync mocks base method.
func (m *MockClient) GetPhoneNumberInfoSync(languageCode, phoneNumberPrefix string) (*tdlib.PhoneNumberInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhoneNumberInfoSync", languageCode, phoneNumberPrefix)
	ret0, _ := ret[0].(*tdlib.PhoneNumberInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhoneNumberInfoSync indicates an expected call of GetPhoneNumberInfoSync.
func (mr *MockClientMockRecorder) GetPhoneNumberInfoSync(languageCode, phoneNumberPrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhoneNumberInfoSync", reflect.TypeOf((*MockClient)(nil).GetPhoneNumberInfoSync), languageCode, phoneNumberPrefix)
}

// GetPollVoters mocks base method.
func (m *MockClient) GetPollVoters(chatID, messageID int64, optionID, offset, limit int32) (*tdlib.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollVoters", chatID, messageID, optionID, offset, limit)
	ret0, _ := ret[0].(*tdlib.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollVoters indicates an expected call of GetPollVoters.
func (mr *MockClientMockRecorder) GetPollVoters(chatID, messageID, optionID, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollVoters", reflect.TypeOf((*MockClient)(nil).GetPollVoters), chatID, messageID, optionID, offset, limit)
}

// GetPreferredCountryLanguage mocks base method.
func (m *MockClient) GetPreferredCountryLanguage(countryCode string) (*tdlib.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreferredCountryLanguage", countryCode)
	ret0, _ := ret[0].(*tdlib.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreferredCountryLanguage indicates an expected call of GetPreferredCountryLanguage.
func (mr *MockClientMockRecorder) GetPreferredCountryLanguage(countryCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreferredCountryLanguage", reflect.TypeOf((*MockClient)(nil).GetPreferredCountryLanguage), countryCode)
}

// GetProxies mocks base method.
func (m *MockClient) GetProxies() (*tdlib.Proxies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProxies")
	ret0, _ := ret[0].(*tdlib.Proxies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProxies indicates an expected call of GetProxies.
func (mr *MockClientMockRecorder) GetProxies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProxies", reflect.TypeOf((*MockClient)(nil).GetProxies))
}

// GetProxyLink mocks base method.
func (m *MockClient) GetProxyLink(proxyID int32) (*tdlib.HttpURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProxyLink", proxyID)
	ret0, _ := ret[0].(*tdlib.HttpURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProxyLink indicates an expected call of GetProxyLink.
func (mr *MockClientMockRecorder) GetProxyLink(proxyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProxyLink", reflect.TypeOf((*MockClient)(nil).GetProxyLink), proxyID)
}

// GetPushReceiverID mocks base method.
func (m *MockClient) GetPushReceiverID(payload string) (*tdlib.PushReceiverID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushReceiverID", payload)
	ret0, _ := ret[0].(*tdlib.PushReceiverID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPushReceiverID indicates an expected call of GetPushReceiverID.
func (mr *MockClientMockRecorder) GetPushReceiverID(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushReceiverID", reflect.TypeOf((*MockClient)(nil).GetPushReceiverID), payload)
}

// GetRawUpdatesChannel mocks base method.
func (m *MockClient) GetRawUpdatesChannel(capacity int) chan tdlib.UpdateMsg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawUpdatesChannel", capacity)
	ret0, _ := ret[0].(chan tdlib.UpdateMsg)
	return ret0
}

// GetRawUpdatesChannel indicates an expected call of GetRawUpdatesChannel.
func (mr *MockClientMockRecorder) GetRawUpdatesChannel(capacity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawUpdatesChannel", reflect.TypeOf((*MockClient)(nil).GetRawUpdatesChannel), capacity)
}

// GetRecentInlineBots mocks base method.
func (m *MockClient) GetRecentInlineBots() (*tdlib.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentInlineBots")
	ret0, _ := ret[0].(*tdlib.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentInlineBots indicates an expected call of GetRecentInlineBots.
func (mr *MockClientMockRecorder) GetRecentInlineBots() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentInlineBots", reflect.TypeOf((*MockClient)(nil).GetRecentInlineBots))
}

// GetRecentStickers mocks base method.
func (m *MockClient) GetRecentStickers(isAttached bool) (*tdlib.Stickers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentStickers", isAttached)
	ret0, _ := ret[0].(*tdlib.Stickers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentStickers indicates an expected call of GetRecentStickers.
func (mr *MockClientMockRecorder) GetRecentStickers(isAttached interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentStickers", reflect.TypeOf((*MockClient)(nil).GetRecentStickers), isAttached)
}

// GetRecentlyOpenedChats mocks base method.
func (m *MockClient) GetRecentlyOpenedChats(limit int32) (*tdlib.Chats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentlyOpenedChats", limit)
	ret0, _ := ret[0].(*tdlib.Chats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentlyOpenedChats indicates an expected call of GetRecentlyOpenedChats.
func (mr *MockClientMockRecorder) GetRecentlyOpenedChats(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentlyOpenedChats", reflect.TypeOf((*MockClient)(nil).GetRecentlyOpenedChats), limit)
}

// GetRecentlyVisitedTMeURLs mocks base method.
func (m *MockClient) GetRecentlyVisitedTMeURLs(referrer string) (*tdlib.TMeURLs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentlyVisitedTMeURLs", referrer)
	ret0, _ := ret[0].(*tdlib.TMeURLs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentlyVisitedTMeURLs indicates an expected call of GetRecentlyVisitedTMeURLs.
func (mr *MockClientMockRecorder) GetRecentlyVisitedTMeURLs(referrer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentlyVisitedTMeURLs", reflect.TypeOf((*MockClient)(nil).GetRecentlyVisitedTMeURLs), referrer)
}

// GetRecommendedChatFilters mocks base method.
func (m *MockClient) GetRecommendedChatFilters() (*tdlib.RecommendedChatFilters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendedChatFilters")
	ret0, _ := ret[0].(*tdlib.RecommendedChatFilters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendedChatFilters indicates an expected call of GetRecommendedChatFilters.
func (mr *MockClientMockRecorder) GetRecommendedChatFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendedChatFilters", reflect.TypeOf((*MockClient)(nil).GetRecommendedChatFilters))
}

// GetRecoveryEmailAddress mocks base method.
func (m *MockClient) GetRecoveryEmailAddress(password string) (*tdlib.RecoveryEmailAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecoveryEmailAddress", password)
	ret0, _ := ret[0].(*tdlib.RecoveryEmailAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecoveryEmailAddress indicates an expected call of GetRecoveryEmailAddress.
func (mr *MockClientMockRecorder) GetRecoveryEmailAddress(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryEmailAddress", reflect.TypeOf((*MockClient)(nil).GetRecoveryEmailAddress), password)
}

// GetRemoteFile mocks base method.
func (m *MockClient) GetRemoteFile(remoteFileID string, fileType tdlib.FileType) (*tdlib.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteFile", remoteFileID, fileType)
	ret0, _ := ret[0].(*tdlib.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteFile indicates an expected call of GetRemoteFile.
func (mr *MockClientMockRecorder) GetRemoteFile(remoteFileID, fileType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteFile", reflect.TypeOf((*MockClient)(nil).GetRemoteFile), remoteFileID, fileType)
}

// GetRepliedMessage mocks base method.
func (m *MockClient) GetRepliedMessage(chatID, messageID int64) (*tdlib.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepliedMessage", chatID, messageID)
	ret0, _ := ret[0].(*tdlib.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepliedMessage indicates an expected call of GetRepliedMessage.
func (mr *MockClientMockRecorder) GetRepliedMessage(chatID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepliedMessage", reflect.TypeOf((*MockClient)(nil).GetRepliedMessage), chatID, messageID)
}

// GetSavedAnimations mocks base method.
func (m *MockClient) GetSavedAnimations() (*tdlib.Animations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavedAnimations")
	ret0, _ := ret[0].(*tdlib.Animations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavedAnimations indicates an expected call of GetSavedAnimations.
func (mr *MockClientMockRecorder) GetSavedAnimations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavedAnimations", reflect.TypeOf((*MockClient)(nil).GetSavedAnimations))
}

// GetSavedOrderInfo mocks base method.
func (m *MockClient) GetSavedOrderInfo() (*tdlib.OrderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavedOrderInfo")
	ret0, _ := ret[0].(*tdlib.OrderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavedOrderInfo indicates an expected call of GetSavedOrderInfo.
func (mr *MockClientMockRecorder) GetSavedOrderInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavedOrderInfo", reflect.TypeOf((*MockClient)(nil).GetSavedOrderInfo))
}

// GetScopeNotificationSettings mocks base method.
func (m *MockClient) GetScopeNotificationSettings(scope tdlib.NotificationSettingsScope) (*tdlib.ScopeNotificationSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScopeNotificationSettings", scope)
	ret0, _ := ret[0].(*tdlib.ScopeNotificationSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScopeNotificationSettings indicates an expected call of GetScopeNotificationSettings.
func (mr *MockClientMockRecorder) GetScopeNotificationSettings(scope interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScopeNotificationSettings", reflect.TypeOf((*MockClient)(nil).GetScopeNotificationSettings), scope)
}

// GetSecretChat mocks base method.
func (m *MockClient) GetSecretChat(secretChatID int32) (*tdlib.SecretChat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretChat", secretChatID)
	ret0, _ := ret[0].(*tdlib.SecretChat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretChat indicates an expected call of GetSecretChat.
func (mr *MockClientMockRecorder) GetSecretChat(secretChatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretChat", reflect.TypeOf((*MockClient)(nil).GetSecretChat), secretChatID)
}

// GetStatisticalGraph mocks base method.
func (m *MockClient) GetStatisticalGraph(chatID int64, token string, x int64) (tdlib.StatisticalGraph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatisticalGraph", chatID, token, x)
	ret0, _ := ret[0].(tdlib.StatisticalGraph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatisticalGraph indicates an expected call of GetStatisticalGraph.
func (mr *MockClientMockRecorder) GetStatisticalGraph(chatID, token, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatisticalGraph", reflect.TypeOf((*MockClient)(nil).GetStatisticalGraph), chatID, token, x)
}

// GetStickerEmojis mocks base method.
func (m *MockClient) GetStickerEmojis(sticker tdlib.InputFile) (*tdlib.Emojis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStickerEmojis", sticker)
	ret0, _ := ret[0].(*tdlib.Emojis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStickerEmojis indicates an expected call of GetStickerEmojis.
func (mr *MockClientMockRecorder) GetStickerEmojis(sticker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStickerEmojis", reflect.TypeOf((*MockClient)(nil).GetStickerEmojis), sticker)
}

// GetStickerSet mocks base method.
func (m *MockClient) GetStickerSet(setID *tdlib.JSONInt64) (*tdlib.StickerSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStickerSet", setID)
	ret0, _ := ret[0].(*tdlib.StickerSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStickerSet indicates an expected call of GetStickerSet.
func (mr *MockClientMockRecorder) GetStickerSet(setID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStickerSet", reflect.TypeOf((*MockClient)(nil).GetStickerSet), setID)
}

// GetStickers mocks base method.
func (m *MockClient) GetStickers(emoji string, limit int32) (*tdlib.Stickers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStickers", emoji, limit)
	ret0, _ := ret[0].(*tdlib.Stickers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStickers indicates an expected call of GetStickers.
func (mr *MockClientMockRecorder) GetStickers(emoji, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStickers", reflect.TypeOf((*MockClient)(nil).GetStickers), emoji, limit)
}

// GetStorageStatistics mocks base method.
func (m *MockClient) GetStorageStatistics(chatLimit int32) (*tdlib.StorageStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageStatistics", chatLimit)
	ret0, _ := ret[0].(*tdlib.StorageStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageStatistics indicates an expected call of GetStorageStatistics.
func (mr *MockClientMockRecorder) GetStorageStatistics(chatLimit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageStatistics", reflect.TypeOf((*MockClient)(nil).GetStorageStatistics), chatLimit)
}

// GetStorageStatisticsFast mocks base method.
func (m *MockClient) GetStorageStatisticsFast() (*tdlib.StorageStatisticsFast, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageStatisticsFast")
	ret0, _ := ret[0].(*tdlib.StorageStatisticsFast)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageStatisticsFast indicates an expected call of GetStorageStatisticsFast.
func (mr *MockClientMockRecorder) GetStorageStatisticsFast() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageStatisticsFast", reflect.TypeOf((*MockClient)(nil).GetStorageStatisticsFast))
}

// GetSuggestedFileName mocks base method.
func (m *MockClient) GetSuggestedFileName(fileID int32, directory string) (*tdlib.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuggestedFileName", fileID, directory)
	ret0, _ := ret[0].(*tdlib.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuggestedFileName indicates an expected call of GetSuggestedFileName.
func (mr *MockClientMockRecorder) GetSuggestedFileName(fileID, directory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuggestedFileName", reflect.TypeOf((*MockClient)(nil).GetSuggestedFileName), fileID, directory)
}

// GetSuggestedStickerSetName mocks base method.
func (m *MockClient) GetSuggestedStickerSetName(title string) (*tdlib.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuggestedStickerSetName", title)
	ret0, _ := ret[0].(*tdlib.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuggestedStickerSetName indicates an expected call of GetSuggestedStickerSetName.
func (mr *MockClientMockRecorder) GetSuggestedStickerSetName(title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuggestedStickerSetName", reflect.TypeOf((*MockClient)(nil).GetSuggestedStickerSetName), title)
}

// GetSuitableDiscussionChats mocks base method.
func (m *MockClient) GetSuitableDiscussionChats() (*tdlib.Chats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuitableDiscussionChats")
	ret0, _ := ret[0].(*tdlib.Chats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuitableDiscussionChats indicates an expected call of GetSuitableDiscussionChats.
func (mr *MockClientMockRecorder) GetSuitableDiscussionChats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuitableDiscussionChats", reflect.TypeOf((*MockClient)(nil).GetSuitableDiscussionChats))
}

// GetSupergroup mocks base method.
func (m *MockClient) GetSupergroup(supergroupID int64) (*tdlib.Supergroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupergroup", supergroupID)
	ret0, _ := ret[0].(*tdlib.Supergroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupergroup indicates an expected call of GetSupergroup.
func (mr *MockClientMockRecorder) GetSupergroup(supergroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupergroup", reflect.TypeOf((*MockClient)(nil).GetSupergroup), supergroupID)
}

// GetSupergroupFullInfo mocks base method.
func (m *MockClient) GetSupergroupFullInfo(supergroupID int64) (*tdlib.SupergroupFullInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupergroupFullInfo", supergroupID)
	ret0, _ := ret[0].(*tdlib.SupergroupFullInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupergroupFullInfo indicates an expected call of GetSupergroupFullInfo.
func (mr *MockClientMockRecorder) GetSupergroupFullInfo(supergroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupergroupFullInfo", reflect.TypeOf((*MockClient)(nil).GetSupergroupFullInfo), supergroupID)
}

// GetSupergroupMembers mocks base method.
func (m *MockClient) GetSupergroupMembers(supergroupID int64, filter tdlib.SupergroupMembersFilter, offset, limit int32) (*tdlib.ChatMembers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupergroupMembers", supergroupID, filter, offset, limit)
	ret0, _ := ret[0].(*tdlib.ChatMembers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupergroupMembers indicates an expected call of GetSupergroupMembers.
func (mr *MockClientMockRecorder) GetSupergroupMembers(supergroupID, filter, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupergroupMembers", reflect.TypeOf((*MockClient)(nil).GetSupergroupMembers), supergroupID, filter, offset, limit)
}

// GetSupportUser mocks base method.
func (m *MockClient) GetSupportUser() (*tdlib.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportUser")
	ret0, _ := ret[0].(*tdlib.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportUser indicates an expected call of GetSupportUser.
func (mr *MockClientMockRecorder) GetSupportUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportUser", reflect.TypeOf((*MockClient)(nil).GetSupportUser))
}

// GetTemporaryPasswordState mocks base method.
func (m *MockClient) GetTemporaryPasswordState() (*tdlib.TemporaryPasswordState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemporaryPasswordState")
	ret0, _ := ret[0].(*tdlib.TemporaryPasswordState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemporaryPasswordState indicates an expected call of GetTemporaryPasswordState.
func (mr *MockClientMockRecorder) GetTemporaryPasswordState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemporaryPasswordState", reflect.TypeOf((*MockClient)(nil).GetTemporaryPasswordState))
}

// GetTextEntities mocks base method.
func (m *MockClient) GetTextEntities(text string) (*tdlib.TextEntities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextEntities", text)
	ret0, _ := ret[0].(*tdlib.TextEntities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextEntities indicates an expected call of GetTextEntities.
func (mr *MockClientMockRecorder) GetTextEntities(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextEntities", reflect.TypeOf((*MockClient)(nil).GetTextEntities), text)
}

// GetTopChats mocks base method.
func (m *MockClient) GetTopChats(category tdlib.TopChatCategory, limit int32) (*tdlib.Chats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopChats", category, limit)
	ret0, _ := ret[0].(*tdlib.Chats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopChats indicates an expected call of GetTopChats.
func (mr *MockClientMockRecorder) GetTopChats(category, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopChats", reflect.TypeOf((*MockClient)(nil).GetTopChats), category, limit)
}

// GetTrendingStickerSets mocks base method.
func (m *MockClient) GetTrendingStickerSets(offset, limit int32) (*tdlib.StickerSets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrendingStickerSets", offset, limit)
	ret0, _ := ret[0].(*tdlib.StickerSets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrendingStickerSets indicates an expected call of GetTrendingStickerSets.
func (mr *MockClientMockRecorder) GetTrendingStickerSets(offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrendingStickerSets", reflect.TypeOf((*MockClient)(nil).GetTrendingStickerSets), offset, limit)
}

// GetUser mocks base method.
func (m *MockClient) GetUser(userID int64) (*tdlib.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userID)
	ret0, _ := ret[0].(*tdlib.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockClientMockRecorder) GetUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockClient)(nil).GetUser), userID)
}

// GetUserFullInfo mocks base method.
func (m *MockClient) GetUserFullInfo(userID int64) (*tdlib.UserFullInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFullInfo", userID)
	ret0, _ := ret[0].(*tdlib.UserFullInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFullInfo indicates an expected call of GetUserFullInfo.
func (mr *MockClientMockRecorder) GetUserFullInfo(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFullInfo", reflect.TypeOf((*MockClient)(nil).GetUserFullInfo), userID)
}

// GetUserPrivacySettingRules mocks base method.
func (m *MockClient) GetUserPrivacySettingRules(setting tdlib.UserPrivacySetting) (*tdlib.UserPrivacySettingRules, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPrivacySettingRules", setting)
	ret0, _ := ret[0].(*tdlib.UserPrivacySettingRules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPrivacySettingRules indicates an expected call of GetUserPrivacySettingRules.
func (mr *MockClientMockRecorder) GetUserPrivacySettingRules(setting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPrivacySettingRules", reflect.TypeOf((*MockClient)(nil).GetUserPrivacySettingRules), setting)
}

// GetUserProfilePhotos mocks base method.
func (m *MockClient) GetUserProfilePhotos(userID int64, offset, limit int32) (*tdlib.ChatPhotos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfilePhotos", userID, offset, limit)
	ret0, _ := ret[0].(*tdlib.ChatPhotos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfilePhotos indicates an expected call of GetUserProfilePhotos.
func (mr *MockClientMockRecorder) GetUserProfilePhotos(userID, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfilePhotos", reflect.TypeOf((*MockClient)(nil).GetUserProfilePhotos), userID, offset, limit)
}

// GetVideoChatAvailableParticipants mocks base method.
func (m *MockClient) GetVideoChatAvailableParticipants(chatID int64) (*tdlib.MessageSenders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoChatAvailableParticipants", chatID)
	ret0, _ := ret[0].(*tdlib.MessageSenders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoChatAvailableParticipants indicates an expected call of GetVideoChatAvailableParticipants.
func (mr *MockClientMockRecorder) GetVideoChatAvailableParticipants(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoChatAvailableParticipants", reflect.TypeOf((*MockClient)(nil).GetVideoChatAvailableParticipants), chatID)
}

// GetWebPageInstantView mocks base method.
func (m *MockClient) GetWebPageInstantView(uRL string, forceFull bool) (*tdlib.WebPageInstantView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebPageInstantView", uRL, forceFull)
	ret0, _ := ret[0].(*tdlib.WebPageInstantView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebPageInstantView indicates an expected call of GetWebPageInstantView.
func (mr *MockClientMockRecorder) GetWebPageInstantView(uRL, forceFull interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebPageInstantView", reflect.TypeOf((*MockClient)(nil).GetWebPageInstantView), uRL, forceFull)
}

// GetWebPagePreview mocks base method.
func (m *MockClient) GetWebPagePreview(text *tdlib.FormattedText) (*tdlib.WebPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebPagePreview", text)
	ret0, _ := ret[0].(*tdlib.WebPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebPagePreview indicates an expected call of GetWebPagePreview.
func (mr *MockClientMockRecorder) GetWebPagePreview(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebPagePreview", reflect.TypeOf((*MockClient)(nil).GetWebPagePreview), text)
}

// HideSuggestedAction mocks base method.
func (m *MockClient) HideSuggestedAction(action tdlib.SuggestedAction) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HideSuggestedAction", action)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HideSuggestedAction indicates an expected call of HideSuggestedAction.
func (mr *MockClientMockRecorder) HideSuggestedAction(action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HideSuggestedAction", reflect.TypeOf((*MockClient)(nil).HideSuggestedAction), action)
}

// ImportContacts mocks base method.
func (m *MockClient) ImportContacts(contacts []tdlib.Contact) (*tdlib.ImportedContacts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportContacts", contacts)
	ret0, _ := ret[0].(*tdlib.ImportedContacts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportContacts indicates an expected call of ImportContacts.
func (mr *MockClientMockRecorder) ImportContacts(contacts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportContacts", reflect.TypeOf((*MockClient)(nil).ImportContacts), contacts)
}

// ImportMessages mocks base method.
func (m *MockClient) ImportMessages(chatID int64, messageFile tdlib.InputFile, attachedFiles []tdlib.InputFile) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportMessages", chatID, messageFile, attachedFiles)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportMessages indicates an expected call of ImportMessages.
func (mr *MockClientMockRecorder) ImportMessages(chatID, messageFile, attachedFiles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportMessages", reflect.TypeOf((*MockClient)(nil).ImportMessages), chatID, messageFile, attachedFiles)
}

// InviteGroupCallParticipants mocks base method.
func (m *MockClient) InviteGroupCallParticipants(groupCallID int32, userIDs []int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteGroupCallParticipants", groupCallID, userIDs)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteGroupCallParticipants indicates an expected call of InviteGroupCallParticipants.
func (mr *MockClientMockRecorder) InviteGroupCallParticipants(groupCallID, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteGroupCallParticipants", reflect.TypeOf((*MockClient)(nil).InviteGroupCallParticipants), groupCallID, userIDs)
}

// JoinChat mocks base method.
func (m *MockClient) JoinChat(chatID int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinChat", chatID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinChat indicates an expected call of JoinChat.
func (mr *MockClientMockRecorder) JoinChat(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinChat", reflect.TypeOf((*MockClient)(nil).JoinChat), chatID)
}

// JoinChatByInviteLink mocks base method.
func (m *MockClient) JoinChatByInviteLink(inviteLink string) (*tdlib.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinChatByInviteLink", inviteLink)
	ret0, _ := ret[0].(*tdlib.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinChatByInviteLink indicates an expected call of JoinChatByInviteLink.
func (mr *MockClientMockRecorder) JoinChatByInviteLink(inviteLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinChatByInviteLink", reflect.TypeOf((*MockClient)(nil).JoinChatByInviteLink), inviteLink)
}

// JoinGroupCall mocks base method.
func (m *MockClient) JoinGroupCall(groupCallID int32, participantID tdlib.MessageSender, audioSourceID int32, payload string, isMuted, isMyVideoEnabled bool, inviteHash string) (*tdlib.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinGroupCall", groupCallID, participantID, audioSourceID, payload, isMuted, isMyVideoEnabled, inviteHash)
	ret0, _ := ret[0].(*tdlib.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinGroupCall indicates an expected call of JoinGroupCall.
func (mr *MockClientMockRecorder) JoinGroupCall(groupCallID, participantID, audioSourceID, payload, isMuted, isMyVideoEnabled, inviteHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinGroupCall", reflect.TypeOf((*MockClient)(nil).JoinGroupCall), groupCallID, participantID, audioSourceID, payload, isMuted, isMyVideoEnabled, inviteHash)
}

// LeaveChat mocks base method.
func (m *MockClient) LeaveChat(chatID int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveChat", chatID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveChat indicates an expected call of LeaveChat.
func (mr *MockClientMockRecorder) LeaveChat(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveChat", reflect.TypeOf((*MockClient)(nil).LeaveChat), chatID)
}

// LeaveGroupCall mocks base method.
func (m *MockClient) LeaveGroupCall(groupCallID int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveGroupCall", groupCallID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveGroupCall indicates an expected call of LeaveGroupCall.
func (mr *MockClientMockRecorder) LeaveGroupCall(groupCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveGroupCall", reflect.TypeOf((*MockClient)(nil).LeaveGroupCall), groupCallID)
}

// LoadChats mocks base method.
func (m *MockClient) LoadChats(chatList tdlib.ChatList, limit int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadChats", chatList, limit)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadChats indicates an expected call of LoadChats.
func (mr *MockClientMockRecorder) LoadChats(chatList, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadChats", reflect.TypeOf((*MockClient)(nil).LoadChats), chatList, limit)
}

// LoadGroupCallParticipants mocks base method.
func (m *MockClient) LoadGroupCallParticipants(groupCallID, limit int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadGroupCallParticipants", groupCallID, limit)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadGroupCallParticipants indicates an expected call of LoadGroupCallParticipants.
func (mr *MockClientMockRecorder) LoadGroupCallParticipants(groupCallID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadGroupCallParticipants", reflect.TypeOf((*MockClient)(nil).LoadGroupCallParticipants), groupCallID, limit)
}

// LogOut mocks base method.
func (m *MockClient) LogOut() (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogOut")
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogOut indicates an expected call of LogOut.
func (mr *MockClientMockRecorder) LogOut() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogOut", reflect.TypeOf((*MockClient)(nil).LogOut))
}

// OpenChat mocks base method.
func (m *MockClient) OpenChat(chatID int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenChat", chatID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenChat indicates an expected call of OpenChat.
func (mr *MockClientMockRecorder) OpenChat(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenChat", reflect.TypeOf((*MockClient)(nil).OpenChat), chatID)
}

// OpenMessageContent mocks base method.
func (m *MockClient) OpenMessageContent(chatID, messageID int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenMessageContent", chatID, messageID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenMessageContent indicates an expected call of OpenMessageContent.
func (mr *MockClientMockRecorder) OpenMessageContent(chatID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenMessageContent", reflect.TypeOf((*MockClient)(nil).OpenMessageContent), chatID, messageID)
}

// OptimizeStorage mocks base method.
func (m *MockClient) OptimizeStorage(size int64, tTL, count, immunityDelay int32, fileTypes []tdlib.FileType, chatIDs, excludeChatIDs []int64, returnDeletedFileStatistics bool, chatLimit int32) (*tdlib.StorageStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptimizeStorage", size, tTL, count, immunityDelay, fileTypes, chatIDs, excludeChatIDs, returnDeletedFileStatistics, chatLimit)
	ret0, _ := ret[0].(*tdlib.StorageStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptimizeStorage indicates an expected call of OptimizeStorage.
func (mr *MockClientMockRecorder) OptimizeStorage(size, tTL, count, immunityDelay, fileTypes, chatIDs, excludeChatIDs, returnDeletedFileStatistics, chatLimit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptimizeStorage", reflect.TypeOf((*MockClient)(nil).OptimizeStorage), size, tTL, count, immunityDelay, fileTypes, chatIDs, excludeChatIDs, returnDeletedFileStatistics, chatLimit)
}

// ParseMarkdown mocks base method.
func (m *MockClient) ParseMarkdown(text *tdlib.FormattedText) (*tdlib.FormattedText, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseMarkdown", text)
	ret0, _ := ret[0].(*tdlib.FormattedText)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseMarkdown indicates an expected call of ParseMarkdown.
func (mr *MockClientMockRecorder) ParseMarkdown(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseMarkdown", reflect.TypeOf((*MockClient)(nil).ParseMarkdown), text)
}

// ParseTextEntities mocks base method.
func (m *MockClient) ParseTextEntities(text string, parseMode tdlib.TextParseMode) (*tdlib.FormattedText, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseTextEntities", text, parseMode)
	ret0, _ := ret[0].(*tdlib.FormattedText)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTextEntities indicates an expected call of ParseTextEntities.
func (mr *MockClientMockRecorder) ParseTextEntities(text, parseMode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTextEntities", reflect.TypeOf((*MockClient)(nil).ParseTextEntities), text, parseMode)
}

// PinChatMessage mocks base method.
func (m *MockClient) PinChatMessage(chatID, messageID int64, disableNotification, onlyForSelf bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PinChatMessage", chatID, messageID, disableNotification, onlyForSelf)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PinChatMessage indicates an expected call of PinChatMessage.
func (mr *MockClientMockRecorder) PinChatMessage(chatID, messageID, disableNotification, onlyForSelf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PinChatMessage", reflect.TypeOf((*MockClient)(nil).PinChatMessage), chatID, messageID, disableNotification, onlyForSelf)
}

// PingProxy mocks base method.
func (m *MockClient) PingProxy(proxyID int32) (*tdlib.Seconds, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingProxy", proxyID)
	ret0, _ := ret[0].(*tdlib.Seconds)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingProxy indicates an expected call of PingProxy.
func (mr *MockClientMockRecorder) PingProxy(proxyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingProxy", reflect.TypeOf((*MockClient)(nil).PingProxy), proxyID)
}

// ProcessChatJoinRequest mocks base method.
func (m *MockClient) ProcessChatJoinRequest(chatID, userID int64, approve bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessChatJoinRequest", chatID, userID, approve)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessChatJoinRequest indicates an expected call of ProcessChatJoinRequest.
func (mr *MockClientMockRecorder) ProcessChatJoinRequest(chatID, userID, approve interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessChatJoinRequest", reflect.TypeOf((*MockClient)(nil).ProcessChatJoinRequest), chatID, userID, approve)
}

// ProcessChatJoinRequests mocks base method.
func (m *MockClient) ProcessChatJoinRequests(chatID int64, inviteLink string, approve bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessChatJoinRequests", chatID, inviteLink, approve)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessChatJoinRequests indicates an expected call of ProcessChatJoinRequests.
func (mr *MockClientMockRecorder) ProcessChatJoinRequests(chatID, inviteLink, approve interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessChatJoinRequests", reflect.TypeOf((*MockClient)(nil).ProcessChatJoinRequests), chatID, inviteLink, approve)
}

// ProcessPushNotification mocks base method.
func (m *MockClient) ProcessPushNotification(payload string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPushNotification", payload)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessPushNotification indicates an expected call of ProcessPushNotification.
func (mr *MockClientMockRecorder) ProcessPushNotification(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPushNotification", reflect.TypeOf((*MockClient)(nil).ProcessPushNotification), payload)
}

// ReadAllChatMentions mocks base method.
func (m *MockClient) ReadAllChatMentions(chatID int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllChatMentions", chatID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllChatMentions indicates an expected call of ReadAllChatMentions.
func (mr *MockClientMockRecorder) ReadAllChatMentions(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllChatMentions", reflect.TypeOf((*MockClient)(nil).ReadAllChatMentions), chatID)
}

// ReadFilePart mocks base method.
func (m *MockClient) ReadFilePart(fileID, offset, count int32) (*tdlib.FilePart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFilePart", fileID, offset, count)
	ret0, _ := ret[0].(*tdlib.FilePart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFilePart indicates an expected call of ReadFilePart.
func (mr *MockClientMockRecorder) ReadFilePart(fileID, offset, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFilePart", reflect.TypeOf((*MockClient)(nil).ReadFilePart), fileID, offset, count)
}

// RecoverAuthenticationPassword mocks base method.
func (m *MockClient) RecoverAuthenticationPassword(recoveryCode, newPassword, newHint string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverAuthenticationPassword", recoveryCode, newPassword, newHint)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecoverAuthenticationPassword indicates an expected call of RecoverAuthenticationPassword.
func (mr *MockClientMockRecorder) RecoverAuthenticationPassword(recoveryCode, newPassword, newHint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverAuthenticationPassword", reflect.TypeOf((*MockClient)(nil).RecoverAuthenticationPassword), recoveryCode, newPassword, newHint)
}

// RecoverPassword mocks base method.
func (m *MockClient) RecoverPassword(recoveryCode, newPassword, newHint string) (*tdlib.PasswordState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverPassword", recoveryCode, newPassword, newHint)
	ret0, _ := ret[0].(*tdlib.PasswordState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecoverPassword indicates an expected call of RecoverPassword.
func (mr *MockClientMockRecorder) RecoverPassword(recoveryCode, newPassword, newHint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverPassword", reflect.TypeOf((*MockClient)(nil).RecoverPassword), recoveryCode, newPassword, newHint)
}

// RegisterDevice mocks base method.
func (m *MockClient) RegisterDevice(deviceToken tdlib.DeviceToken, otherUserIDs []int64) (*tdlib.PushReceiverID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterDevice", deviceToken, otherUserIDs)
	ret0, _ := ret[0].(*tdlib.PushReceiverID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterDevice indicates an expected call of RegisterDevice.
func (mr *MockClientMockRecorder) RegisterDevice(deviceToken, otherUserIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDevice", reflect.TypeOf((*MockClient)(nil).RegisterDevice), deviceToken, otherUserIDs)
}

// RegisterUser mocks base method.
func (m *MockClient) RegisterUser(firstName, lastName string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", firstName, lastName)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockClientMockRecorder) RegisterUser(firstName, lastName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockClient)(nil).RegisterUser), firstName, lastName)
}

// RemoveBackground mocks base method.
func (m *MockClient) RemoveBackground(backgroundID *tdlib.JSONInt64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBackground", backgroundID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBackground indicates an expected call of RemoveBackground.
func (mr *MockClientMockRecorder) RemoveBackground(backgroundID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBackground", reflect.TypeOf((*MockClient)(nil).RemoveBackground), backgroundID)
}

// RemoveChatActionBar mocks base method.
func (m *MockClient) RemoveChatActionBar(chatID int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveChatActionBar", chatID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveChatActionBar indicates an expected call of RemoveChatActionBar.
func (mr *MockClientMockRecorder) RemoveChatActionBar(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveChatActionBar", reflect.TypeOf((*MockClient)(nil).RemoveChatActionBar), chatID)
}

// RemoveContacts mocks base method.
func (m *MockClient) RemoveContacts(userIDs []int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContacts", userIDs)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveContacts indicates an expected call of RemoveContacts.
func (mr *MockClientMockRecorder) RemoveContacts(userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContacts", reflect.TypeOf((*MockClient)(nil).RemoveContacts), userIDs)
}

// RemoveFavoriteSticker mocks base method.
func (m *MockClient) RemoveFavoriteSticker(sticker tdlib.InputFile) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFavoriteSticker", sticker)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFavoriteSticker indicates an expected call of RemoveFavoriteSticker.
func (mr *MockClientMockRecorder) RemoveFavoriteSticker(sticker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFavoriteSticker", reflect.TypeOf((*MockClient)(nil).RemoveFavoriteSticker), sticker)
}

// RemoveNotification mocks base method.
func (m *MockClient) RemoveNotification(notificationGroupID, notificationID int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNotification", notificationGroupID, notificationID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveNotification indicates an expected call of RemoveNotification.
func (mr *MockClientMockRecorder) RemoveNotification(notificationGroupID, notificationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNotification", reflect.TypeOf((*MockClient)(nil).RemoveNotification), notificationGroupID, notificationID)
}

// RemoveNotificationGroup mocks base method.
func (m *MockClient) RemoveNotificationGroup(notificationGroupID, maxNotificationID int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNotificationGroup", notificationGroupID, maxNotificationID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveNotificationGroup indicates an expected call of RemoveNotificationGroup.
func (mr *MockClientMockRecorder) RemoveNotificationGroup(notificationGroupID, maxNotificationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNotificationGroup", reflect.TypeOf((*MockClient)(nil).RemoveNotificationGroup), notificationGroupID, maxNotificationID)
}

// RemoveProxy mocks base method.
func (m *MockClient) RemoveProxy(proxyID int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProxy", proxyID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveProxy indicates an expected call of RemoveProxy.
func (mr *MockClientMockRecorder) RemoveProxy(proxyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProxy", reflect.TypeOf((*MockClient)(nil).RemoveProxy), proxyID)
}

// RemoveRecentHashtag mocks base method.
func (m *MockClient) RemoveRecentHashtag(hashtag string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRecentHashtag", hashtag)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRecentHashtag indicates an expected call of RemoveRecentHashtag.
func (mr *MockClientMockRecorder) RemoveRecentHashtag(hashtag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRecentHashtag", reflect.TypeOf((*MockClient)(nil).RemoveRecentHashtag), hashtag)
}

// RemoveRecentSticker mocks base method.
func (m *MockClient) RemoveRecentSticker(isAttached bool, sticker tdlib.InputFile) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRecentSticker", isAttached, sticker)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRecentSticker indicates an expected call of RemoveRecentSticker.
func (mr *MockClientMockRecorder) RemoveRecentSticker(isAttached, sticker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRecentSticker", reflect.TypeOf((*MockClient)(nil).RemoveRecentSticker), isAttached, sticker)
}

// RemoveRecentlyFoundChat mocks base method.
func (m *MockClient) RemoveRecentlyFoundChat(chatID int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRecentlyFoundChat", chatID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRecentlyFoundChat indicates an expected call of RemoveRecentlyFoundChat.
func (mr *MockClientMockRecorder) RemoveRecentlyFoundChat(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRecentlyFoundChat", reflect.TypeOf((*MockClient)(nil).RemoveRecentlyFoundChat), chatID)
}

// RemoveSavedAnimation mocks base method.
func (m *MockClient) RemoveSavedAnimation(animation tdlib.InputFile) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSavedAnimation", animation)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSavedAnimation indicates an expected call of RemoveSavedAnimation.
func (mr *MockClientMockRecorder) RemoveSavedAnimation(animation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSavedAnimation", reflect.TypeOf((*MockClient)(nil).RemoveSavedAnimation), animation)
}

// RemoveStickerFromSet mocks base method.
func (m *MockClient) RemoveStickerFromSet(sticker tdlib.InputFile) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStickerFromSet", sticker)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveStickerFromSet indicates an expected call of RemoveStickerFromSet.
func (mr *MockClientMockRecorder) RemoveStickerFromSet(sticker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStickerFromSet", reflect.TypeOf((*MockClient)(nil).RemoveStickerFromSet), sticker)
}

// RemoveTopChat mocks base method.
func (m *MockClient) RemoveTopChat(category tdlib.TopChatCategory, chatID int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTopChat", category, chatID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTopChat indicates an expected call of RemoveTopChat.
func (mr *MockClientMockRecorder) RemoveTopChat(category, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTopChat", reflect.TypeOf((*MockClient)(nil).RemoveTopChat), category, chatID)
}

// ReorderChatFilters mocks base method.
func (m *MockClient) ReorderChatFilters(chatFilterIDs []int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReorderChatFilters", chatFilterIDs)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReorderChatFilters indicates an expected call of ReorderChatFilters.
func (mr *MockClientMockRecorder) ReorderChatFilters(chatFilterIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReorderChatFilters", reflect.TypeOf((*MockClient)(nil).ReorderChatFilters), chatFilterIDs)
}

// ReorderInstalledStickerSets mocks base method.
func (m *MockClient) ReorderInstalledStickerSets(isMasks bool, stickerSetIDs []tdlib.JSONInt64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReorderInstalledStickerSets", isMasks, stickerSetIDs)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReorderInstalledStickerSets indicates an expected call of ReorderInstalledStickerSets.
func (mr *MockClientMockRecorder) ReorderInstalledStickerSets(isMasks, stickerSetIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReorderInstalledStickerSets", reflect.TypeOf((*MockClient)(nil).ReorderInstalledStickerSets), isMasks, stickerSetIDs)
}

// ReplacePrimaryChatInviteLink mocks base method.
func (m *MockClient) ReplacePrimaryChatInviteLink(chatID int64) (*tdlib.ChatInviteLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplacePrimaryChatInviteLink", chatID)
	ret0, _ := ret[0].(*tdlib.ChatInviteLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplacePrimaryChatInviteLink indicates an expected call of ReplacePrimaryChatInviteLink.
func (mr *MockClientMockRecorder) ReplacePrimaryChatInviteLink(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplacePrimaryChatInviteLink", reflect.TypeOf((*MockClient)(nil).ReplacePrimaryChatInviteLink), chatID)
}

// ReportChat mocks base method.
func (m *MockClient) ReportChat(chatID int64, messageIDs []int64, reason tdlib.ChatReportReason, text string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportChat", chatID, messageIDs, reason, text)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportChat indicates an expected call of ReportChat.
func (mr *MockClientMockRecorder) ReportChat(chatID, messageIDs, reason, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportChat", reflect.TypeOf((*MockClient)(nil).ReportChat), chatID, messageIDs, reason, text)
}

// ReportChatPhoto mocks base method.
func (m *MockClient) ReportChatPhoto(chatID int64, fileID int32, reason tdlib.ChatReportReason, text string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportChatPhoto", chatID, fileID, reason, text)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportChatPhoto indicates an expected call of ReportChatPhoto.
func (mr *MockClientMockRecorder) ReportChatPhoto(chatID, fileID, reason, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportChatPhoto", reflect.TypeOf((*MockClient)(nil).ReportChatPhoto), chatID, fileID, reason, text)
}

// ReportSupergroupSpam mocks base method.
func (m *MockClient) ReportSupergroupSpam(supergroupID int64, messageIDs []int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSupergroupSpam", supergroupID, messageIDs)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSupergroupSpam indicates an expected call of ReportSupergroupSpam.
func (mr *MockClientMockRecorder) ReportSupergroupSpam(supergroupID, messageIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSupergroupSpam", reflect.TypeOf((*MockClient)(nil).ReportSupergroupSpam), supergroupID, messageIDs)
}

// RequestAuthenticationPasswordRecovery mocks base method.
func (m *MockClient) RequestAuthenticationPasswordRecovery() (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestAuthenticationPasswordRecovery")
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestAuthenticationPasswordRecovery indicates an expected call of RequestAuthenticationPasswordRecovery.
func (mr *MockClientMockRecorder) RequestAuthenticationPasswordRecovery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestAuthenticationPasswordRecovery", reflect.TypeOf((*MockClient)(nil).RequestAuthenticationPasswordRecovery))
}

// RequestPasswordRecovery mocks base method.
func (m *MockClient) RequestPasswordRecovery() (*tdlib.EmailAddressAuthenticationCodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPasswordRecovery")
	ret0, _ := ret[0].(*tdlib.EmailAddressAuthenticationCodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestPasswordRecovery indicates an expected call of RequestPasswordRecovery.
func (mr *MockClientMockRecorder) RequestPasswordRecovery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPasswordRecovery", reflect.TypeOf((*MockClient)(nil).RequestPasswordRecovery))
}

// RequestQrCodeAuthentication mocks base method.
func (m *MockClient) RequestQrCodeAuthentication(otherUserIDs []int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestQrCodeAuthentication", otherUserIDs)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestQrCodeAuthentication indicates an expected call of RequestQrCodeAuthentication.
func (mr *MockClientMockRecorder) RequestQrCodeAuthentication(otherUserIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestQrCodeAuthentication", reflect.TypeOf((*MockClient)(nil).RequestQrCodeAuthentication), otherUserIDs)
}

// ResendAuthenticationCode mocks base method.
func (m *MockClient) ResendAuthenticationCode() (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendAuthenticationCode")
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResendAuthenticationCode indicates an expected call of ResendAuthenticationCode.
func (mr *MockClientMockRecorder) ResendAuthenticationCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendAuthenticationCode", reflect.TypeOf((*MockClient)(nil).ResendAuthenticationCode))
}

// ResendChangePhoneNumberCode mocks base method.
func (m *MockClient) ResendChangePhoneNumberCode() (*tdlib.AuthenticationCodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendChangePhoneNumberCode")
	ret0, _ := ret[0].(*tdlib.AuthenticationCodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResendChangePhoneNumberCode indicates an expected call of ResendChangePhoneNumberCode.
func (mr *MockClientMockRecorder) ResendChangePhoneNumberCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendChangePhoneNumberCode", reflect.TypeOf((*MockClient)(nil).ResendChangePhoneNumberCode))
}

// ResendEmailAddressVerificationCode mocks base method.
func (m *MockClient) ResendEmailAddressVerificationCode() (*tdlib.EmailAddressAuthenticationCodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendEmailAddressVerificationCode")
	ret0, _ := ret[0].(*tdlib.EmailAddressAuthenticationCodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResendEmailAddressVerificationCode indicates an expected call of ResendEmailAddressVerificationCode.
func (mr *MockClientMockRecorder) ResendEmailAddressVerificationCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendEmailAddressVerificationCode", reflect.TypeOf((*MockClient)(nil).ResendEmailAddressVerificationCode))
}

// ResendMessages mocks base method.
func (m *MockClient) ResendMessages(chatID int64, messageIDs []int64) (*tdlib.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendMessages", chatID, messageIDs)
	ret0, _ := ret[0].(*tdlib.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResendMessages indicates an expected call of ResendMessages.
func (mr *MockClientMockRecorder) ResendMessages(chatID, messageIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendMessages", reflect.TypeOf((*MockClient)(nil).ResendMessages), chatID, messageIDs)
}

// ResendPhoneNumberConfirmationCode mocks base method.
func (m *MockClient) ResendPhoneNumberConfirmationCode() (*tdlib.AuthenticationCodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendPhoneNumberConfirmationCode")
	ret0, _ := ret[0].(*tdlib.AuthenticationCodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResendPhoneNumberConfirmationCode indicates an expected call of ResendPhoneNumberConfirmationCode.
func (mr *MockClientMockRecorder) ResendPhoneNumberConfirmationCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendPhoneNumberConfirmationCode", reflect.TypeOf((*MockClient)(nil).ResendPhoneNumberConfirmationCode))
}

// ResendPhoneNumberVerificationCode mocks base method.
func (m *MockClient) ResendPhoneNumberVerificationCode() (*tdlib.AuthenticationCodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendPhoneNumberVerificationCode")
	ret0, _ := ret[0].(*tdlib.AuthenticationCodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResendPhoneNumberVerificationCode indicates an expected call of ResendPhoneNumberVerificationCode.
func (mr *MockClientMockRecorder) ResendPhoneNumberVerificationCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendPhoneNumberVerificationCode", reflect.TypeOf((*MockClient)(nil).ResendPhoneNumberVerificationCode))
}

// ResendRecoveryEmailAddressCode mocks base method.
func (m *MockClient) ResendRecoveryEmailAddressCode() (*tdlib.PasswordState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendRecoveryEmailAddressCode")
	ret0, _ := ret[0].(*tdlib.PasswordState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResendRecoveryEmailAddressCode indicates an expected call of ResendRecoveryEmailAddressCode.
func (mr *MockClientMockRecorder) ResendRecoveryEmailAddressCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendRecoveryEmailAddressCode", reflect.TypeOf((*MockClient)(nil).ResendRecoveryEmailAddressCode))
}

// ResetAllNotificationSettings mocks base method.
func (m *MockClient) ResetAllNotificationSettings() (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetAllNotificationSettings")
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetAllNotificationSettings indicates an expected call of ResetAllNotificationSettings.
func (mr *MockClientMockRecorder) ResetAllNotificationSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAllNotificationSettings", reflect.TypeOf((*MockClient)(nil).ResetAllNotificationSettings))
}

// ResetBackgrounds mocks base method.
func (m *MockClient) ResetBackgrounds() (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetBackgrounds")
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetBackgrounds indicates an expected call of ResetBackgrounds.
func (mr *MockClientMockRecorder) ResetBackgrounds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetBackgrounds", reflect.TypeOf((*MockClient)(nil).ResetBackgrounds))
}

// ResetNetworkStatistics mocks base method.
func (m *MockClient) ResetNetworkStatistics() (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetNetworkStatistics")
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetNetworkStatistics indicates an expected call of ResetNetworkStatistics.
func (mr *MockClientMockRecorder) ResetNetworkStatistics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetNetworkStatistics", reflect.TypeOf((*MockClient)(nil).ResetNetworkStatistics))
}

// ResetPassword mocks base method.
func (m *MockClient) ResetPassword() (tdlib.ResetPasswordResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword")
	ret0, _ := ret[0].(tdlib.ResetPasswordResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockClientMockRecorder) ResetPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockClient)(nil).ResetPassword))
}

// RevokeChatInviteLink mocks base method.
func (m *MockClient) RevokeChatInviteLink(chatID int64, inviteLink string) (*tdlib.ChatInviteLinks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeChatInviteLink", chatID, inviteLink)
	ret0, _ := ret[0].(*tdlib.ChatInviteLinks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeChatInviteLink indicates an expected call of RevokeChatInviteLink.
func (mr *MockClientMockRecorder) RevokeChatInviteLink(chatID, inviteLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeChatInviteLink", reflect.TypeOf((*MockClient)(nil).RevokeChatInviteLink), chatID, inviteLink)
}

// RevokeGroupCallInviteLink mocks base method.
func (m *MockClient) RevokeGroupCallInviteLink(groupCallID int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeGroupCallInviteLink", groupCallID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeGroupCallInviteLink indicates an expected call of RevokeGroupCallInviteLink.
func (mr *MockClientMockRecorder) RevokeGroupCallInviteLink(groupCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeGroupCallInviteLink", reflect.TypeOf((*MockClient)(nil).RevokeGroupCallInviteLink), groupCallID)
}

// SaveApplicationLogEvent mocks base method.
func (m *MockClient) SaveApplicationLogEvent(typeParam string, chatID int64, data tdlib.JsonValue) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveApplicationLogEvent", typeParam, chatID, data)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveApplicationLogEvent indicates an expected call of SaveApplicationLogEvent.
func (mr *MockClientMockRecorder) SaveApplicationLogEvent(typeParam, chatID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveApplicationLogEvent", reflect.TypeOf((*MockClient)(nil).SaveApplicationLogEvent), typeParam, chatID, data)
}

// SearchBackground mocks base method.
func (m *MockClient) SearchBackground(name string) (*tdlib.Background, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBackground", name)
	ret0, _ := ret[0].(*tdlib.Background)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBackground indicates an expected call of SearchBackground.
func (mr *MockClientMockRecorder) SearchBackground(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBackground", reflect.TypeOf((*MockClient)(nil).SearchBackground), name)
}

// SearchCallMessages mocks base method.
func (m *MockClient) SearchCallMessages(fromMessageID int64, limit int32, onlyMissed bool) (*tdlib.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCallMessages", fromMessageID, limit, onlyMissed)
	ret0, _ := ret[0].(*tdlib.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCallMessages indicates an expected call of SearchCallMessages.
func (mr *MockClientMockRecorder) SearchCallMessages(fromMessageID, limit, onlyMissed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCallMessages", reflect.TypeOf((*MockClient)(nil).SearchCallMessages), fromMessageID, limit, onlyMissed)
}

// SearchChatMembers mocks base method.
func (m *MockClient) SearchChatMembers(chatID int64, query string, limit int32, filter tdlib.ChatMembersFilter) (*tdlib.ChatMembers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchChatMembers", chatID, query, limit, filter)
	ret0, _ := ret[0].(*tdlib.ChatMembers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchChatMembers indicates an expected call of SearchChatMembers.
func (mr *MockClientMockRecorder) SearchChatMembers(chatID, query, limit, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchChatMembers", reflect.TypeOf((*MockClient)(nil).SearchChatMembers), chatID, query, limit, filter)
}

// SearchChatMessages mocks base method.
func (m *MockClient) SearchChatMessages(chatID int64, query string, senderID tdlib.MessageSender, fromMessageID int64, offset, limit int32, filter tdlib.SearchMessagesFilter, messageThreadID int64) (*tdlib.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchChatMessages", chatID, query, senderID, fromMessageID, offset, limit, filter, messageThreadID)
	ret0, _ := ret[0].(*tdlib.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchChatMessages indicates an expected call of SearchChatMessages.
func (mr *MockClientMockRecorder) SearchChatMessages(chatID, query, senderID, fromMessageID, offset, limit, filter, messageThreadID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchChatMessages", reflect.TypeOf((*MockClient)(nil).SearchChatMessages), chatID, query, senderID, fromMessageID, offset, limit, filter, messageThreadID)
}

// SearchChatRecentLocationMessages mocks base method.
func (m *MockClient) SearchChatRecentLocationMessages(chatID int64, limit int32) (*tdlib.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchChatRecentLocationMessages", chatID, limit)
	ret0, _ := ret[0].(*tdlib.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchChatRecentLocationMessages indicates an expected call of SearchChatRecentLocationMessages.
func (mr *MockClientMockRecorder) SearchChatRecentLocationMessages(chatID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchChatRecentLocationMessages", reflect.TypeOf((*MockClient)(nil).SearchChatRecentLocationMessages), chatID, limit)
}

// SearchChats mocks base method.
func (m *MockClient) SearchChats(query string, limit int32) (*tdlib.Chats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchChats", query, limit)
	ret0, _ := ret[0].(*tdlib.Chats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchChats indicates an expected call of SearchChats.
func (mr *MockClientMockRecorder) SearchChats(query, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchChats", reflect.TypeOf((*MockClient)(nil).SearchChats), query, limit)
}

// SearchChatsNearby mocks base method.
func (m *MockClient) SearchChatsNearby(location *tdlib.Location) (*tdlib.ChatsNearby, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchChatsNearby", location)
	ret0, _ := ret[0].(*tdlib.ChatsNearby)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchChatsNearby indicates an expected call of SearchChatsNearby.
func (mr *MockClientMockRecorder) SearchChatsNearby(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchChatsNearby", reflect.TypeOf((*MockClient)(nil).SearchChatsNearby), location)
}

// SearchChatsOnServer mocks base method.
func (m *MockClient) SearchChatsOnServer(query string, limit int32) (*tdlib.Chats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchChatsOnServer", query, limit)
	ret0, _ := ret[0].(*tdlib.Chats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchChatsOnServer indicates an expected call of SearchChatsOnServer.
func (mr *MockClientMockRecorder) SearchChatsOnServer(query, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchChatsOnServer", reflect.TypeOf((*MockClient)(nil).SearchChatsOnServer), query, limit)
}

// SearchContacts mocks base method.
func (m *MockClient) SearchContacts(query string, limit int32) (*tdlib.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchContacts", query, limit)
	ret0, _ := ret[0].(*tdlib.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchContacts indicates an expected call of SearchContacts.
func (mr *MockClientMockRecorder) SearchContacts(query, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContacts", reflect.TypeOf((*MockClient)(nil).SearchContacts), query, limit)
}

// SearchEmojis mocks base method.
func (m *MockClient) SearchEmojis(text string, exactMatch bool, inputLanguageCodes []string) (*tdlib.Emojis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchEmojis", text, exactMatch, inputLanguageCodes)
	ret0, _ := ret[0].(*tdlib.Emojis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEmojis indicates an expected call of SearchEmojis.
func (mr *MockClientMockRecorder) SearchEmojis(text, exactMatch, inputLanguageCodes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEmojis", reflect.TypeOf((*MockClient)(nil).SearchEmojis), text, exactMatch, inputLanguageCodes)
}

// SearchHashtags mocks base method.
func (m *MockClient) SearchHashtags(prefix string, limit int32) (*tdlib.Hashtags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchHashtags", prefix, limit)
	ret0, _ := ret[0].(*tdlib.Hashtags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchHashtags indicates an expected call of SearchHashtags.
func (mr *MockClientMockRecorder) SearchHashtags(prefix, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchHashtags", reflect.TypeOf((*MockClient)(nil).SearchHashtags), prefix, limit)
}

// SearchInstalledStickerSets mocks base method.
func (m *MockClient) SearchInstalledStickerSets(isMasks bool, query string, limit int32) (*tdlib.StickerSets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchInstalledStickerSets", isMasks, query, limit)
	ret0, _ := ret[0].(*tdlib.StickerSets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchInstalledStickerSets indicates an expected call of SearchInstalledStickerSets.
func (mr *MockClientMockRecorder) SearchInstalledStickerSets(isMasks, query, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchInstalledStickerSets", reflect.TypeOf((*MockClient)(nil).SearchInstalledStickerSets), isMasks, query, limit)
}

// SearchMessages mocks base method.
func (m *MockClient) SearchMessages(chatList tdlib.ChatList, query string, offsetDate int32, offsetChatID, offsetMessageID int64, limit int32, filter tdlib.SearchMessagesFilter, minDate, maxDate int32) (*tdlib.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMessages", chatList, query, offsetDate, offsetChatID, offsetMessageID, limit, filter, minDate, maxDate)
	ret0, _ := ret[0].(*tdlib.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMessages indicates an expected call of SearchMessages.
func (mr *MockClientMockRecorder) SearchMessages(chatList, query, offsetDate, offsetChatID, offsetMessageID, limit, filter, minDate, maxDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMessages", reflect.TypeOf((*MockClient)(nil).SearchMessages), chatList, query, offsetDate, offsetChatID, offsetMessageID, limit, filter, minDate, maxDate)
}

// SearchPublicChat mocks base method.
func (m *MockClient) SearchPublicChat(username string) (*tdlib.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPublicChat", username)
	ret0, _ := ret[0].(*tdlib.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPublicChat indicates an expected call of SearchPublicChat.
func (mr *MockClientMockRecorder) SearchPublicChat(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPublicChat", reflect.TypeOf((*MockClient)(nil).SearchPublicChat), username)
}

// SearchPublicChats mocks base method.
func (m *MockClient) SearchPublicChats(query string) (*tdlib.Chats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPublicChats", query)
	ret0, _ := ret[0].(*tdlib.Chats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPublicChats indicates an expected call of SearchPublicChats.
func (mr *MockClientMockRecorder) SearchPublicChats(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPublicChats", reflect.TypeOf((*MockClient)(nil).SearchPublicChats), query)
}

// SearchSecretMessages mocks base method.
func (m *MockClient) SearchSecretMessages(chatID int64, query, offset string, limit int32, filter tdlib.SearchMessagesFilter) (*tdlib.FoundMessages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSecretMessages", chatID, query, offset, limit, filter)
	ret0, _ := ret[0].(*tdlib.FoundMessages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSecretMessages indicates an expected call of SearchSecretMessages.
func (mr *MockClientMockRecorder) SearchSecretMessages(chatID, query, offset, limit, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSecretMessages", reflect.TypeOf((*MockClient)(nil).SearchSecretMessages), chatID, query, offset, limit, filter)
}

// SearchStickerSet mocks base method.
func (m *MockClient) SearchStickerSet(name string) (*tdlib.StickerSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchStickerSet", name)
	ret0, _ := ret[0].(*tdlib.StickerSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchStickerSet indicates an expected call of SearchStickerSet.
func (mr *MockClientMockRecorder) SearchStickerSet(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStickerSet", reflect.TypeOf((*MockClient)(nil).SearchStickerSet), name)
}

// SearchStickerSets mocks base method.
func (m *MockClient) SearchStickerSets(query string) (*tdlib.StickerSets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchStickerSets", query)
	ret0, _ := ret[0].(*tdlib.StickerSets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchStickerSets indicates an expected call of SearchStickerSets.
func (mr *MockClientMockRecorder) SearchStickerSets(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStickerSets", reflect.TypeOf((*MockClient)(nil).SearchStickerSets), query)
}

// SearchStickers mocks base method.
func (m *MockClient) SearchStickers(emoji string, limit int32) (*tdlib.Stickers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchStickers", emoji, limit)
	ret0, _ := ret[0].(*tdlib.Stickers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchStickers indicates an expected call of SearchStickers.
func (mr *MockClientMockRecorder) SearchStickers(emoji, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStickers", reflect.TypeOf((*MockClient)(nil).SearchStickers), emoji, limit)
}

// SendAndCatch mocks base method.
func (m *MockClient) SendAndCatch(jsonQuery interface{}) (tdlib.UpdateMsg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndCatch", jsonQuery)
	ret0, _ := ret[0].(tdlib.UpdateMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAndCatch indicates an expected call of SendAndCatch.
func (mr *MockClientMockRecorder) SendAndCatch(jsonQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndCatch", reflect.TypeOf((*MockClient)(nil).SendAndCatch), jsonQuery)
}

// SendAuthCode mocks base method.
func (m *MockClient) SendAuthCode(code string) (tdlib.AuthorizationState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAuthCode", code)
	ret0, _ := ret[0].(tdlib.AuthorizationState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAuthCode indicates an expected call of SendAuthCode.
func (mr *MockClientMockRecorder) SendAuthCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAuthCode", reflect.TypeOf((*MockClient)(nil).SendAuthCode), code)
}

// SendAuthPassword mocks base method.
func (m *MockClient) SendAuthPassword(password string) (tdlib.AuthorizationState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAuthPassword", password)
	ret0, _ := ret[0].(tdlib.AuthorizationState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAuthPassword indicates an expected call of SendAuthPassword.
func (mr *MockClientMockRecorder) SendAuthPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAuthPassword", reflect.TypeOf((*MockClient)(nil).SendAuthPassword), password)
}

// SendBotStartMessage mocks base method.
func (m *MockClient) SendBotStartMessage(botUserID, chatID int64, parameter string) (*tdlib.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBotStartMessage", botUserID, chatID, parameter)
	ret0, _ := ret[0].(*tdlib.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendBotStartMessage indicates an expected call of SendBotStartMessage.
func (mr *MockClientMockRecorder) SendBotStartMessage(botUserID, chatID, parameter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBotStartMessage", reflect.TypeOf((*MockClient)(nil).SendBotStartMessage), botUserID, chatID, parameter)
}

// SendCallDebugInformation mocks base method.
func (m *MockClient) SendCallDebugInformation(callID int32, debugInformation string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCallDebugInformation", callID, debugInformation)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCallDebugInformation indicates an expected call of SendCallDebugInformation.
func (mr *MockClientMockRecorder) SendCallDebugInformation(callID, debugInformation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCallDebugInformation", reflect.TypeOf((*MockClient)(nil).SendCallDebugInformation), callID, debugInformation)
}

// SendCallRating mocks base method.
func (m *MockClient) SendCallRating(callID, rating int32, comment string, problems []tdlib.CallProblem) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCallRating", callID, rating, comment, problems)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCallRating indicates an expected call of SendCallRating.
func (mr *MockClientMockRecorder) SendCallRating(callID, rating, comment, problems interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCallRating", reflect.TypeOf((*MockClient)(nil).SendCallRating), callID, rating, comment, problems)
}

// SendCallSignalingData mocks base method.
func (m *MockClient) SendCallSignalingData(callID int32, data []byte) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCallSignalingData", callID, data)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCallSignalingData indicates an expected call of SendCallSignalingData.
func (mr *MockClientMockRecorder) SendCallSignalingData(callID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCallSignalingData", reflect.TypeOf((*MockClient)(nil).SendCallSignalingData), callID, data)
}

// SendChatAction mocks base method.
func (m *MockClient) SendChatAction(chatID, messageThreadID int64, action tdlib.ChatAction) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendChatAction", chatID, messageThreadID, action)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendChatAction indicates an expected call of SendChatAction.
func (mr *MockClientMockRecorder) SendChatAction(chatID, messageThreadID, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChatAction", reflect.TypeOf((*MockClient)(nil).SendChatAction), chatID, messageThreadID, action)
}

// SendChatScreenshotTakenNotification mocks base method.
func (m *MockClient) SendChatScreenshotTakenNotification(chatID int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendChatScreenshotTakenNotification", chatID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendChatScreenshotTakenNotification indicates an expected call of SendChatScreenshotTakenNotification.
func (mr *MockClientMockRecorder) SendChatScreenshotTakenNotification(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChatScreenshotTakenNotification", reflect.TypeOf((*MockClient)(nil).SendChatScreenshotTakenNotification), chatID)
}

// SendCustomRequest mocks base method.
func (m *MockClient) SendCustomRequest(method, parameters string) (*tdlib.CustomRequestResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCustomRequest", method, parameters)
	ret0, _ := ret[0].(*tdlib.CustomRequestResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCustomRequest indicates an expected call of SendCustomRequest.
func (mr *MockClientMockRecorder) SendCustomRequest(method, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCustomRequest", reflect.TypeOf((*MockClient)(nil).SendCustomRequest), method, parameters)
}

// SendEmailAddressVerificationCode mocks base method.
func (m *MockClient) SendEmailAddressVerificationCode(emailAddress string) (*tdlib.EmailAddressAuthenticationCodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailAddressVerificationCode", emailAddress)
	ret0, _ := ret[0].(*tdlib.EmailAddressAuthenticationCodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmailAddressVerificationCode indicates an expected call of SendEmailAddressVerificationCode.
func (mr *MockClientMockRecorder) SendEmailAddressVerificationCode(emailAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailAddressVerificationCode", reflect.TypeOf((*MockClient)(nil).SendEmailAddressVerificationCode), emailAddress)
}

// SendInlineQueryResultMessage mocks base method.
func (m *MockClient) SendInlineQueryResultMessage(chatID, messageThreadID, replyToMessageID int64, options *tdlib.MessageSendOptions, queryID *tdlib.JSONInt64, resultID string, hideViaBot bool) (*tdlib.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendInlineQueryResultMessage", chatID, messageThreadID, replyToMessageID, options, queryID, resultID, hideViaBot)
	ret0, _ := ret[0].(*tdlib.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendInlineQueryResultMessage indicates an expected call of SendInlineQueryResultMessage.
func (mr *MockClientMockRecorder) SendInlineQueryResultMessage(chatID, messageThreadID, replyToMessageID, options, queryID, resultID, hideViaBot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInlineQueryResultMessage", reflect.TypeOf((*MockClient)(nil).SendInlineQueryResultMessage), chatID, messageThreadID, replyToMessageID, options, queryID, resultID, hideViaBot)
}

// SendMessage mocks base method.
func (m *MockClient) SendMessage(chatID, messageThreadID, replyToMessageID int64, options *tdlib.MessageSendOptions, replyMarkup tdlib.ReplyMarkup, inputMessageContent tdlib.InputMessageContent) (*tdlib.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", chatID, messageThreadID, replyToMessageID, options, replyMarkup, inputMessageContent)
	ret0, _ := ret[0].(*tdlib.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockClientMockRecorder) SendMessage(chatID, messageThreadID, replyToMessageID, options, replyMarkup, inputMessageContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockClient)(nil).SendMessage), chatID, messageThreadID, replyToMessageID, options, replyMarkup, inputMessageContent)
}

// SendMessageAlbum mocks base method.
func (m *MockClient) SendMessageAlbum(chatID, messageThreadID, replyToMessageID int64, options *tdlib.MessageSendOptions, inputMessageContents []tdlib.InputMessageContent) (*tdlib.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageAlbum", chatID, messageThreadID, replyToMessageID, options, inputMessageContents)
	ret0, _ := ret[0].(*tdlib.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessageAlbum indicates an expected call of SendMessageAlbum.
func (mr *MockClientMockRecorder) SendMessageAlbum(chatID, messageThreadID, replyToMessageID, options, inputMessageContents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageAlbum", reflect.TypeOf((*MockClient)(nil).SendMessageAlbum), chatID, messageThreadID, replyToMessageID, options, inputMessageContents)
}

// SendPassportAuthorizationForm mocks base method.
func (m *MockClient) SendPassportAuthorizationForm(autorizationFormID int32, typeParams []tdlib.PassportElementType) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPassportAuthorizationForm", autorizationFormID, typeParams)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPassportAuthorizationForm indicates an expected call of SendPassportAuthorizationForm.
func (mr *MockClientMockRecorder) SendPassportAuthorizationForm(autorizationFormID, typeParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPassportAuthorizationForm", reflect.TypeOf((*MockClient)(nil).SendPassportAuthorizationForm), autorizationFormID, typeParams)
}

// SendPaymentForm mocks base method.
func (m *MockClient) SendPaymentForm(chatID, messageID int64, paymentFormID *tdlib.JSONInt64, orderInfoID, shippingOptionID string, credentials tdlib.InputCredentials, tipAmount int64) (*tdlib.PaymentResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPaymentForm", chatID, messageID, paymentFormID, orderInfoID, shippingOptionID, credentials, tipAmount)
	ret0, _ := ret[0].(*tdlib.PaymentResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPaymentForm indicates an expected call of SendPaymentForm.
func (mr *MockClientMockRecorder) SendPaymentForm(chatID, messageID, paymentFormID, orderInfoID, shippingOptionID, credentials, tipAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPaymentForm", reflect.TypeOf((*MockClient)(nil).SendPaymentForm), chatID, messageID, paymentFormID, orderInfoID, shippingOptionID, credentials, tipAmount)
}

// SendPhoneNumber mocks base method.
func (m *MockClient) SendPhoneNumber(phoneNumber string) (tdlib.AuthorizationState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPhoneNumber", phoneNumber)
	ret0, _ := ret[0].(tdlib.AuthorizationState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPhoneNumber indicates an expected call of SendPhoneNumber.
func (mr *MockClientMockRecorder) SendPhoneNumber(phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPhoneNumber", reflect.TypeOf((*MockClient)(nil).SendPhoneNumber), phoneNumber)
}

// SendPhoneNumberConfirmationCode mocks base method.
func (m *MockClient) SendPhoneNumberConfirmationCode(hash, phoneNumber string, settings *tdlib.PhoneNumberAuthenticationSettings) (*tdlib.AuthenticationCodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPhoneNumberConfirmationCode", hash, phoneNumber, settings)
	ret0, _ := ret[0].(*tdlib.AuthenticationCodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPhoneNumberConfirmationCode indicates an expected call of SendPhoneNumberConfirmationCode.
func (mr *MockClientMockRecorder) SendPhoneNumberConfirmationCode(hash, phoneNumber, settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPhoneNumberConfirmationCode", reflect.TypeOf((*MockClient)(nil).SendPhoneNumberConfirmationCode), hash, phoneNumber, settings)
}

// SendPhoneNumberVerificationCode mocks base method.
func (m *MockClient) SendPhoneNumberVerificationCode(phoneNumber string, settings *tdlib.PhoneNumberAuthenticationSettings) (*tdlib.AuthenticationCodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPhoneNumberVerificationCode", phoneNumber, settings)
	ret0, _ := ret[0].(*tdlib.AuthenticationCodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPhoneNumberVerificationCode indicates an expected call of SendPhoneNumberVerificationCode.
func (mr *MockClientMockRecorder) SendPhoneNumberVerificationCode(phoneNumber, settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPhoneNumberVerificationCode", reflect.TypeOf((*MockClient)(nil).SendPhoneNumberVerificationCode), phoneNumber, settings)
}

// SetAccountTTL mocks base method.
func (m *MockClient) SetAccountTTL(tTL *tdlib.AccountTTL) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccountTTL", tTL)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAccountTTL indicates an expected call of SetAccountTTL.
func (mr *MockClientMockRecorder) SetAccountTTL(tTL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountTTL", reflect.TypeOf((*MockClient)(nil).SetAccountTTL), tTL)
}

// SetAlarm mocks base method.
func (m *MockClient) SetAlarm(seconds float64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAlarm", seconds)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAlarm indicates an expected call of SetAlarm.
func (mr *MockClientMockRecorder) SetAlarm(seconds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAlarm", reflect.TypeOf((*MockClient)(nil).SetAlarm), seconds)
}

// SetAuthenticationPhoneNumber mocks base method.
func (m *MockClient) SetAuthenticationPhoneNumber(phoneNumber string, settings *tdlib.PhoneNumberAuthenticationSettings) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAuthenticationPhoneNumber", phoneNumber, settings)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAuthenticationPhoneNumber indicates an expected call of SetAuthenticationPhoneNumber.
func (mr *MockClientMockRecorder) SetAuthenticationPhoneNumber(phoneNumber, settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthenticationPhoneNumber", reflect.TypeOf((*MockClient)(nil).SetAuthenticationPhoneNumber), phoneNumber, settings)
}

// SetAutoDownloadSettings mocks base method.
func (m *MockClient) SetAutoDownloadSettings(settings *tdlib.AutoDownloadSettings, typeParam tdlib.NetworkType) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAutoDownloadSettings", settings, typeParam)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAutoDownloadSettings indicates an expected call of SetAutoDownloadSettings.
func (mr *MockClientMockRecorder) SetAutoDownloadSettings(settings, typeParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAutoDownloadSettings", reflect.TypeOf((*MockClient)(nil).SetAutoDownloadSettings), settings, typeParam)
}

// SetBackground mocks base method.
func (m *MockClient) SetBackground(background tdlib.InputBackground, typeParam tdlib.BackgroundType, forDarkTheme bool) (*tdlib.Background, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBackground", background, typeParam, forDarkTheme)
	ret0, _ := ret[0].(*tdlib.Background)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBackground indicates an expected call of SetBackground.
func (mr *MockClientMockRecorder) SetBackground(background, typeParam, forDarkTheme interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBackground", reflect.TypeOf((*MockClient)(nil).SetBackground), background, typeParam, forDarkTheme)
}

// SetBio mocks base method.
func (m *MockClient) SetBio(bio string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBio", bio)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBio indicates an expected call of SetBio.
func (mr *MockClientMockRecorder) SetBio(bio interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBio", reflect.TypeOf((*MockClient)(nil).SetBio), bio)
}

// SetBotUpdatesStatus mocks base method.
func (m *MockClient) SetBotUpdatesStatus(pendingUpdateCount int32, errParamMessage string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBotUpdatesStatus", pendingUpdateCount, errParamMessage)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBotUpdatesStatus indicates an expected call of SetBotUpdatesStatus.
func (mr *MockClientMockRecorder) SetBotUpdatesStatus(pendingUpdateCount, errParamMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBotUpdatesStatus", reflect.TypeOf((*MockClient)(nil).SetBotUpdatesStatus), pendingUpdateCount, errParamMessage)
}

// SetChatClientData mocks base method.
func (m *MockClient) SetChatClientData(chatID int64, clientData string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChatClientData", chatID, clientData)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChatClientData indicates an expected call of SetChatClientData.
func (mr *MockClientMockRecorder) SetChatClientData(chatID, clientData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChatClientData", reflect.TypeOf((*MockClient)(nil).SetChatClientData), chatID, clientData)
}

// SetChatDescription mocks base method.
func (m *MockClient) SetChatDescription(chatID int64, description string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChatDescription", chatID, description)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChatDescription indicates an expected call of SetChatDescription.
func (mr *MockClientMockRecorder) SetChatDescription(chatID, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChatDescription", reflect.TypeOf((*MockClient)(nil).SetChatDescription), chatID, description)
}

// SetChatDiscussionGroup mocks base method.
func (m *MockClient) SetChatDiscussionGroup(chatID, discussionChatID int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChatDiscussionGroup", chatID, discussionChatID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChatDiscussionGroup indicates an expected call of SetChatDiscussionGroup.
func (mr *MockClientMockRecorder) SetChatDiscussionGroup(chatID, discussionChatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChatDiscussionGroup", reflect.TypeOf((*MockClient)(nil).SetChatDiscussionGroup), chatID, discussionChatID)
}

// SetChatDraftMessage mocks base method.
func (m *MockClient) SetChatDraftMessage(chatID, messageThreadID int64, draftMessage *tdlib.DraftMessage) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChatDraftMessage", chatID, messageThreadID, draftMessage)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChatDraftMessage indicates an expected call of SetChatDraftMessage.
func (mr *MockClientMockRecorder) SetChatDraftMessage(chatID, messageThreadID, draftMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChatDraftMessage", reflect.TypeOf((*MockClient)(nil).SetChatDraftMessage), chatID, messageThreadID, draftMessage)
}

// SetChatLocation mocks base method.
func (m *MockClient) SetChatLocation(chatID int64, location *tdlib.ChatLocation) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChatLocation", chatID, location)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChatLocation indicates an expected call of SetChatLocation.
func (mr *MockClientMockRecorder) SetChatLocation(chatID, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChatLocation", reflect.TypeOf((*MockClient)(nil).SetChatLocation), chatID, location)
}

// SetChatMemberStatus mocks base method.
func (m *MockClient) SetChatMemberStatus(chatID int64, memberID tdlib.MessageSender, status tdlib.ChatMemberStatus) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChatMemberStatus", chatID, memberID, status)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChatMemberStatus indicates an expected call of SetChatMemberStatus.
func (mr *MockClientMockRecorder) SetChatMemberStatus(chatID, memberID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChatMemberStatus", reflect.TypeOf((*MockClient)(nil).SetChatMemberStatus), chatID, memberID, status)
}

// SetChatMessageSender mocks base method.
func (m *MockClient) SetChatMessageSender(chatID int64, messageSenderID tdlib.MessageSender) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChatMessageSender", chatID, messageSenderID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChatMessageSender indicates an expected call of SetChatMessageSender.
func (mr *MockClientMockRecorder) SetChatMessageSender(chatID, messageSenderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChatMessageSender", reflect.TypeOf((*MockClient)(nil).SetChatMessageSender), chatID, messageSenderID)
}

// SetChatMessageTTL mocks base method.
func (m *MockClient) SetChatMessageTTL(chatID int64, tTL int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChatMessageTTL", chatID, tTL)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChatMessageTTL indicates an expected call of SetChatMessageTTL.
func (mr *MockClientMockRecorder) SetChatMessageTTL(chatID, tTL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChatMessageTTL", reflect.TypeOf((*MockClient)(nil).SetChatMessageTTL), chatID, tTL)
}

// SetChatNotificationSettings mocks base method.
func (m *MockClient) SetChatNotificationSettings(chatID int64, notificationSettings *tdlib.ChatNotificationSettings) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChatNotificationSettings", chatID, notificationSettings)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChatNotificationSettings indicates an expected call of SetChatNotificationSettings.
func (mr *MockClientMockRecorder) SetChatNotificationSettings(chatID, notificationSettings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChatNotificationSettings", reflect.TypeOf((*MockClient)(nil).SetChatNotificationSettings), chatID, notificationSettings)
}

// SetChatPermissions mocks base method.
func (m *MockClient) SetChatPermissions(chatID int64, permissions *tdlib.ChatPermissions) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChatPermissions", chatID, permissions)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChatPermissions indicates an expected call of SetChatPermissions.
func (mr *MockClientMockRecorder) SetChatPermissions(chatID, permissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChatPermissions", reflect.TypeOf((*MockClient)(nil).SetChatPermissions), chatID, permissions)
}

// SetChatPhoto mocks base method.
func (m *MockClient) SetChatPhoto(chatID int64, photo tdlib.InputChatPhoto) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChatPhoto", chatID, photo)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChatPhoto indicates an expected call of SetChatPhoto.
func (mr *MockClientMockRecorder) SetChatPhoto(chatID, photo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChatPhoto", reflect.TypeOf((*MockClient)(nil).SetChatPhoto), chatID, photo)
}

// SetChatSlowModeDelay mocks base method.
func (m *MockClient) SetChatSlowModeDelay(chatID int64, slowModeDelay int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChatSlowModeDelay", chatID, slowModeDelay)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChatSlowModeDelay indicates an expected call of SetChatSlowModeDelay.
func (mr *MockClientMockRecorder) SetChatSlowModeDelay(chatID, slowModeDelay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChatSlowModeDelay", reflect.TypeOf((*MockClient)(nil).SetChatSlowModeDelay), chatID, slowModeDelay)
}

// SetChatTheme mocks base method.
func (m *MockClient) SetChatTheme(chatID int64, themeName string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChatTheme", chatID, themeName)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChatTheme indicates an expected call of SetChatTheme.
func (mr *MockClientMockRecorder) SetChatTheme(chatID, themeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChatTheme", reflect.TypeOf((*MockClient)(nil).SetChatTheme), chatID, themeName)
}

// SetChatTitle mocks base method.
func (m *MockClient) SetChatTitle(chatID int64, title string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChatTitle", chatID, title)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChatTitle indicates an expected call of SetChatTitle.
func (mr *MockClientMockRecorder) SetChatTitle(chatID, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChatTitle", reflect.TypeOf((*MockClient)(nil).SetChatTitle), chatID, title)
}

// SetCommands mocks base method.
func (m *MockClient) SetCommands(scope tdlib.BotCommandScope, languageCode string, commands []tdlib.BotCommand) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCommands", scope, languageCode, commands)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCommands indicates an expected call of SetCommands.
func (mr *MockClientMockRecorder) SetCommands(scope, languageCode, commands interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommands", reflect.TypeOf((*MockClient)(nil).SetCommands), scope, languageCode, commands)
}

// SetCustomLanguagePack mocks base method.
func (m *MockClient) SetCustomLanguagePack(info *tdlib.LanguagePackInfo, strings []tdlib.LanguagePackString) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCustomLanguagePack", info, strings)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCustomLanguagePack indicates an expected call of SetCustomLanguagePack.
func (mr *MockClientMockRecorder) SetCustomLanguagePack(info, strings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCustomLanguagePack", reflect.TypeOf((*MockClient)(nil).SetCustomLanguagePack), info, strings)
}

// SetCustomLanguagePackString mocks base method.
func (m *MockClient) SetCustomLanguagePackString(languagePackID string, newString *tdlib.LanguagePackString) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCustomLanguagePackString", languagePackID, newString)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCustomLanguagePackString indicates an expected call of SetCustomLanguagePackString.
func (mr *MockClientMockRecorder) SetCustomLanguagePackString(languagePackID, newString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCustomLanguagePackString", reflect.TypeOf((*MockClient)(nil).SetCustomLanguagePackString), languagePackID, newString)
}

// SetDatabaseEncryptionKey mocks base method.
func (m *MockClient) SetDatabaseEncryptionKey(newEncryptionKey []byte) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDatabaseEncryptionKey", newEncryptionKey)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDatabaseEncryptionKey indicates an expected call of SetDatabaseEncryptionKey.
func (mr *MockClientMockRecorder) SetDatabaseEncryptionKey(newEncryptionKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDatabaseEncryptionKey", reflect.TypeOf((*MockClient)(nil).SetDatabaseEncryptionKey), newEncryptionKey)
}

// SetFileGenerationProgress mocks base method.
func (m *MockClient) SetFileGenerationProgress(generationID *tdlib.JSONInt64, expectedSize, localPrefixSize int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFileGenerationProgress", generationID, expectedSize, localPrefixSize)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetFileGenerationProgress indicates an expected call of SetFileGenerationProgress.
func (mr *MockClientMockRecorder) SetFileGenerationProgress(generationID, expectedSize, localPrefixSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFileGenerationProgress", reflect.TypeOf((*MockClient)(nil).SetFileGenerationProgress), generationID, expectedSize, localPrefixSize)
}

// SetGameScore mocks base method.
func (m *MockClient) SetGameScore(chatID, messageID int64, editMessage bool, userID int64, score int32, force bool) (*tdlib.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGameScore", chatID, messageID, editMessage, userID, score, force)
	ret0, _ := ret[0].(*tdlib.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGameScore indicates an expected call of SetGameScore.
func (mr *MockClientMockRecorder) SetGameScore(chatID, messageID, editMessage, userID, score, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGameScore", reflect.TypeOf((*MockClient)(nil).SetGameScore), chatID, messageID, editMessage, userID, score, force)
}

// SetGroupCallParticipantIsSpeaking mocks base method.
func (m *MockClient) SetGroupCallParticipantIsSpeaking(groupCallID, audioSource int32, isSpeaking bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGroupCallParticipantIsSpeaking", groupCallID, audioSource, isSpeaking)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGroupCallParticipantIsSpeaking indicates an expected call of SetGroupCallParticipantIsSpeaking.
func (mr *MockClientMockRecorder) SetGroupCallParticipantIsSpeaking(groupCallID, audioSource, isSpeaking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGroupCallParticipantIsSpeaking", reflect.TypeOf((*MockClient)(nil).SetGroupCallParticipantIsSpeaking), groupCallID, audioSource, isSpeaking)
}

// SetGroupCallParticipantVolumeLevel mocks base method.
func (m *MockClient) SetGroupCallParticipantVolumeLevel(groupCallID int32, participantID tdlib.MessageSender, volumeLevel int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGroupCallParticipantVolumeLevel", groupCallID, participantID, volumeLevel)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGroupCallParticipantVolumeLevel indicates an expected call of SetGroupCallParticipantVolumeLevel.
func (mr *MockClientMockRecorder) SetGroupCallParticipantVolumeLevel(groupCallID, participantID, volumeLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGroupCallParticipantVolumeLevel", reflect.TypeOf((*MockClient)(nil).SetGroupCallParticipantVolumeLevel), groupCallID, participantID, volumeLevel)
}

// SetGroupCallTitle mocks base method.
func (m *MockClient) SetGroupCallTitle(groupCallID int32, title string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGroupCallTitle", groupCallID, title)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGroupCallTitle indicates an expected call of SetGroupCallTitle.
func (mr *MockClientMockRecorder) SetGroupCallTitle(groupCallID, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGroupCallTitle", reflect.TypeOf((*MockClient)(nil).SetGroupCallTitle), groupCallID, title)
}

// SetInactiveSessionTTL mocks base method.
func (m *MockClient) SetInactiveSessionTTL(inactiveSessionTTLDays int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInactiveSessionTTL", inactiveSessionTTLDays)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetInactiveSessionTTL indicates an expected call of SetInactiveSessionTTL.
func (mr *MockClientMockRecorder) SetInactiveSessionTTL(inactiveSessionTTLDays interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInactiveSessionTTL", reflect.TypeOf((*MockClient)(nil).SetInactiveSessionTTL), inactiveSessionTTLDays)
}

// SetInlineGameScore mocks base method.
func (m *MockClient) SetInlineGameScore(inlineMessageID string, editMessage bool, userID int64, score int32, force bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInlineGameScore", inlineMessageID, editMessage, userID, score, force)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetInlineGameScore indicates an expected call of SetInlineGameScore.
func (mr *MockClientMockRecorder) SetInlineGameScore(inlineMessageID, editMessage, userID, score, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInlineGameScore", reflect.TypeOf((*MockClient)(nil).SetInlineGameScore), inlineMessageID, editMessage, userID, score, force)
}

// SetLocation mocks base method.
func (m *MockClient) SetLocation(location *tdlib.Location) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLocation", location)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLocation indicates an expected call of SetLocation.
func (mr *MockClientMockRecorder) SetLocation(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLocation", reflect.TypeOf((*MockClient)(nil).SetLocation), location)
}

// SetLogStream mocks base method.
func (m *MockClient) SetLogStream(logStream tdlib.LogStream) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLogStream", logStream)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLogStream indicates an expected call of SetLogStream.
func (mr *MockClientMockRecorder) SetLogStream(logStream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogStream", reflect.TypeOf((*MockClient)(nil).SetLogStream), logStream)
}

// SetLogTagVerbosityLevel mocks base method.
func (m *MockClient) SetLogTagVerbosityLevel(tag string, newVerbosityLevel int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLogTagVerbosityLevel", tag, newVerbosityLevel)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLogTagVerbosityLevel indicates an expected call of SetLogTagVerbosityLevel.
func (mr *MockClientMockRecorder) SetLogTagVerbosityLevel(tag, newVerbosityLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogTagVerbosityLevel", reflect.TypeOf((*MockClient)(nil).SetLogTagVerbosityLevel), tag, newVerbosityLevel)
}

// SetLogVerbosityLevel mocks base method.
func (m *MockClient) SetLogVerbosityLevel(newVerbosityLevel int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLogVerbosityLevel", newVerbosityLevel)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLogVerbosityLevel indicates an expected call of SetLogVerbosityLevel.
func (mr *MockClientMockRecorder) SetLogVerbosityLevel(newVerbosityLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogVerbosityLevel", reflect.TypeOf((*MockClient)(nil).SetLogVerbosityLevel), newVerbosityLevel)
}

// SetName mocks base method.
func (m *MockClient) SetName(firstName, lastName string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetName", firstName, lastName)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetName indicates an expected call of SetName.
func (mr *MockClientMockRecorder) SetName(firstName, lastName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockClient)(nil).SetName), firstName, lastName)
}

// SetNetworkType mocks base method.
func (m *MockClient) SetNetworkType(typeParam tdlib.NetworkType) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNetworkType", typeParam)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNetworkType indicates an expected call of SetNetworkType.
func (mr *MockClientMockRecorder) SetNetworkType(typeParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNetworkType", reflect.TypeOf((*MockClient)(nil).SetNetworkType), typeParam)
}

// SetOption mocks base method.
func (m *MockClient) SetOption(name string, value tdlib.OptionValue) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOption", name, value)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetOption indicates an expected call of SetOption.
func (mr *MockClientMockRecorder) SetOption(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOption", reflect.TypeOf((*MockClient)(nil).SetOption), name, value)
}

// SetPassportElement mocks base method.
func (m *MockClient) SetPassportElement(element tdlib.InputPassportElement, password string) (tdlib.PassportElement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPassportElement", element, password)
	ret0, _ := ret[0].(tdlib.PassportElement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPassportElement indicates an expected call of SetPassportElement.
func (mr *MockClientMockRecorder) SetPassportElement(element, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPassportElement", reflect.TypeOf((*MockClient)(nil).SetPassportElement), element, password)
}

// SetPassportElementErrors mocks base method.
func (m *MockClient) SetPassportElementErrors(userID int64, errParams []tdlib.InputPassportElementError) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPassportElementErrors", userID, errParams)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPassportElementErrors indicates an expected call of SetPassportElementErrors.
func (mr *MockClientMockRecorder) SetPassportElementErrors(userID, errParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPassportElementErrors", reflect.TypeOf((*MockClient)(nil).SetPassportElementErrors), userID, errParams)
}

// SetPassword mocks base method.
func (m *MockClient) SetPassword(oldPassword, newPassword, newHint string, setRecoveryEmailAddress bool, newRecoveryEmailAddress string) (*tdlib.PasswordState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPassword", oldPassword, newPassword, newHint, setRecoveryEmailAddress, newRecoveryEmailAddress)
	ret0, _ := ret[0].(*tdlib.PasswordState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPassword indicates an expected call of SetPassword.
func (mr *MockClientMockRecorder) SetPassword(oldPassword, newPassword, newHint, setRecoveryEmailAddress, newRecoveryEmailAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPassword", reflect.TypeOf((*MockClient)(nil).SetPassword), oldPassword, newPassword, newHint, setRecoveryEmailAddress, newRecoveryEmailAddress)
}

// SetPinnedChats mocks base method.
func (m *MockClient) SetPinnedChats(chatList tdlib.ChatList, chatIDs []int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPinnedChats", chatList, chatIDs)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPinnedChats indicates an expected call of SetPinnedChats.
func (mr *MockClientMockRecorder) SetPinnedChats(chatList, chatIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPinnedChats", reflect.TypeOf((*MockClient)(nil).SetPinnedChats), chatList, chatIDs)
}

// SetPollAnswer mocks base method.
func (m *MockClient) SetPollAnswer(chatID, messageID int64, optionIDs []int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPollAnswer", chatID, messageID, optionIDs)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPollAnswer indicates an expected call of SetPollAnswer.
func (mr *MockClientMockRecorder) SetPollAnswer(chatID, messageID, optionIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPollAnswer", reflect.TypeOf((*MockClient)(nil).SetPollAnswer), chatID, messageID, optionIDs)
}

// SetProfilePhoto mocks base method.
func (m *MockClient) SetProfilePhoto(photo tdlib.InputChatPhoto) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProfilePhoto", photo)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetProfilePhoto indicates an expected call of SetProfilePhoto.
func (mr *MockClientMockRecorder) SetProfilePhoto(photo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProfilePhoto", reflect.TypeOf((*MockClient)(nil).SetProfilePhoto), photo)
}

// SetRecoveryEmailAddress mocks base method.
func (m *MockClient) SetRecoveryEmailAddress(password, newRecoveryEmailAddress string) (*tdlib.PasswordState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRecoveryEmailAddress", password, newRecoveryEmailAddress)
	ret0, _ := ret[0].(*tdlib.PasswordState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRecoveryEmailAddress indicates an expected call of SetRecoveryEmailAddress.
func (mr *MockClientMockRecorder) SetRecoveryEmailAddress(password, newRecoveryEmailAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRecoveryEmailAddress", reflect.TypeOf((*MockClient)(nil).SetRecoveryEmailAddress), password, newRecoveryEmailAddress)
}

// SetScopeNotificationSettings mocks base method.
func (m *MockClient) SetScopeNotificationSettings(scope tdlib.NotificationSettingsScope, notificationSettings *tdlib.ScopeNotificationSettings) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetScopeNotificationSettings", scope, notificationSettings)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetScopeNotificationSettings indicates an expected call of SetScopeNotificationSettings.
func (mr *MockClientMockRecorder) SetScopeNotificationSettings(scope, notificationSettings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetScopeNotificationSettings", reflect.TypeOf((*MockClient)(nil).SetScopeNotificationSettings), scope, notificationSettings)
}

// SetStickerPositionInSet mocks base method.
func (m *MockClient) SetStickerPositionInSet(sticker tdlib.InputFile, position int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStickerPositionInSet", sticker, position)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStickerPositionInSet indicates an expected call of SetStickerPositionInSet.
func (mr *MockClientMockRecorder) SetStickerPositionInSet(sticker, position interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStickerPositionInSet", reflect.TypeOf((*MockClient)(nil).SetStickerPositionInSet), sticker, position)
}

// SetStickerSetThumbnail mocks base method.
func (m *MockClient) SetStickerSetThumbnail(userID int64, name string, thumbnail tdlib.InputFile) (*tdlib.StickerSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStickerSetThumbnail", userID, name, thumbnail)
	ret0, _ := ret[0].(*tdlib.StickerSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStickerSetThumbnail indicates an expected call of SetStickerSetThumbnail.
func (mr *MockClientMockRecorder) SetStickerSetThumbnail(userID, name, thumbnail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStickerSetThumbnail", reflect.TypeOf((*MockClient)(nil).SetStickerSetThumbnail), userID, name, thumbnail)
}

// SetSupergroupStickerSet mocks base method.
func (m *MockClient) SetSupergroupStickerSet(supergroupID int64, stickerSetID *tdlib.JSONInt64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSupergroupStickerSet", supergroupID, stickerSetID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSupergroupStickerSet indicates an expected call of SetSupergroupStickerSet.
func (mr *MockClientMockRecorder) SetSupergroupStickerSet(supergroupID, stickerSetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSupergroupStickerSet", reflect.TypeOf((*MockClient)(nil).SetSupergroupStickerSet), supergroupID, stickerSetID)
}

// SetSupergroupUsername mocks base method.
func (m *MockClient) SetSupergroupUsername(supergroupID int64, username string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSupergroupUsername", supergroupID, username)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSupergroupUsername indicates an expected call of SetSupergroupUsername.
func (mr *MockClientMockRecorder) SetSupergroupUsername(supergroupID, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSupergroupUsername", reflect.TypeOf((*MockClient)(nil).SetSupergroupUsername), supergroupID, username)
}

// SetTdlibParameters mocks base method.
func (m *MockClient) SetTdlibParameters(parameters *tdlib.TdlibParameters) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTdlibParameters", parameters)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTdlibParameters indicates an expected call of SetTdlibParameters.
func (mr *MockClientMockRecorder) SetTdlibParameters(parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTdlibParameters", reflect.TypeOf((*MockClient)(nil).SetTdlibParameters), parameters)
}

// SetUserPrivacySettingRules mocks base method.
func (m *MockClient) SetUserPrivacySettingRules(setting tdlib.UserPrivacySetting, rules *tdlib.UserPrivacySettingRules) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserPrivacySettingRules", setting, rules)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserPrivacySettingRules indicates an expected call of SetUserPrivacySettingRules.
func (mr *MockClientMockRecorder) SetUserPrivacySettingRules(setting, rules interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserPrivacySettingRules", reflect.TypeOf((*MockClient)(nil).SetUserPrivacySettingRules), setting, rules)
}

// SetUsername mocks base method.
func (m *MockClient) SetUsername(username string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUsername", username)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUsername indicates an expected call of SetUsername.
func (mr *MockClientMockRecorder) SetUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUsername", reflect.TypeOf((*MockClient)(nil).SetUsername), username)
}

// SetVideoChatDefaultParticipant mocks base method.
func (m *MockClient) SetVideoChatDefaultParticipant(chatID int64, defaultParticipantID tdlib.MessageSender) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVideoChatDefaultParticipant", chatID, defaultParticipantID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetVideoChatDefaultParticipant indicates an expected call of SetVideoChatDefaultParticipant.
func (mr *MockClientMockRecorder) SetVideoChatDefaultParticipant(chatID, defaultParticipantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVideoChatDefaultParticipant", reflect.TypeOf((*MockClient)(nil).SetVideoChatDefaultParticipant), chatID, defaultParticipantID)
}

// SharePhoneNumber mocks base method.
func (m *MockClient) SharePhoneNumber(userID int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SharePhoneNumber", userID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SharePhoneNumber indicates an expected call of SharePhoneNumber.
func (mr *MockClientMockRecorder) SharePhoneNumber(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SharePhoneNumber", reflect.TypeOf((*MockClient)(nil).SharePhoneNumber), userID)
}

// StartGroupCallRecording mocks base method.
func (m *MockClient) StartGroupCallRecording(groupCallID int32, title string, recordVideo, usePortraitOrientation bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartGroupCallRecording", groupCallID, title, recordVideo, usePortraitOrientation)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartGroupCallRecording indicates an expected call of StartGroupCallRecording.
func (mr *MockClientMockRecorder) StartGroupCallRecording(groupCallID, title, recordVideo, usePortraitOrientation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartGroupCallRecording", reflect.TypeOf((*MockClient)(nil).StartGroupCallRecording), groupCallID, title, recordVideo, usePortraitOrientation)
}

// StartGroupCallScreenSharing mocks base method.
func (m *MockClient) StartGroupCallScreenSharing(groupCallID, audioSourceID int32, payload string) (*tdlib.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartGroupCallScreenSharing", groupCallID, audioSourceID, payload)
	ret0, _ := ret[0].(*tdlib.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartGroupCallScreenSharing indicates an expected call of StartGroupCallScreenSharing.
func (mr *MockClientMockRecorder) StartGroupCallScreenSharing(groupCallID, audioSourceID, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartGroupCallScreenSharing", reflect.TypeOf((*MockClient)(nil).StartGroupCallScreenSharing), groupCallID, audioSourceID, payload)
}

// StartScheduledGroupCall mocks base method.
func (m *MockClient) StartScheduledGroupCall(groupCallID int32) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartScheduledGroupCall", groupCallID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartScheduledGroupCall indicates an expected call of StartScheduledGroupCall.
func (mr *MockClientMockRecorder) StartScheduledGroupCall(groupCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartScheduledGroupCall", reflect.TypeOf((*MockClient)(nil).StartScheduledGroupCall), groupCallID)
}

// StopPoll mocks base method.
func (m *MockClient) StopPoll(chatID, messageID int64, replyMarkup tdlib.ReplyMarkup) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopPoll", chatID, messageID, replyMarkup)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopPoll indicates an expected call of StopPoll.
func (mr *MockClientMockRecorder) StopPoll(chatID, messageID, replyMarkup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPoll", reflect.TypeOf((*MockClient)(nil).StopPoll), chatID, messageID, replyMarkup)
}

// SynchronizeLanguagePack mocks base method.
func (m *MockClient) SynchronizeLanguagePack(languagePackID string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SynchronizeLanguagePack", languagePackID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SynchronizeLanguagePack indicates an expected call of SynchronizeLanguagePack.
func (mr *MockClientMockRecorder) SynchronizeLanguagePack(languagePackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynchronizeLanguagePack", reflect.TypeOf((*MockClient)(nil).SynchronizeLanguagePack), languagePackID)
}

// TerminateAllOtherSessions mocks base method.
func (m *MockClient) TerminateAllOtherSessions() (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateAllOtherSessions")
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateAllOtherSessions indicates an expected call of TerminateAllOtherSessions.
func (mr *MockClientMockRecorder) TerminateAllOtherSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateAllOtherSessions", reflect.TypeOf((*MockClient)(nil).TerminateAllOtherSessions))
}

// TerminateSession mocks base method.
func (m *MockClient) TerminateSession(sessionID *tdlib.JSONInt64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateSession", sessionID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateSession indicates an expected call of TerminateSession.
func (mr *MockClientMockRecorder) TerminateSession(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateSession", reflect.TypeOf((*MockClient)(nil).TerminateSession), sessionID)
}

// TestCallBytes mocks base method.
func (m *MockClient) TestCallBytes(x []byte) (*tdlib.TestBytes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestCallBytes", x)
	ret0, _ := ret[0].(*tdlib.TestBytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestCallBytes indicates an expected call of TestCallBytes.
func (mr *MockClientMockRecorder) TestCallBytes(x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestCallBytes", reflect.TypeOf((*MockClient)(nil).TestCallBytes), x)
}

// TestCallEmpty mocks base method.
func (m *MockClient) TestCallEmpty() (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestCallEmpty")
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestCallEmpty indicates an expected call of TestCallEmpty.
func (mr *MockClientMockRecorder) TestCallEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestCallEmpty", reflect.TypeOf((*MockClient)(nil).TestCallEmpty))
}

// TestCallString mocks base method.
func (m *MockClient) TestCallString(x string) (*tdlib.TestString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestCallString", x)
	ret0, _ := ret[0].(*tdlib.TestString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestCallString indicates an expected call of TestCallString.
func (mr *MockClientMockRecorder) TestCallString(x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestCallString", reflect.TypeOf((*MockClient)(nil).TestCallString), x)
}

// TestCallVectorInt mocks base method.
func (m *MockClient) TestCallVectorInt(x []int32) (*tdlib.TestVectorInt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestCallVectorInt", x)
	ret0, _ := ret[0].(*tdlib.TestVectorInt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestCallVectorInt indicates an expected call of TestCallVectorInt.
func (mr *MockClientMockRecorder) TestCallVectorInt(x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestCallVectorInt", reflect.TypeOf((*MockClient)(nil).TestCallVectorInt), x)
}

// TestCallVectorIntObject mocks base method.
func (m *MockClient) TestCallVectorIntObject(x []tdlib.TestInt) (*tdlib.TestVectorIntObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestCallVectorIntObject", x)
	ret0, _ := ret[0].(*tdlib.TestVectorIntObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestCallVectorIntObject indicates an expected call of TestCallVectorIntObject.
func (mr *MockClientMockRecorder) TestCallVectorIntObject(x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestCallVectorIntObject", reflect.TypeOf((*MockClient)(nil).TestCallVectorIntObject), x)
}

// TestCallVectorString mocks base method.
func (m *MockClient) TestCallVectorString(x []string) (*tdlib.TestVectorString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestCallVectorString", x)
	ret0, _ := ret[0].(*tdlib.TestVectorString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestCallVectorString indicates an expected call of TestCallVectorString.
func (mr *MockClientMockRecorder) TestCallVectorString(x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestCallVectorString", reflect.TypeOf((*MockClient)(nil).TestCallVectorString), x)
}

// TestCallVectorStringObject mocks base method.
func (m *MockClient) TestCallVectorStringObject(x []tdlib.TestString) (*tdlib.TestVectorStringObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestCallVectorStringObject", x)
	ret0, _ := ret[0].(*tdlib.TestVectorStringObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestCallVectorStringObject indicates an expected call of TestCallVectorStringObject.
func (mr *MockClientMockRecorder) TestCallVectorStringObject(x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestCallVectorStringObject", reflect.TypeOf((*MockClient)(nil).TestCallVectorStringObject), x)
}

// TestGetDifference mocks base method.
func (m *MockClient) TestGetDifference() (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestGetDifference")
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestGetDifference indicates an expected call of TestGetDifference.
func (mr *MockClientMockRecorder) TestGetDifference() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestGetDifference", reflect.TypeOf((*MockClient)(nil).TestGetDifference))
}

// TestNetwork mocks base method.
func (m *MockClient) TestNetwork() (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestNetwork")
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestNetwork indicates an expected call of TestNetwork.
func (mr *MockClientMockRecorder) TestNetwork() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestNetwork", reflect.TypeOf((*MockClient)(nil).TestNetwork))
}

// TestProxy mocks base method.
func (m *MockClient) TestProxy(server string, port int32, typeParam tdlib.ProxyType, dcID int32, timeout float64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestProxy", server, port, typeParam, dcID, timeout)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestProxy indicates an expected call of TestProxy.
func (mr *MockClientMockRecorder) TestProxy(server, port, typeParam, dcID, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestProxy", reflect.TypeOf((*MockClient)(nil).TestProxy), server, port, typeParam, dcID, timeout)
}

// TestReturnError mocks base method.
func (m *MockClient) TestReturnError(errParam *tdlib.Error) (*tdlib.Error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestReturnError", errParam)
	ret0, _ := ret[0].(*tdlib.Error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestReturnError indicates an expected call of TestReturnError.
func (mr *MockClientMockRecorder) TestReturnError(errParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestReturnError", reflect.TypeOf((*MockClient)(nil).TestReturnError), errParam)
}

// TestSquareInt mocks base method.
func (m *MockClient) TestSquareInt(x int32) (*tdlib.TestInt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestSquareInt", x)
	ret0, _ := ret[0].(*tdlib.TestInt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestSquareInt indicates an expected call of TestSquareInt.
func (mr *MockClientMockRecorder) TestSquareInt(x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestSquareInt", reflect.TypeOf((*MockClient)(nil).TestSquareInt), x)
}

// TestUseUpdate mocks base method.
func (m *MockClient) TestUseUpdate() (tdlib.Update, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestUseUpdate")
	ret0, _ := ret[0].(tdlib.Update)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestUseUpdate indicates an expected call of TestUseUpdate.
func (mr *MockClientMockRecorder) TestUseUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestUseUpdate", reflect.TypeOf((*MockClient)(nil).TestUseUpdate))
}

// ToggleChatDefaultDisableNotification mocks base method.
func (m *MockClient) ToggleChatDefaultDisableNotification(chatID int64, defaultDisableNotification bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleChatDefaultDisableNotification", chatID, defaultDisableNotification)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleChatDefaultDisableNotification indicates an expected call of ToggleChatDefaultDisableNotification.
func (mr *MockClientMockRecorder) ToggleChatDefaultDisableNotification(chatID, defaultDisableNotification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleChatDefaultDisableNotification", reflect.TypeOf((*MockClient)(nil).ToggleChatDefaultDisableNotification), chatID, defaultDisableNotification)
}

// ToggleChatHasProtectedContent mocks base method.
func (m *MockClient) ToggleChatHasProtectedContent(chatID int64, hasProtectedContent bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleChatHasProtectedContent", chatID, hasProtectedContent)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleChatHasProtectedContent indicates an expected call of ToggleChatHasProtectedContent.
func (mr *MockClientMockRecorder) ToggleChatHasProtectedContent(chatID, hasProtectedContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleChatHasProtectedContent", reflect.TypeOf((*MockClient)(nil).ToggleChatHasProtectedContent), chatID, hasProtectedContent)
}

// ToggleChatIsMarkedAsUnread mocks base method.
func (m *MockClient) ToggleChatIsMarkedAsUnread(chatID int64, isMarkedAsUnread bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleChatIsMarkedAsUnread", chatID, isMarkedAsUnread)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleChatIsMarkedAsUnread indicates an expected call of ToggleChatIsMarkedAsUnread.
func (mr *MockClientMockRecorder) ToggleChatIsMarkedAsUnread(chatID, isMarkedAsUnread interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleChatIsMarkedAsUnread", reflect.TypeOf((*MockClient)(nil).ToggleChatIsMarkedAsUnread), chatID, isMarkedAsUnread)
}

// ToggleChatIsPinned mocks base method.
func (m *MockClient) ToggleChatIsPinned(chatList tdlib.ChatList, chatID int64, isPinned bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleChatIsPinned", chatList, chatID, isPinned)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleChatIsPinned indicates an expected call of ToggleChatIsPinned.
func (mr *MockClientMockRecorder) ToggleChatIsPinned(chatList, chatID, isPinned interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleChatIsPinned", reflect.TypeOf((*MockClient)(nil).ToggleChatIsPinned), chatList, chatID, isPinned)
}

// ToggleGroupCallEnabledStartNotification mocks base method.
func (m *MockClient) ToggleGroupCallEnabledStartNotification(groupCallID int32, enabledStartNotification bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleGroupCallEnabledStartNotification", groupCallID, enabledStartNotification)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleGroupCallEnabledStartNotification indicates an expected call of ToggleGroupCallEnabledStartNotification.
func (mr *MockClientMockRecorder) ToggleGroupCallEnabledStartNotification(groupCallID, enabledStartNotification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleGroupCallEnabledStartNotification", reflect.TypeOf((*MockClient)(nil).ToggleGroupCallEnabledStartNotification), groupCallID, enabledStartNotification)
}

// ToggleGroupCallIsMyVideoEnabled mocks base method.
func (m *MockClient) ToggleGroupCallIsMyVideoEnabled(groupCallID int32, isMyVideoEnabled bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleGroupCallIsMyVideoEnabled", groupCallID, isMyVideoEnabled)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleGroupCallIsMyVideoEnabled indicates an expected call of ToggleGroupCallIsMyVideoEnabled.
func (mr *MockClientMockRecorder) ToggleGroupCallIsMyVideoEnabled(groupCallID, isMyVideoEnabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleGroupCallIsMyVideoEnabled", reflect.TypeOf((*MockClient)(nil).ToggleGroupCallIsMyVideoEnabled), groupCallID, isMyVideoEnabled)
}

// ToggleGroupCallIsMyVideoPaused mocks base method.
func (m *MockClient) ToggleGroupCallIsMyVideoPaused(groupCallID int32, isMyVideoPaused bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleGroupCallIsMyVideoPaused", groupCallID, isMyVideoPaused)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleGroupCallIsMyVideoPaused indicates an expected call of ToggleGroupCallIsMyVideoPaused.
func (mr *MockClientMockRecorder) ToggleGroupCallIsMyVideoPaused(groupCallID, isMyVideoPaused interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleGroupCallIsMyVideoPaused", reflect.TypeOf((*MockClient)(nil).ToggleGroupCallIsMyVideoPaused), groupCallID, isMyVideoPaused)
}

// ToggleGroupCallMuteNewParticipants mocks base method.
func (m *MockClient) ToggleGroupCallMuteNewParticipants(groupCallID int32, muteNewParticipants bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleGroupCallMuteNewParticipants", groupCallID, muteNewParticipants)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleGroupCallMuteNewParticipants indicates an expected call of ToggleGroupCallMuteNewParticipants.
func (mr *MockClientMockRecorder) ToggleGroupCallMuteNewParticipants(groupCallID, muteNewParticipants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleGroupCallMuteNewParticipants", reflect.TypeOf((*MockClient)(nil).ToggleGroupCallMuteNewParticipants), groupCallID, muteNewParticipants)
}

// ToggleGroupCallParticipantIsHandRaised mocks base method.
func (m *MockClient) ToggleGroupCallParticipantIsHandRaised(groupCallID int32, participantID tdlib.MessageSender, isHandRaised bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleGroupCallParticipantIsHandRaised", groupCallID, participantID, isHandRaised)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleGroupCallParticipantIsHandRaised indicates an expected call of ToggleGroupCallParticipantIsHandRaised.
func (mr *MockClientMockRecorder) ToggleGroupCallParticipantIsHandRaised(groupCallID, participantID, isHandRaised interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleGroupCallParticipantIsHandRaised", reflect.TypeOf((*MockClient)(nil).ToggleGroupCallParticipantIsHandRaised), groupCallID, participantID, isHandRaised)
}

// ToggleGroupCallParticipantIsMuted mocks base method.
func (m *MockClient) ToggleGroupCallParticipantIsMuted(groupCallID int32, participantID tdlib.MessageSender, isMuted bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleGroupCallParticipantIsMuted", groupCallID, participantID, isMuted)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleGroupCallParticipantIsMuted indicates an expected call of ToggleGroupCallParticipantIsMuted.
func (mr *MockClientMockRecorder) ToggleGroupCallParticipantIsMuted(groupCallID, participantID, isMuted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleGroupCallParticipantIsMuted", reflect.TypeOf((*MockClient)(nil).ToggleGroupCallParticipantIsMuted), groupCallID, participantID, isMuted)
}

// ToggleGroupCallScreenSharingIsPaused mocks base method.
func (m *MockClient) ToggleGroupCallScreenSharingIsPaused(groupCallID int32, isPaused bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleGroupCallScreenSharingIsPaused", groupCallID, isPaused)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleGroupCallScreenSharingIsPaused indicates an expected call of ToggleGroupCallScreenSharingIsPaused.
func (mr *MockClientMockRecorder) ToggleGroupCallScreenSharingIsPaused(groupCallID, isPaused interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleGroupCallScreenSharingIsPaused", reflect.TypeOf((*MockClient)(nil).ToggleGroupCallScreenSharingIsPaused), groupCallID, isPaused)
}

// ToggleMessageSenderIsBlocked mocks base method.
func (m *MockClient) ToggleMessageSenderIsBlocked(senderID tdlib.MessageSender, isBlocked bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleMessageSenderIsBlocked", senderID, isBlocked)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleMessageSenderIsBlocked indicates an expected call of ToggleMessageSenderIsBlocked.
func (mr *MockClientMockRecorder) ToggleMessageSenderIsBlocked(senderID, isBlocked interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleMessageSenderIsBlocked", reflect.TypeOf((*MockClient)(nil).ToggleMessageSenderIsBlocked), senderID, isBlocked)
}

// ToggleSessionCanAcceptCalls mocks base method.
func (m *MockClient) ToggleSessionCanAcceptCalls(sessionID *tdlib.JSONInt64, canAcceptCalls bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleSessionCanAcceptCalls", sessionID, canAcceptCalls)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleSessionCanAcceptCalls indicates an expected call of ToggleSessionCanAcceptCalls.
func (mr *MockClientMockRecorder) ToggleSessionCanAcceptCalls(sessionID, canAcceptCalls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleSessionCanAcceptCalls", reflect.TypeOf((*MockClient)(nil).ToggleSessionCanAcceptCalls), sessionID, canAcceptCalls)
}

// ToggleSessionCanAcceptSecretChats mocks base method.
func (m *MockClient) ToggleSessionCanAcceptSecretChats(sessionID *tdlib.JSONInt64, canAcceptSecretChats bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleSessionCanAcceptSecretChats", sessionID, canAcceptSecretChats)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleSessionCanAcceptSecretChats indicates an expected call of ToggleSessionCanAcceptSecretChats.
func (mr *MockClientMockRecorder) ToggleSessionCanAcceptSecretChats(sessionID, canAcceptSecretChats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleSessionCanAcceptSecretChats", reflect.TypeOf((*MockClient)(nil).ToggleSessionCanAcceptSecretChats), sessionID, canAcceptSecretChats)
}

// ToggleSupergroupIsAllHistoryAvailable mocks base method.
func (m *MockClient) ToggleSupergroupIsAllHistoryAvailable(supergroupID int64, isAllHistoryAvailable bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleSupergroupIsAllHistoryAvailable", supergroupID, isAllHistoryAvailable)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleSupergroupIsAllHistoryAvailable indicates an expected call of ToggleSupergroupIsAllHistoryAvailable.
func (mr *MockClientMockRecorder) ToggleSupergroupIsAllHistoryAvailable(supergroupID, isAllHistoryAvailable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleSupergroupIsAllHistoryAvailable", reflect.TypeOf((*MockClient)(nil).ToggleSupergroupIsAllHistoryAvailable), supergroupID, isAllHistoryAvailable)
}

// ToggleSupergroupIsBroadcastGroup mocks base method.
func (m *MockClient) ToggleSupergroupIsBroadcastGroup(supergroupID int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleSupergroupIsBroadcastGroup", supergroupID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleSupergroupIsBroadcastGroup indicates an expected call of ToggleSupergroupIsBroadcastGroup.
func (mr *MockClientMockRecorder) ToggleSupergroupIsBroadcastGroup(supergroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleSupergroupIsBroadcastGroup", reflect.TypeOf((*MockClient)(nil).ToggleSupergroupIsBroadcastGroup), supergroupID)
}

// ToggleSupergroupSignMessages mocks base method.
func (m *MockClient) ToggleSupergroupSignMessages(supergroupID int64, signMessages bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleSupergroupSignMessages", supergroupID, signMessages)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleSupergroupSignMessages indicates an expected call of ToggleSupergroupSignMessages.
func (mr *MockClientMockRecorder) ToggleSupergroupSignMessages(supergroupID, signMessages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleSupergroupSignMessages", reflect.TypeOf((*MockClient)(nil).ToggleSupergroupSignMessages), supergroupID, signMessages)
}

// TransferChatOwnership mocks base method.
func (m *MockClient) TransferChatOwnership(chatID, userID int64, password string) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferChatOwnership", chatID, userID, password)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferChatOwnership indicates an expected call of TransferChatOwnership.
func (mr *MockClientMockRecorder) TransferChatOwnership(chatID, userID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferChatOwnership", reflect.TypeOf((*MockClient)(nil).TransferChatOwnership), chatID, userID, password)
}

// UnpinAllChatMessages mocks base method.
func (m *MockClient) UnpinAllChatMessages(chatID int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpinAllChatMessages", chatID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnpinAllChatMessages indicates an expected call of UnpinAllChatMessages.
func (mr *MockClientMockRecorder) UnpinAllChatMessages(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpinAllChatMessages", reflect.TypeOf((*MockClient)(nil).UnpinAllChatMessages), chatID)
}

// UnpinChatMessage mocks base method.
func (m *MockClient) UnpinChatMessage(chatID, messageID int64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpinChatMessage", chatID, messageID)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnpinChatMessage indicates an expected call of UnpinChatMessage.
func (mr *MockClientMockRecorder) UnpinChatMessage(chatID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpinChatMessage", reflect.TypeOf((*MockClient)(nil).UnpinChatMessage), chatID, messageID)
}

// UpgradeBasicGroupChatToSupergroupChat mocks base method.
func (m *MockClient) UpgradeBasicGroupChatToSupergroupChat(chatID int64) (*tdlib.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeBasicGroupChatToSupergroupChat", chatID)
	ret0, _ := ret[0].(*tdlib.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeBasicGroupChatToSupergroupChat indicates an expected call of UpgradeBasicGroupChatToSupergroupChat.
func (mr *MockClientMockRecorder) UpgradeBasicGroupChatToSupergroupChat(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeBasicGroupChatToSupergroupChat", reflect.TypeOf((*MockClient)(nil).UpgradeBasicGroupChatToSupergroupChat), chatID)
}

// UploadFile mocks base method.
func (m *MockClient) UploadFile(file tdlib.InputFile, fileType tdlib.FileType, priority int32) (*tdlib.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", file, fileType, priority)
	ret0, _ := ret[0].(*tdlib.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockClientMockRecorder) UploadFile(file, fileType, priority interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockClient)(nil).UploadFile), file, fileType, priority)
}

// UploadStickerFile mocks base method.
func (m *MockClient) UploadStickerFile(userID int64, sticker tdlib.InputSticker) (*tdlib.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadStickerFile", userID, sticker)
	ret0, _ := ret[0].(*tdlib.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadStickerFile indicates an expected call of UploadStickerFile.
func (mr *MockClientMockRecorder) UploadStickerFile(userID, sticker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadStickerFile", reflect.TypeOf((*MockClient)(nil).UploadStickerFile), userID, sticker)
}

// ValidateOrderInfo mocks base method.
func (m *MockClient) ValidateOrderInfo(chatID, messageID int64, orderInfo *tdlib.OrderInfo, allowSave bool) (*tdlib.ValidatedOrderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateOrderInfo", chatID, messageID, orderInfo, allowSave)
	ret0, _ := ret[0].(*tdlib.ValidatedOrderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateOrderInfo indicates an expected call of ValidateOrderInfo.
func (mr *MockClientMockRecorder) ValidateOrderInfo(chatID, messageID, orderInfo, allowSave interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateOrderInfo", reflect.TypeOf((*MockClient)(nil).ValidateOrderInfo), chatID, messageID, orderInfo, allowSave)
}

// ViewMessages mocks base method.
func (m *MockClient) ViewMessages(chatID, messageThreadID int64, messageIDs []int64, forceRead bool) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewMessages", chatID, messageThreadID, messageIDs, forceRead)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewMessages indicates an expected call of ViewMessages.
func (mr *MockClientMockRecorder) ViewMessages(chatID, messageThreadID, messageIDs, forceRead interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewMessages", reflect.TypeOf((*MockClient)(nil).ViewMessages), chatID, messageThreadID, messageIDs, forceRead)
}

// ViewTrendingStickerSets mocks base method.
func (m *MockClient) ViewTrendingStickerSets(stickerSetIDs []tdlib.JSONInt64) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewTrendingStickerSets", stickerSetIDs)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewTrendingStickerSets indicates an expected call of ViewTrendingStickerSets.
func (mr *MockClientMockRecorder) ViewTrendingStickerSets(stickerSetIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewTrendingStickerSets", reflect.TypeOf((*MockClient)(nil).ViewTrendingStickerSets), stickerSetIDs)
}

// WriteGeneratedFilePart mocks base method.
func (m *MockClient) WriteGeneratedFilePart(generationID *tdlib.JSONInt64, offset int32, data []byte) (*tdlib.Ok, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteGeneratedFilePart", generationID, offset, data)
	ret0, _ := ret[0].(*tdlib.Ok)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteGeneratedFilePart indicates an expected call of WriteGeneratedFilePart.
func (mr *MockClientMockRecorder) WriteGeneratedFilePart(generationID, offset, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteGeneratedFilePart", reflect.TypeOf((*MockClient)(nil).WriteGeneratedFilePart), generationID, offset, data)
}
