// AUTOGENERATED - DO NOT EDIT

package tdlib

import (
	"encoding/json"
	"fmt"
)

// AuthenticationCodeType Provides information about the method by which an authentication code is delivered to the user
type AuthenticationCodeType interface {
	GetAuthenticationCodeTypeEnum() AuthenticationCodeTypeEnum
}

// AuthenticationCodeTypeEnum Alias for abstract AuthenticationCodeType 'Sub-Classes', used as constant-enum here
type AuthenticationCodeTypeEnum string

// AuthenticationCodeType enums
const (
	AuthenticationCodeTypeTelegramMessageType AuthenticationCodeTypeEnum = "authenticationCodeTypeTelegramMessage"
	AuthenticationCodeTypeSmsType             AuthenticationCodeTypeEnum = "authenticationCodeTypeSms"
	AuthenticationCodeTypeCallType            AuthenticationCodeTypeEnum = "authenticationCodeTypeCall"
	AuthenticationCodeTypeFlashCallType       AuthenticationCodeTypeEnum = "authenticationCodeTypeFlashCall"
	AuthenticationCodeTypeMissedCallType      AuthenticationCodeTypeEnum = "authenticationCodeTypeMissedCall"
)

func unmarshalAuthenticationCodeType(rawMsg *json.RawMessage) (AuthenticationCodeType, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch AuthenticationCodeTypeEnum(objMap["@type"].(string)) {
	case AuthenticationCodeTypeTelegramMessageType:
		var authenticationCodeTypeTelegramMessage AuthenticationCodeTypeTelegramMessage
		err := json.Unmarshal(*rawMsg, &authenticationCodeTypeTelegramMessage)
		return &authenticationCodeTypeTelegramMessage, err

	case AuthenticationCodeTypeSmsType:
		var authenticationCodeTypeSms AuthenticationCodeTypeSms
		err := json.Unmarshal(*rawMsg, &authenticationCodeTypeSms)
		return &authenticationCodeTypeSms, err

	case AuthenticationCodeTypeCallType:
		var authenticationCodeTypeCall AuthenticationCodeTypeCall
		err := json.Unmarshal(*rawMsg, &authenticationCodeTypeCall)
		return &authenticationCodeTypeCall, err

	case AuthenticationCodeTypeFlashCallType:
		var authenticationCodeTypeFlashCall AuthenticationCodeTypeFlashCall
		err := json.Unmarshal(*rawMsg, &authenticationCodeTypeFlashCall)
		return &authenticationCodeTypeFlashCall, err

	case AuthenticationCodeTypeMissedCallType:
		var authenticationCodeTypeMissedCall AuthenticationCodeTypeMissedCall
		err := json.Unmarshal(*rawMsg, &authenticationCodeTypeMissedCall)
		return &authenticationCodeTypeMissedCall, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// AuthorizationState Represents the current authorization state of the TDLib client
type AuthorizationState interface {
	GetAuthorizationStateEnum() AuthorizationStateEnum
}

// AuthorizationStateEnum Alias for abstract AuthorizationState 'Sub-Classes', used as constant-enum here
type AuthorizationStateEnum string

// AuthorizationState enums
const (
	AuthorizationStateWaitTdlibParametersType         AuthorizationStateEnum = "authorizationStateWaitTdlibParameters"
	AuthorizationStateWaitEncryptionKeyType           AuthorizationStateEnum = "authorizationStateWaitEncryptionKey"
	AuthorizationStateWaitPhoneNumberType             AuthorizationStateEnum = "authorizationStateWaitPhoneNumber"
	AuthorizationStateWaitCodeType                    AuthorizationStateEnum = "authorizationStateWaitCode"
	AuthorizationStateWaitOtherDeviceConfirmationType AuthorizationStateEnum = "authorizationStateWaitOtherDeviceConfirmation"
	AuthorizationStateWaitRegistrationType            AuthorizationStateEnum = "authorizationStateWaitRegistration"
	AuthorizationStateWaitPasswordType                AuthorizationStateEnum = "authorizationStateWaitPassword"
	AuthorizationStateReadyType                       AuthorizationStateEnum = "authorizationStateReady"
	AuthorizationStateLoggingOutType                  AuthorizationStateEnum = "authorizationStateLoggingOut"
	AuthorizationStateClosingType                     AuthorizationStateEnum = "authorizationStateClosing"
	AuthorizationStateClosedType                      AuthorizationStateEnum = "authorizationStateClosed"
)

func unmarshalAuthorizationState(rawMsg *json.RawMessage) (AuthorizationState, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch AuthorizationStateEnum(objMap["@type"].(string)) {
	case AuthorizationStateWaitTdlibParametersType:
		var authorizationStateWaitTdlibParameters AuthorizationStateWaitTdlibParameters
		err := json.Unmarshal(*rawMsg, &authorizationStateWaitTdlibParameters)
		return &authorizationStateWaitTdlibParameters, err

	case AuthorizationStateWaitEncryptionKeyType:
		var authorizationStateWaitEncryptionKey AuthorizationStateWaitEncryptionKey
		err := json.Unmarshal(*rawMsg, &authorizationStateWaitEncryptionKey)
		return &authorizationStateWaitEncryptionKey, err

	case AuthorizationStateWaitPhoneNumberType:
		var authorizationStateWaitPhoneNumber AuthorizationStateWaitPhoneNumber
		err := json.Unmarshal(*rawMsg, &authorizationStateWaitPhoneNumber)
		return &authorizationStateWaitPhoneNumber, err

	case AuthorizationStateWaitCodeType:
		var authorizationStateWaitCode AuthorizationStateWaitCode
		err := json.Unmarshal(*rawMsg, &authorizationStateWaitCode)
		return &authorizationStateWaitCode, err

	case AuthorizationStateWaitOtherDeviceConfirmationType:
		var authorizationStateWaitOtherDeviceConfirmation AuthorizationStateWaitOtherDeviceConfirmation
		err := json.Unmarshal(*rawMsg, &authorizationStateWaitOtherDeviceConfirmation)
		return &authorizationStateWaitOtherDeviceConfirmation, err

	case AuthorizationStateWaitRegistrationType:
		var authorizationStateWaitRegistration AuthorizationStateWaitRegistration
		err := json.Unmarshal(*rawMsg, &authorizationStateWaitRegistration)
		return &authorizationStateWaitRegistration, err

	case AuthorizationStateWaitPasswordType:
		var authorizationStateWaitPassword AuthorizationStateWaitPassword
		err := json.Unmarshal(*rawMsg, &authorizationStateWaitPassword)
		return &authorizationStateWaitPassword, err

	case AuthorizationStateReadyType:
		var authorizationStateReady AuthorizationStateReady
		err := json.Unmarshal(*rawMsg, &authorizationStateReady)
		return &authorizationStateReady, err

	case AuthorizationStateLoggingOutType:
		var authorizationStateLoggingOut AuthorizationStateLoggingOut
		err := json.Unmarshal(*rawMsg, &authorizationStateLoggingOut)
		return &authorizationStateLoggingOut, err

	case AuthorizationStateClosingType:
		var authorizationStateClosing AuthorizationStateClosing
		err := json.Unmarshal(*rawMsg, &authorizationStateClosing)
		return &authorizationStateClosing, err

	case AuthorizationStateClosedType:
		var authorizationStateClosed AuthorizationStateClosed
		err := json.Unmarshal(*rawMsg, &authorizationStateClosed)
		return &authorizationStateClosed, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// InputFile Points to a file
type InputFile interface {
	GetInputFileEnum() InputFileEnum
}

// InputFileEnum Alias for abstract InputFile 'Sub-Classes', used as constant-enum here
type InputFileEnum string

// InputFile enums
const (
	InputFileIDType        InputFileEnum = "inputFileId"
	InputFileRemoteType    InputFileEnum = "inputFileRemote"
	InputFileLocalType     InputFileEnum = "inputFileLocal"
	InputFileGeneratedType InputFileEnum = "inputFileGenerated"
)

func unmarshalInputFile(rawMsg *json.RawMessage) (InputFile, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch InputFileEnum(objMap["@type"].(string)) {
	case InputFileIDType:
		var inputFileID InputFileID
		err := json.Unmarshal(*rawMsg, &inputFileID)
		return &inputFileID, err

	case InputFileRemoteType:
		var inputFileRemote InputFileRemote
		err := json.Unmarshal(*rawMsg, &inputFileRemote)
		return &inputFileRemote, err

	case InputFileLocalType:
		var inputFileLocal InputFileLocal
		err := json.Unmarshal(*rawMsg, &inputFileLocal)
		return &inputFileLocal, err

	case InputFileGeneratedType:
		var inputFileGenerated InputFileGenerated
		err := json.Unmarshal(*rawMsg, &inputFileGenerated)
		return &inputFileGenerated, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// ThumbnailFormat Describes format of the thumbnail
type ThumbnailFormat interface {
	GetThumbnailFormatEnum() ThumbnailFormatEnum
}

// ThumbnailFormatEnum Alias for abstract ThumbnailFormat 'Sub-Classes', used as constant-enum here
type ThumbnailFormatEnum string

// ThumbnailFormat enums
const (
	ThumbnailFormatJpegType  ThumbnailFormatEnum = "thumbnailFormatJpeg"
	ThumbnailFormatPngType   ThumbnailFormatEnum = "thumbnailFormatPng"
	ThumbnailFormatWebpType  ThumbnailFormatEnum = "thumbnailFormatWebp"
	ThumbnailFormatGifType   ThumbnailFormatEnum = "thumbnailFormatGif"
	ThumbnailFormatTgsType   ThumbnailFormatEnum = "thumbnailFormatTgs"
	ThumbnailFormatMpeg4Type ThumbnailFormatEnum = "thumbnailFormatMpeg4"
)

func unmarshalThumbnailFormat(rawMsg *json.RawMessage) (ThumbnailFormat, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch ThumbnailFormatEnum(objMap["@type"].(string)) {
	case ThumbnailFormatJpegType:
		var thumbnailFormatJpeg ThumbnailFormatJpeg
		err := json.Unmarshal(*rawMsg, &thumbnailFormatJpeg)
		return &thumbnailFormatJpeg, err

	case ThumbnailFormatPngType:
		var thumbnailFormatPng ThumbnailFormatPng
		err := json.Unmarshal(*rawMsg, &thumbnailFormatPng)
		return &thumbnailFormatPng, err

	case ThumbnailFormatWebpType:
		var thumbnailFormatWebp ThumbnailFormatWebp
		err := json.Unmarshal(*rawMsg, &thumbnailFormatWebp)
		return &thumbnailFormatWebp, err

	case ThumbnailFormatGifType:
		var thumbnailFormatGif ThumbnailFormatGif
		err := json.Unmarshal(*rawMsg, &thumbnailFormatGif)
		return &thumbnailFormatGif, err

	case ThumbnailFormatTgsType:
		var thumbnailFormatTgs ThumbnailFormatTgs
		err := json.Unmarshal(*rawMsg, &thumbnailFormatTgs)
		return &thumbnailFormatTgs, err

	case ThumbnailFormatMpeg4Type:
		var thumbnailFormatMpeg4 ThumbnailFormatMpeg4
		err := json.Unmarshal(*rawMsg, &thumbnailFormatMpeg4)
		return &thumbnailFormatMpeg4, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// MaskPoint Part of the face, relative to which a mask is placed
type MaskPoint interface {
	GetMaskPointEnum() MaskPointEnum
}

// MaskPointEnum Alias for abstract MaskPoint 'Sub-Classes', used as constant-enum here
type MaskPointEnum string

// MaskPoint enums
const (
	MaskPointForeheadType MaskPointEnum = "maskPointForehead"
	MaskPointEyesType     MaskPointEnum = "maskPointEyes"
	MaskPointMouthType    MaskPointEnum = "maskPointMouth"
	MaskPointChinType     MaskPointEnum = "maskPointChin"
)

func unmarshalMaskPoint(rawMsg *json.RawMessage) (MaskPoint, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch MaskPointEnum(objMap["@type"].(string)) {
	case MaskPointForeheadType:
		var maskPointForehead MaskPointForehead
		err := json.Unmarshal(*rawMsg, &maskPointForehead)
		return &maskPointForehead, err

	case MaskPointEyesType:
		var maskPointEyes MaskPointEyes
		err := json.Unmarshal(*rawMsg, &maskPointEyes)
		return &maskPointEyes, err

	case MaskPointMouthType:
		var maskPointMouth MaskPointMouth
		err := json.Unmarshal(*rawMsg, &maskPointMouth)
		return &maskPointMouth, err

	case MaskPointChinType:
		var maskPointChin MaskPointChin
		err := json.Unmarshal(*rawMsg, &maskPointChin)
		return &maskPointChin, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// PollType Describes the type of a poll
type PollType interface {
	GetPollTypeEnum() PollTypeEnum
}

// PollTypeEnum Alias for abstract PollType 'Sub-Classes', used as constant-enum here
type PollTypeEnum string

// PollType enums
const (
	PollTypeRegularType PollTypeEnum = "pollTypeRegular"
	PollTypeQuizType    PollTypeEnum = "pollTypeQuiz"
)

func unmarshalPollType(rawMsg *json.RawMessage) (PollType, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch PollTypeEnum(objMap["@type"].(string)) {
	case PollTypeRegularType:
		var pollTypeRegular PollTypeRegular
		err := json.Unmarshal(*rawMsg, &pollTypeRegular)
		return &pollTypeRegular, err

	case PollTypeQuizType:
		var pollTypeQuiz PollTypeQuiz
		err := json.Unmarshal(*rawMsg, &pollTypeQuiz)
		return &pollTypeQuiz, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// UserType Represents the type of a user. The following types are possible: regular users, deleted users and bots
type UserType interface {
	GetUserTypeEnum() UserTypeEnum
}

// UserTypeEnum Alias for abstract UserType 'Sub-Classes', used as constant-enum here
type UserTypeEnum string

// UserType enums
const (
	UserTypeRegularType UserTypeEnum = "userTypeRegular"
	UserTypeDeletedType UserTypeEnum = "userTypeDeleted"
	UserTypeBotType     UserTypeEnum = "userTypeBot"
	UserTypeUnknownType UserTypeEnum = "userTypeUnknown"
)

func unmarshalUserType(rawMsg *json.RawMessage) (UserType, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch UserTypeEnum(objMap["@type"].(string)) {
	case UserTypeRegularType:
		var userTypeRegular UserTypeRegular
		err := json.Unmarshal(*rawMsg, &userTypeRegular)
		return &userTypeRegular, err

	case UserTypeDeletedType:
		var userTypeDeleted UserTypeDeleted
		err := json.Unmarshal(*rawMsg, &userTypeDeleted)
		return &userTypeDeleted, err

	case UserTypeBotType:
		var userTypeBot UserTypeBot
		err := json.Unmarshal(*rawMsg, &userTypeBot)
		return &userTypeBot, err

	case UserTypeUnknownType:
		var userTypeUnknown UserTypeUnknown
		err := json.Unmarshal(*rawMsg, &userTypeUnknown)
		return &userTypeUnknown, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// InputChatPhoto Describes a photo to be set as a user profile or chat photo
type InputChatPhoto interface {
	GetInputChatPhotoEnum() InputChatPhotoEnum
}

// InputChatPhotoEnum Alias for abstract InputChatPhoto 'Sub-Classes', used as constant-enum here
type InputChatPhotoEnum string

// InputChatPhoto enums
const (
	InputChatPhotoPreviousType  InputChatPhotoEnum = "inputChatPhotoPrevious"
	InputChatPhotoStaticType    InputChatPhotoEnum = "inputChatPhotoStatic"
	InputChatPhotoAnimationType InputChatPhotoEnum = "inputChatPhotoAnimation"
)

func unmarshalInputChatPhoto(rawMsg *json.RawMessage) (InputChatPhoto, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch InputChatPhotoEnum(objMap["@type"].(string)) {
	case InputChatPhotoPreviousType:
		var inputChatPhotoPrevious InputChatPhotoPrevious
		err := json.Unmarshal(*rawMsg, &inputChatPhotoPrevious)
		return &inputChatPhotoPrevious, err

	case InputChatPhotoStaticType:
		var inputChatPhotoStatic InputChatPhotoStatic
		err := json.Unmarshal(*rawMsg, &inputChatPhotoStatic)
		return &inputChatPhotoStatic, err

	case InputChatPhotoAnimationType:
		var inputChatPhotoAnimation InputChatPhotoAnimation
		err := json.Unmarshal(*rawMsg, &inputChatPhotoAnimation)
		return &inputChatPhotoAnimation, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// ChatMemberStatus Provides information about the status of a member in a chat
type ChatMemberStatus interface {
	GetChatMemberStatusEnum() ChatMemberStatusEnum
}

// ChatMemberStatusEnum Alias for abstract ChatMemberStatus 'Sub-Classes', used as constant-enum here
type ChatMemberStatusEnum string

// ChatMemberStatus enums
const (
	ChatMemberStatusCreatorType       ChatMemberStatusEnum = "chatMemberStatusCreator"
	ChatMemberStatusAdministratorType ChatMemberStatusEnum = "chatMemberStatusAdministrator"
	ChatMemberStatusMemberType        ChatMemberStatusEnum = "chatMemberStatusMember"
	ChatMemberStatusRestrictedType    ChatMemberStatusEnum = "chatMemberStatusRestricted"
	ChatMemberStatusLeftType          ChatMemberStatusEnum = "chatMemberStatusLeft"
	ChatMemberStatusBannedType        ChatMemberStatusEnum = "chatMemberStatusBanned"
)

func unmarshalChatMemberStatus(rawMsg *json.RawMessage) (ChatMemberStatus, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch ChatMemberStatusEnum(objMap["@type"].(string)) {
	case ChatMemberStatusCreatorType:
		var chatMemberStatusCreator ChatMemberStatusCreator
		err := json.Unmarshal(*rawMsg, &chatMemberStatusCreator)
		return &chatMemberStatusCreator, err

	case ChatMemberStatusAdministratorType:
		var chatMemberStatusAdministrator ChatMemberStatusAdministrator
		err := json.Unmarshal(*rawMsg, &chatMemberStatusAdministrator)
		return &chatMemberStatusAdministrator, err

	case ChatMemberStatusMemberType:
		var chatMemberStatusMember ChatMemberStatusMember
		err := json.Unmarshal(*rawMsg, &chatMemberStatusMember)
		return &chatMemberStatusMember, err

	case ChatMemberStatusRestrictedType:
		var chatMemberStatusRestricted ChatMemberStatusRestricted
		err := json.Unmarshal(*rawMsg, &chatMemberStatusRestricted)
		return &chatMemberStatusRestricted, err

	case ChatMemberStatusLeftType:
		var chatMemberStatusLeft ChatMemberStatusLeft
		err := json.Unmarshal(*rawMsg, &chatMemberStatusLeft)
		return &chatMemberStatusLeft, err

	case ChatMemberStatusBannedType:
		var chatMemberStatusBanned ChatMemberStatusBanned
		err := json.Unmarshal(*rawMsg, &chatMemberStatusBanned)
		return &chatMemberStatusBanned, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// ChatMembersFilter Specifies the kind of chat members to return in searchChatMembers
type ChatMembersFilter interface {
	GetChatMembersFilterEnum() ChatMembersFilterEnum
}

// ChatMembersFilterEnum Alias for abstract ChatMembersFilter 'Sub-Classes', used as constant-enum here
type ChatMembersFilterEnum string

// ChatMembersFilter enums
const (
	ChatMembersFilterContactsType       ChatMembersFilterEnum = "chatMembersFilterContacts"
	ChatMembersFilterAdministratorsType ChatMembersFilterEnum = "chatMembersFilterAdministrators"
	ChatMembersFilterMembersType        ChatMembersFilterEnum = "chatMembersFilterMembers"
	ChatMembersFilterMentionType        ChatMembersFilterEnum = "chatMembersFilterMention"
	ChatMembersFilterRestrictedType     ChatMembersFilterEnum = "chatMembersFilterRestricted"
	ChatMembersFilterBannedType         ChatMembersFilterEnum = "chatMembersFilterBanned"
	ChatMembersFilterBotsType           ChatMembersFilterEnum = "chatMembersFilterBots"
)

func unmarshalChatMembersFilter(rawMsg *json.RawMessage) (ChatMembersFilter, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch ChatMembersFilterEnum(objMap["@type"].(string)) {
	case ChatMembersFilterContactsType:
		var chatMembersFilterContacts ChatMembersFilterContacts
		err := json.Unmarshal(*rawMsg, &chatMembersFilterContacts)
		return &chatMembersFilterContacts, err

	case ChatMembersFilterAdministratorsType:
		var chatMembersFilterAdministrators ChatMembersFilterAdministrators
		err := json.Unmarshal(*rawMsg, &chatMembersFilterAdministrators)
		return &chatMembersFilterAdministrators, err

	case ChatMembersFilterMembersType:
		var chatMembersFilterMembers ChatMembersFilterMembers
		err := json.Unmarshal(*rawMsg, &chatMembersFilterMembers)
		return &chatMembersFilterMembers, err

	case ChatMembersFilterMentionType:
		var chatMembersFilterMention ChatMembersFilterMention
		err := json.Unmarshal(*rawMsg, &chatMembersFilterMention)
		return &chatMembersFilterMention, err

	case ChatMembersFilterRestrictedType:
		var chatMembersFilterRestricted ChatMembersFilterRestricted
		err := json.Unmarshal(*rawMsg, &chatMembersFilterRestricted)
		return &chatMembersFilterRestricted, err

	case ChatMembersFilterBannedType:
		var chatMembersFilterBanned ChatMembersFilterBanned
		err := json.Unmarshal(*rawMsg, &chatMembersFilterBanned)
		return &chatMembersFilterBanned, err

	case ChatMembersFilterBotsType:
		var chatMembersFilterBots ChatMembersFilterBots
		err := json.Unmarshal(*rawMsg, &chatMembersFilterBots)
		return &chatMembersFilterBots, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// SupergroupMembersFilter Specifies the kind of chat members to return in getSupergroupMembers
type SupergroupMembersFilter interface {
	GetSupergroupMembersFilterEnum() SupergroupMembersFilterEnum
}

// SupergroupMembersFilterEnum Alias for abstract SupergroupMembersFilter 'Sub-Classes', used as constant-enum here
type SupergroupMembersFilterEnum string

// SupergroupMembersFilter enums
const (
	SupergroupMembersFilterRecentType         SupergroupMembersFilterEnum = "supergroupMembersFilterRecent"
	SupergroupMembersFilterContactsType       SupergroupMembersFilterEnum = "supergroupMembersFilterContacts"
	SupergroupMembersFilterAdministratorsType SupergroupMembersFilterEnum = "supergroupMembersFilterAdministrators"
	SupergroupMembersFilterSearchType         SupergroupMembersFilterEnum = "supergroupMembersFilterSearch"
	SupergroupMembersFilterRestrictedType     SupergroupMembersFilterEnum = "supergroupMembersFilterRestricted"
	SupergroupMembersFilterBannedType         SupergroupMembersFilterEnum = "supergroupMembersFilterBanned"
	SupergroupMembersFilterMentionType        SupergroupMembersFilterEnum = "supergroupMembersFilterMention"
	SupergroupMembersFilterBotsType           SupergroupMembersFilterEnum = "supergroupMembersFilterBots"
)

func unmarshalSupergroupMembersFilter(rawMsg *json.RawMessage) (SupergroupMembersFilter, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch SupergroupMembersFilterEnum(objMap["@type"].(string)) {
	case SupergroupMembersFilterRecentType:
		var supergroupMembersFilterRecent SupergroupMembersFilterRecent
		err := json.Unmarshal(*rawMsg, &supergroupMembersFilterRecent)
		return &supergroupMembersFilterRecent, err

	case SupergroupMembersFilterContactsType:
		var supergroupMembersFilterContacts SupergroupMembersFilterContacts
		err := json.Unmarshal(*rawMsg, &supergroupMembersFilterContacts)
		return &supergroupMembersFilterContacts, err

	case SupergroupMembersFilterAdministratorsType:
		var supergroupMembersFilterAdministrators SupergroupMembersFilterAdministrators
		err := json.Unmarshal(*rawMsg, &supergroupMembersFilterAdministrators)
		return &supergroupMembersFilterAdministrators, err

	case SupergroupMembersFilterSearchType:
		var supergroupMembersFilterSearch SupergroupMembersFilterSearch
		err := json.Unmarshal(*rawMsg, &supergroupMembersFilterSearch)
		return &supergroupMembersFilterSearch, err

	case SupergroupMembersFilterRestrictedType:
		var supergroupMembersFilterRestricted SupergroupMembersFilterRestricted
		err := json.Unmarshal(*rawMsg, &supergroupMembersFilterRestricted)
		return &supergroupMembersFilterRestricted, err

	case SupergroupMembersFilterBannedType:
		var supergroupMembersFilterBanned SupergroupMembersFilterBanned
		err := json.Unmarshal(*rawMsg, &supergroupMembersFilterBanned)
		return &supergroupMembersFilterBanned, err

	case SupergroupMembersFilterMentionType:
		var supergroupMembersFilterMention SupergroupMembersFilterMention
		err := json.Unmarshal(*rawMsg, &supergroupMembersFilterMention)
		return &supergroupMembersFilterMention, err

	case SupergroupMembersFilterBotsType:
		var supergroupMembersFilterBots SupergroupMembersFilterBots
		err := json.Unmarshal(*rawMsg, &supergroupMembersFilterBots)
		return &supergroupMembersFilterBots, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// SecretChatState Describes the current secret chat state
type SecretChatState interface {
	GetSecretChatStateEnum() SecretChatStateEnum
}

// SecretChatStateEnum Alias for abstract SecretChatState 'Sub-Classes', used as constant-enum here
type SecretChatStateEnum string

// SecretChatState enums
const (
	SecretChatStatePendingType SecretChatStateEnum = "secretChatStatePending"
	SecretChatStateReadyType   SecretChatStateEnum = "secretChatStateReady"
	SecretChatStateClosedType  SecretChatStateEnum = "secretChatStateClosed"
)

func unmarshalSecretChatState(rawMsg *json.RawMessage) (SecretChatState, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch SecretChatStateEnum(objMap["@type"].(string)) {
	case SecretChatStatePendingType:
		var secretChatStatePending SecretChatStatePending
		err := json.Unmarshal(*rawMsg, &secretChatStatePending)
		return &secretChatStatePending, err

	case SecretChatStateReadyType:
		var secretChatStateReady SecretChatStateReady
		err := json.Unmarshal(*rawMsg, &secretChatStateReady)
		return &secretChatStateReady, err

	case SecretChatStateClosedType:
		var secretChatStateClosed SecretChatStateClosed
		err := json.Unmarshal(*rawMsg, &secretChatStateClosed)
		return &secretChatStateClosed, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// MessageSender Contains information about the sender of a message
type MessageSender interface {
	GetMessageSenderEnum() MessageSenderEnum
}

// MessageSenderEnum Alias for abstract MessageSender 'Sub-Classes', used as constant-enum here
type MessageSenderEnum string

// MessageSender enums
const (
	MessageSenderUserType MessageSenderEnum = "messageSenderUser"
	MessageSenderChatType MessageSenderEnum = "messageSenderChat"
)

func unmarshalMessageSender(rawMsg *json.RawMessage) (MessageSender, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch MessageSenderEnum(objMap["@type"].(string)) {
	case MessageSenderUserType:
		var messageSenderUser MessageSenderUser
		err := json.Unmarshal(*rawMsg, &messageSenderUser)
		return &messageSenderUser, err

	case MessageSenderChatType:
		var messageSenderChat MessageSenderChat
		err := json.Unmarshal(*rawMsg, &messageSenderChat)
		return &messageSenderChat, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// MessageForwardOrigin Contains information about the origin of a forwarded message
type MessageForwardOrigin interface {
	GetMessageForwardOriginEnum() MessageForwardOriginEnum
}

// MessageForwardOriginEnum Alias for abstract MessageForwardOrigin 'Sub-Classes', used as constant-enum here
type MessageForwardOriginEnum string

// MessageForwardOrigin enums
const (
	MessageForwardOriginUserType          MessageForwardOriginEnum = "messageForwardOriginUser"
	MessageForwardOriginChatType          MessageForwardOriginEnum = "messageForwardOriginChat"
	MessageForwardOriginHiddenUserType    MessageForwardOriginEnum = "messageForwardOriginHiddenUser"
	MessageForwardOriginChannelType       MessageForwardOriginEnum = "messageForwardOriginChannel"
	MessageForwardOriginMessageImportType MessageForwardOriginEnum = "messageForwardOriginMessageImport"
)

func unmarshalMessageForwardOrigin(rawMsg *json.RawMessage) (MessageForwardOrigin, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch MessageForwardOriginEnum(objMap["@type"].(string)) {
	case MessageForwardOriginUserType:
		var messageForwardOriginUser MessageForwardOriginUser
		err := json.Unmarshal(*rawMsg, &messageForwardOriginUser)
		return &messageForwardOriginUser, err

	case MessageForwardOriginChatType:
		var messageForwardOriginChat MessageForwardOriginChat
		err := json.Unmarshal(*rawMsg, &messageForwardOriginChat)
		return &messageForwardOriginChat, err

	case MessageForwardOriginHiddenUserType:
		var messageForwardOriginHiddenUser MessageForwardOriginHiddenUser
		err := json.Unmarshal(*rawMsg, &messageForwardOriginHiddenUser)
		return &messageForwardOriginHiddenUser, err

	case MessageForwardOriginChannelType:
		var messageForwardOriginChannel MessageForwardOriginChannel
		err := json.Unmarshal(*rawMsg, &messageForwardOriginChannel)
		return &messageForwardOriginChannel, err

	case MessageForwardOriginMessageImportType:
		var messageForwardOriginMessageImport MessageForwardOriginMessageImport
		err := json.Unmarshal(*rawMsg, &messageForwardOriginMessageImport)
		return &messageForwardOriginMessageImport, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// MessageSendingState Contains information about the sending state of the message
type MessageSendingState interface {
	GetMessageSendingStateEnum() MessageSendingStateEnum
}

// MessageSendingStateEnum Alias for abstract MessageSendingState 'Sub-Classes', used as constant-enum here
type MessageSendingStateEnum string

// MessageSendingState enums
const (
	MessageSendingStatePendingType MessageSendingStateEnum = "messageSendingStatePending"
	MessageSendingStateFailedType  MessageSendingStateEnum = "messageSendingStateFailed"
)

func unmarshalMessageSendingState(rawMsg *json.RawMessage) (MessageSendingState, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch MessageSendingStateEnum(objMap["@type"].(string)) {
	case MessageSendingStatePendingType:
		var messageSendingStatePending MessageSendingStatePending
		err := json.Unmarshal(*rawMsg, &messageSendingStatePending)
		return &messageSendingStatePending, err

	case MessageSendingStateFailedType:
		var messageSendingStateFailed MessageSendingStateFailed
		err := json.Unmarshal(*rawMsg, &messageSendingStateFailed)
		return &messageSendingStateFailed, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// NotificationSettingsScope Describes the types of chats to which notification settings are relevant
type NotificationSettingsScope interface {
	GetNotificationSettingsScopeEnum() NotificationSettingsScopeEnum
}

// NotificationSettingsScopeEnum Alias for abstract NotificationSettingsScope 'Sub-Classes', used as constant-enum here
type NotificationSettingsScopeEnum string

// NotificationSettingsScope enums
const (
	NotificationSettingsScopePrivateChatsType NotificationSettingsScopeEnum = "notificationSettingsScopePrivateChats"
	NotificationSettingsScopeGroupChatsType   NotificationSettingsScopeEnum = "notificationSettingsScopeGroupChats"
	NotificationSettingsScopeChannelChatsType NotificationSettingsScopeEnum = "notificationSettingsScopeChannelChats"
)

func unmarshalNotificationSettingsScope(rawMsg *json.RawMessage) (NotificationSettingsScope, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch NotificationSettingsScopeEnum(objMap["@type"].(string)) {
	case NotificationSettingsScopePrivateChatsType:
		var notificationSettingsScopePrivateChats NotificationSettingsScopePrivateChats
		err := json.Unmarshal(*rawMsg, &notificationSettingsScopePrivateChats)
		return &notificationSettingsScopePrivateChats, err

	case NotificationSettingsScopeGroupChatsType:
		var notificationSettingsScopeGroupChats NotificationSettingsScopeGroupChats
		err := json.Unmarshal(*rawMsg, &notificationSettingsScopeGroupChats)
		return &notificationSettingsScopeGroupChats, err

	case NotificationSettingsScopeChannelChatsType:
		var notificationSettingsScopeChannelChats NotificationSettingsScopeChannelChats
		err := json.Unmarshal(*rawMsg, &notificationSettingsScopeChannelChats)
		return &notificationSettingsScopeChannelChats, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// ChatType Describes the type of a chat
type ChatType interface {
	GetChatTypeEnum() ChatTypeEnum
}

// ChatTypeEnum Alias for abstract ChatType 'Sub-Classes', used as constant-enum here
type ChatTypeEnum string

// ChatType enums
const (
	ChatTypePrivateType    ChatTypeEnum = "chatTypePrivate"
	ChatTypeBasicGroupType ChatTypeEnum = "chatTypeBasicGroup"
	ChatTypeSupergroupType ChatTypeEnum = "chatTypeSupergroup"
	ChatTypeSecretType     ChatTypeEnum = "chatTypeSecret"
)

func unmarshalChatType(rawMsg *json.RawMessage) (ChatType, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch ChatTypeEnum(objMap["@type"].(string)) {
	case ChatTypePrivateType:
		var chatTypePrivate ChatTypePrivate
		err := json.Unmarshal(*rawMsg, &chatTypePrivate)
		return &chatTypePrivate, err

	case ChatTypeBasicGroupType:
		var chatTypeBasicGroup ChatTypeBasicGroup
		err := json.Unmarshal(*rawMsg, &chatTypeBasicGroup)
		return &chatTypeBasicGroup, err

	case ChatTypeSupergroupType:
		var chatTypeSupergroup ChatTypeSupergroup
		err := json.Unmarshal(*rawMsg, &chatTypeSupergroup)
		return &chatTypeSupergroup, err

	case ChatTypeSecretType:
		var chatTypeSecret ChatTypeSecret
		err := json.Unmarshal(*rawMsg, &chatTypeSecret)
		return &chatTypeSecret, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// ChatList Describes a list of chats
type ChatList interface {
	GetChatListEnum() ChatListEnum
}

// ChatListEnum Alias for abstract ChatList 'Sub-Classes', used as constant-enum here
type ChatListEnum string

// ChatList enums
const (
	ChatListMainType    ChatListEnum = "chatListMain"
	ChatListArchiveType ChatListEnum = "chatListArchive"
	ChatListFilterType  ChatListEnum = "chatListFilter"
)

func unmarshalChatList(rawMsg *json.RawMessage) (ChatList, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch ChatListEnum(objMap["@type"].(string)) {
	case ChatListMainType:
		var chatListMain ChatListMain
		err := json.Unmarshal(*rawMsg, &chatListMain)
		return &chatListMain, err

	case ChatListArchiveType:
		var chatListArchive ChatListArchive
		err := json.Unmarshal(*rawMsg, &chatListArchive)
		return &chatListArchive, err

	case ChatListFilterType:
		var chatListFilter ChatListFilter
		err := json.Unmarshal(*rawMsg, &chatListFilter)
		return &chatListFilter, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// ChatSource Describes a reason why an external chat is shown in a chat list
type ChatSource interface {
	GetChatSourceEnum() ChatSourceEnum
}

// ChatSourceEnum Alias for abstract ChatSource 'Sub-Classes', used as constant-enum here
type ChatSourceEnum string

// ChatSource enums
const (
	ChatSourceMtprotoProxyType              ChatSourceEnum = "chatSourceMtprotoProxy"
	ChatSourcePublicServiceAnnouncementType ChatSourceEnum = "chatSourcePublicServiceAnnouncement"
)

func unmarshalChatSource(rawMsg *json.RawMessage) (ChatSource, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch ChatSourceEnum(objMap["@type"].(string)) {
	case ChatSourceMtprotoProxyType:
		var chatSourceMtprotoProxy ChatSourceMtprotoProxy
		err := json.Unmarshal(*rawMsg, &chatSourceMtprotoProxy)
		return &chatSourceMtprotoProxy, err

	case ChatSourcePublicServiceAnnouncementType:
		var chatSourcePublicServiceAnnouncement ChatSourcePublicServiceAnnouncement
		err := json.Unmarshal(*rawMsg, &chatSourcePublicServiceAnnouncement)
		return &chatSourcePublicServiceAnnouncement, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// PublicChatType Describes a type of public chats
type PublicChatType interface {
	GetPublicChatTypeEnum() PublicChatTypeEnum
}

// PublicChatTypeEnum Alias for abstract PublicChatType 'Sub-Classes', used as constant-enum here
type PublicChatTypeEnum string

// PublicChatType enums
const (
	PublicChatTypeHasUsernameType     PublicChatTypeEnum = "publicChatTypeHasUsername"
	PublicChatTypeIsLocationBasedType PublicChatTypeEnum = "publicChatTypeIsLocationBased"
)

func unmarshalPublicChatType(rawMsg *json.RawMessage) (PublicChatType, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch PublicChatTypeEnum(objMap["@type"].(string)) {
	case PublicChatTypeHasUsernameType:
		var publicChatTypeHasUsername PublicChatTypeHasUsername
		err := json.Unmarshal(*rawMsg, &publicChatTypeHasUsername)
		return &publicChatTypeHasUsername, err

	case PublicChatTypeIsLocationBasedType:
		var publicChatTypeIsLocationBased PublicChatTypeIsLocationBased
		err := json.Unmarshal(*rawMsg, &publicChatTypeIsLocationBased)
		return &publicChatTypeIsLocationBased, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// ChatActionBar Describes actions which must be possible to do through a chat action bar
type ChatActionBar interface {
	GetChatActionBarEnum() ChatActionBarEnum
}

// ChatActionBarEnum Alias for abstract ChatActionBar 'Sub-Classes', used as constant-enum here
type ChatActionBarEnum string

// ChatActionBar enums
const (
	ChatActionBarReportSpamType              ChatActionBarEnum = "chatActionBarReportSpam"
	ChatActionBarReportUnrelatedLocationType ChatActionBarEnum = "chatActionBarReportUnrelatedLocation"
	ChatActionBarInviteMembersType           ChatActionBarEnum = "chatActionBarInviteMembers"
	ChatActionBarReportAddBlockType          ChatActionBarEnum = "chatActionBarReportAddBlock"
	ChatActionBarAddContactType              ChatActionBarEnum = "chatActionBarAddContact"
	ChatActionBarSharePhoneNumberType        ChatActionBarEnum = "chatActionBarSharePhoneNumber"
	ChatActionBarJoinRequestType             ChatActionBarEnum = "chatActionBarJoinRequest"
)

func unmarshalChatActionBar(rawMsg *json.RawMessage) (ChatActionBar, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch ChatActionBarEnum(objMap["@type"].(string)) {
	case ChatActionBarReportSpamType:
		var chatActionBarReportSpam ChatActionBarReportSpam
		err := json.Unmarshal(*rawMsg, &chatActionBarReportSpam)
		return &chatActionBarReportSpam, err

	case ChatActionBarReportUnrelatedLocationType:
		var chatActionBarReportUnrelatedLocation ChatActionBarReportUnrelatedLocation
		err := json.Unmarshal(*rawMsg, &chatActionBarReportUnrelatedLocation)
		return &chatActionBarReportUnrelatedLocation, err

	case ChatActionBarInviteMembersType:
		var chatActionBarInviteMembers ChatActionBarInviteMembers
		err := json.Unmarshal(*rawMsg, &chatActionBarInviteMembers)
		return &chatActionBarInviteMembers, err

	case ChatActionBarReportAddBlockType:
		var chatActionBarReportAddBlock ChatActionBarReportAddBlock
		err := json.Unmarshal(*rawMsg, &chatActionBarReportAddBlock)
		return &chatActionBarReportAddBlock, err

	case ChatActionBarAddContactType:
		var chatActionBarAddContact ChatActionBarAddContact
		err := json.Unmarshal(*rawMsg, &chatActionBarAddContact)
		return &chatActionBarAddContact, err

	case ChatActionBarSharePhoneNumberType:
		var chatActionBarSharePhoneNumber ChatActionBarSharePhoneNumber
		err := json.Unmarshal(*rawMsg, &chatActionBarSharePhoneNumber)
		return &chatActionBarSharePhoneNumber, err

	case ChatActionBarJoinRequestType:
		var chatActionBarJoinRequest ChatActionBarJoinRequest
		err := json.Unmarshal(*rawMsg, &chatActionBarJoinRequest)
		return &chatActionBarJoinRequest, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// KeyboardButtonType Describes a keyboard button type
type KeyboardButtonType interface {
	GetKeyboardButtonTypeEnum() KeyboardButtonTypeEnum
}

// KeyboardButtonTypeEnum Alias for abstract KeyboardButtonType 'Sub-Classes', used as constant-enum here
type KeyboardButtonTypeEnum string

// KeyboardButtonType enums
const (
	KeyboardButtonTypeTextType               KeyboardButtonTypeEnum = "keyboardButtonTypeText"
	KeyboardButtonTypeRequestPhoneNumberType KeyboardButtonTypeEnum = "keyboardButtonTypeRequestPhoneNumber"
	KeyboardButtonTypeRequestLocationType    KeyboardButtonTypeEnum = "keyboardButtonTypeRequestLocation"
	KeyboardButtonTypeRequestPollType        KeyboardButtonTypeEnum = "keyboardButtonTypeRequestPoll"
)

func unmarshalKeyboardButtonType(rawMsg *json.RawMessage) (KeyboardButtonType, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch KeyboardButtonTypeEnum(objMap["@type"].(string)) {
	case KeyboardButtonTypeTextType:
		var keyboardButtonTypeText KeyboardButtonTypeText
		err := json.Unmarshal(*rawMsg, &keyboardButtonTypeText)
		return &keyboardButtonTypeText, err

	case KeyboardButtonTypeRequestPhoneNumberType:
		var keyboardButtonTypeRequestPhoneNumber KeyboardButtonTypeRequestPhoneNumber
		err := json.Unmarshal(*rawMsg, &keyboardButtonTypeRequestPhoneNumber)
		return &keyboardButtonTypeRequestPhoneNumber, err

	case KeyboardButtonTypeRequestLocationType:
		var keyboardButtonTypeRequestLocation KeyboardButtonTypeRequestLocation
		err := json.Unmarshal(*rawMsg, &keyboardButtonTypeRequestLocation)
		return &keyboardButtonTypeRequestLocation, err

	case KeyboardButtonTypeRequestPollType:
		var keyboardButtonTypeRequestPoll KeyboardButtonTypeRequestPoll
		err := json.Unmarshal(*rawMsg, &keyboardButtonTypeRequestPoll)
		return &keyboardButtonTypeRequestPoll, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// InlineKeyboardButtonType Describes the type of an inline keyboard button
type InlineKeyboardButtonType interface {
	GetInlineKeyboardButtonTypeEnum() InlineKeyboardButtonTypeEnum
}

// InlineKeyboardButtonTypeEnum Alias for abstract InlineKeyboardButtonType 'Sub-Classes', used as constant-enum here
type InlineKeyboardButtonTypeEnum string

// InlineKeyboardButtonType enums
const (
	InlineKeyboardButtonTypeURLType                  InlineKeyboardButtonTypeEnum = "inlineKeyboardButtonTypeUrl"
	InlineKeyboardButtonTypeLoginURLType             InlineKeyboardButtonTypeEnum = "inlineKeyboardButtonTypeLoginUrl"
	InlineKeyboardButtonTypeCallbackType             InlineKeyboardButtonTypeEnum = "inlineKeyboardButtonTypeCallback"
	InlineKeyboardButtonTypeCallbackWithPasswordType InlineKeyboardButtonTypeEnum = "inlineKeyboardButtonTypeCallbackWithPassword"
	InlineKeyboardButtonTypeCallbackGameType         InlineKeyboardButtonTypeEnum = "inlineKeyboardButtonTypeCallbackGame"
	InlineKeyboardButtonTypeSwitchInlineType         InlineKeyboardButtonTypeEnum = "inlineKeyboardButtonTypeSwitchInline"
	InlineKeyboardButtonTypeBuyType                  InlineKeyboardButtonTypeEnum = "inlineKeyboardButtonTypeBuy"
	InlineKeyboardButtonTypeUserType                 InlineKeyboardButtonTypeEnum = "inlineKeyboardButtonTypeUser"
)

func unmarshalInlineKeyboardButtonType(rawMsg *json.RawMessage) (InlineKeyboardButtonType, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch InlineKeyboardButtonTypeEnum(objMap["@type"].(string)) {
	case InlineKeyboardButtonTypeURLType:
		var inlineKeyboardButtonTypeURL InlineKeyboardButtonTypeURL
		err := json.Unmarshal(*rawMsg, &inlineKeyboardButtonTypeURL)
		return &inlineKeyboardButtonTypeURL, err

	case InlineKeyboardButtonTypeLoginURLType:
		var inlineKeyboardButtonTypeLoginURL InlineKeyboardButtonTypeLoginURL
		err := json.Unmarshal(*rawMsg, &inlineKeyboardButtonTypeLoginURL)
		return &inlineKeyboardButtonTypeLoginURL, err

	case InlineKeyboardButtonTypeCallbackType:
		var inlineKeyboardButtonTypeCallback InlineKeyboardButtonTypeCallback
		err := json.Unmarshal(*rawMsg, &inlineKeyboardButtonTypeCallback)
		return &inlineKeyboardButtonTypeCallback, err

	case InlineKeyboardButtonTypeCallbackWithPasswordType:
		var inlineKeyboardButtonTypeCallbackWithPassword InlineKeyboardButtonTypeCallbackWithPassword
		err := json.Unmarshal(*rawMsg, &inlineKeyboardButtonTypeCallbackWithPassword)
		return &inlineKeyboardButtonTypeCallbackWithPassword, err

	case InlineKeyboardButtonTypeCallbackGameType:
		var inlineKeyboardButtonTypeCallbackGame InlineKeyboardButtonTypeCallbackGame
		err := json.Unmarshal(*rawMsg, &inlineKeyboardButtonTypeCallbackGame)
		return &inlineKeyboardButtonTypeCallbackGame, err

	case InlineKeyboardButtonTypeSwitchInlineType:
		var inlineKeyboardButtonTypeSwitchInline InlineKeyboardButtonTypeSwitchInline
		err := json.Unmarshal(*rawMsg, &inlineKeyboardButtonTypeSwitchInline)
		return &inlineKeyboardButtonTypeSwitchInline, err

	case InlineKeyboardButtonTypeBuyType:
		var inlineKeyboardButtonTypeBuy InlineKeyboardButtonTypeBuy
		err := json.Unmarshal(*rawMsg, &inlineKeyboardButtonTypeBuy)
		return &inlineKeyboardButtonTypeBuy, err

	case InlineKeyboardButtonTypeUserType:
		var inlineKeyboardButtonTypeUser InlineKeyboardButtonTypeUser
		err := json.Unmarshal(*rawMsg, &inlineKeyboardButtonTypeUser)
		return &inlineKeyboardButtonTypeUser, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// ReplyMarkup Contains a description of a custom keyboard and actions that can be done with it to quickly reply to bots
type ReplyMarkup interface {
	GetReplyMarkupEnum() ReplyMarkupEnum
}

// ReplyMarkupEnum Alias for abstract ReplyMarkup 'Sub-Classes', used as constant-enum here
type ReplyMarkupEnum string

// ReplyMarkup enums
const (
	ReplyMarkupRemoveKeyboardType ReplyMarkupEnum = "replyMarkupRemoveKeyboard"
	ReplyMarkupForceReplyType     ReplyMarkupEnum = "replyMarkupForceReply"
	ReplyMarkupShowKeyboardType   ReplyMarkupEnum = "replyMarkupShowKeyboard"
	ReplyMarkupInlineKeyboardType ReplyMarkupEnum = "replyMarkupInlineKeyboard"
)

func unmarshalReplyMarkup(rawMsg *json.RawMessage) (ReplyMarkup, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch ReplyMarkupEnum(objMap["@type"].(string)) {
	case ReplyMarkupRemoveKeyboardType:
		var replyMarkupRemoveKeyboard ReplyMarkupRemoveKeyboard
		err := json.Unmarshal(*rawMsg, &replyMarkupRemoveKeyboard)
		return &replyMarkupRemoveKeyboard, err

	case ReplyMarkupForceReplyType:
		var replyMarkupForceReply ReplyMarkupForceReply
		err := json.Unmarshal(*rawMsg, &replyMarkupForceReply)
		return &replyMarkupForceReply, err

	case ReplyMarkupShowKeyboardType:
		var replyMarkupShowKeyboard ReplyMarkupShowKeyboard
		err := json.Unmarshal(*rawMsg, &replyMarkupShowKeyboard)
		return &replyMarkupShowKeyboard, err

	case ReplyMarkupInlineKeyboardType:
		var replyMarkupInlineKeyboard ReplyMarkupInlineKeyboard
		err := json.Unmarshal(*rawMsg, &replyMarkupInlineKeyboard)
		return &replyMarkupInlineKeyboard, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// LoginURLInfo Contains information about an inline button of type inlineKeyboardButtonTypeLoginUrl
type LoginURLInfo interface {
	GetLoginURLInfoEnum() LoginURLInfoEnum
}

// LoginURLInfoEnum Alias for abstract LoginURLInfo 'Sub-Classes', used as constant-enum here
type LoginURLInfoEnum string

// LoginURLInfo enums
const ()

func unmarshalLoginURLInfo(rawMsg *json.RawMessage) (LoginURLInfo, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch LoginURLInfoEnum(objMap["@type"].(string)) {

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// RichText Describes a text object inside an instant-view web page
type RichText interface {
	GetRichTextEnum() RichTextEnum
}

// RichTextEnum Alias for abstract RichText 'Sub-Classes', used as constant-enum here
type RichTextEnum string

// RichText enums
const (
	RichTextPlainType         RichTextEnum = "richTextPlain"
	RichTextBoldType          RichTextEnum = "richTextBold"
	RichTextItalicType        RichTextEnum = "richTextItalic"
	RichTextUnderlineType     RichTextEnum = "richTextUnderline"
	RichTextStrikethroughType RichTextEnum = "richTextStrikethrough"
	RichTextFixedType         RichTextEnum = "richTextFixed"
	RichTextURLType           RichTextEnum = "richTextUrl"
	RichTextEmailAddressType  RichTextEnum = "richTextEmailAddress"
	RichTextSubscriptType     RichTextEnum = "richTextSubscript"
	RichTextSuperscriptType   RichTextEnum = "richTextSuperscript"
	RichTextMarkedType        RichTextEnum = "richTextMarked"
	RichTextPhoneNumberType   RichTextEnum = "richTextPhoneNumber"
	RichTextIconType          RichTextEnum = "richTextIcon"
	RichTextReferenceType     RichTextEnum = "richTextReference"
	RichTextAnchorType        RichTextEnum = "richTextAnchor"
	RichTextAnchorLinkType    RichTextEnum = "richTextAnchorLink"
	RichTextsType             RichTextEnum = "richTexts"
)

func unmarshalRichText(rawMsg *json.RawMessage) (RichText, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch RichTextEnum(objMap["@type"].(string)) {
	case RichTextPlainType:
		var richTextPlain RichTextPlain
		err := json.Unmarshal(*rawMsg, &richTextPlain)
		return &richTextPlain, err

	case RichTextBoldType:
		var richTextBold RichTextBold
		err := json.Unmarshal(*rawMsg, &richTextBold)
		return &richTextBold, err

	case RichTextItalicType:
		var richTextItalic RichTextItalic
		err := json.Unmarshal(*rawMsg, &richTextItalic)
		return &richTextItalic, err

	case RichTextUnderlineType:
		var richTextUnderline RichTextUnderline
		err := json.Unmarshal(*rawMsg, &richTextUnderline)
		return &richTextUnderline, err

	case RichTextStrikethroughType:
		var richTextStrikethrough RichTextStrikethrough
		err := json.Unmarshal(*rawMsg, &richTextStrikethrough)
		return &richTextStrikethrough, err

	case RichTextFixedType:
		var richTextFixed RichTextFixed
		err := json.Unmarshal(*rawMsg, &richTextFixed)
		return &richTextFixed, err

	case RichTextURLType:
		var richTextURL RichTextURL
		err := json.Unmarshal(*rawMsg, &richTextURL)
		return &richTextURL, err

	case RichTextEmailAddressType:
		var richTextEmailAddress RichTextEmailAddress
		err := json.Unmarshal(*rawMsg, &richTextEmailAddress)
		return &richTextEmailAddress, err

	case RichTextSubscriptType:
		var richTextSubscript RichTextSubscript
		err := json.Unmarshal(*rawMsg, &richTextSubscript)
		return &richTextSubscript, err

	case RichTextSuperscriptType:
		var richTextSuperscript RichTextSuperscript
		err := json.Unmarshal(*rawMsg, &richTextSuperscript)
		return &richTextSuperscript, err

	case RichTextMarkedType:
		var richTextMarked RichTextMarked
		err := json.Unmarshal(*rawMsg, &richTextMarked)
		return &richTextMarked, err

	case RichTextPhoneNumberType:
		var richTextPhoneNumber RichTextPhoneNumber
		err := json.Unmarshal(*rawMsg, &richTextPhoneNumber)
		return &richTextPhoneNumber, err

	case RichTextIconType:
		var richTextIcon RichTextIcon
		err := json.Unmarshal(*rawMsg, &richTextIcon)
		return &richTextIcon, err

	case RichTextReferenceType:
		var richTextReference RichTextReference
		err := json.Unmarshal(*rawMsg, &richTextReference)
		return &richTextReference, err

	case RichTextAnchorType:
		var richTextAnchor RichTextAnchor
		err := json.Unmarshal(*rawMsg, &richTextAnchor)
		return &richTextAnchor, err

	case RichTextAnchorLinkType:
		var richTextAnchorLink RichTextAnchorLink
		err := json.Unmarshal(*rawMsg, &richTextAnchorLink)
		return &richTextAnchorLink, err

	case RichTextsType:
		var richTexts RichTexts
		err := json.Unmarshal(*rawMsg, &richTexts)
		return &richTexts, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// PageBlockHorizontalAlignment Describes a horizontal alignment of a table cell content
type PageBlockHorizontalAlignment interface {
	GetPageBlockHorizontalAlignmentEnum() PageBlockHorizontalAlignmentEnum
}

// PageBlockHorizontalAlignmentEnum Alias for abstract PageBlockHorizontalAlignment 'Sub-Classes', used as constant-enum here
type PageBlockHorizontalAlignmentEnum string

// PageBlockHorizontalAlignment enums
const (
	PageBlockHorizontalAlignmentLeftType   PageBlockHorizontalAlignmentEnum = "pageBlockHorizontalAlignmentLeft"
	PageBlockHorizontalAlignmentCenterType PageBlockHorizontalAlignmentEnum = "pageBlockHorizontalAlignmentCenter"
	PageBlockHorizontalAlignmentRightType  PageBlockHorizontalAlignmentEnum = "pageBlockHorizontalAlignmentRight"
)

func unmarshalPageBlockHorizontalAlignment(rawMsg *json.RawMessage) (PageBlockHorizontalAlignment, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch PageBlockHorizontalAlignmentEnum(objMap["@type"].(string)) {
	case PageBlockHorizontalAlignmentLeftType:
		var pageBlockHorizontalAlignmentLeft PageBlockHorizontalAlignmentLeft
		err := json.Unmarshal(*rawMsg, &pageBlockHorizontalAlignmentLeft)
		return &pageBlockHorizontalAlignmentLeft, err

	case PageBlockHorizontalAlignmentCenterType:
		var pageBlockHorizontalAlignmentCenter PageBlockHorizontalAlignmentCenter
		err := json.Unmarshal(*rawMsg, &pageBlockHorizontalAlignmentCenter)
		return &pageBlockHorizontalAlignmentCenter, err

	case PageBlockHorizontalAlignmentRightType:
		var pageBlockHorizontalAlignmentRight PageBlockHorizontalAlignmentRight
		err := json.Unmarshal(*rawMsg, &pageBlockHorizontalAlignmentRight)
		return &pageBlockHorizontalAlignmentRight, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// PageBlockVerticalAlignment Describes a Vertical alignment of a table cell content
type PageBlockVerticalAlignment interface {
	GetPageBlockVerticalAlignmentEnum() PageBlockVerticalAlignmentEnum
}

// PageBlockVerticalAlignmentEnum Alias for abstract PageBlockVerticalAlignment 'Sub-Classes', used as constant-enum here
type PageBlockVerticalAlignmentEnum string

// PageBlockVerticalAlignment enums
const (
	PageBlockVerticalAlignmentTopType    PageBlockVerticalAlignmentEnum = "pageBlockVerticalAlignmentTop"
	PageBlockVerticalAlignmentMiddleType PageBlockVerticalAlignmentEnum = "pageBlockVerticalAlignmentMiddle"
	PageBlockVerticalAlignmentBottomType PageBlockVerticalAlignmentEnum = "pageBlockVerticalAlignmentBottom"
)

func unmarshalPageBlockVerticalAlignment(rawMsg *json.RawMessage) (PageBlockVerticalAlignment, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch PageBlockVerticalAlignmentEnum(objMap["@type"].(string)) {
	case PageBlockVerticalAlignmentTopType:
		var pageBlockVerticalAlignmentTop PageBlockVerticalAlignmentTop
		err := json.Unmarshal(*rawMsg, &pageBlockVerticalAlignmentTop)
		return &pageBlockVerticalAlignmentTop, err

	case PageBlockVerticalAlignmentMiddleType:
		var pageBlockVerticalAlignmentMiddle PageBlockVerticalAlignmentMiddle
		err := json.Unmarshal(*rawMsg, &pageBlockVerticalAlignmentMiddle)
		return &pageBlockVerticalAlignmentMiddle, err

	case PageBlockVerticalAlignmentBottomType:
		var pageBlockVerticalAlignmentBottom PageBlockVerticalAlignmentBottom
		err := json.Unmarshal(*rawMsg, &pageBlockVerticalAlignmentBottom)
		return &pageBlockVerticalAlignmentBottom, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// PageBlock Describes a block of an instant view web page
type PageBlock interface {
	GetPageBlockEnum() PageBlockEnum
}

// PageBlockEnum Alias for abstract PageBlock 'Sub-Classes', used as constant-enum here
type PageBlockEnum string

// PageBlock enums
const (
	PageBlockTitleType           PageBlockEnum = "pageBlockTitle"
	PageBlockSubtitleType        PageBlockEnum = "pageBlockSubtitle"
	PageBlockAuthorDateType      PageBlockEnum = "pageBlockAuthorDate"
	PageBlockHeaderType          PageBlockEnum = "pageBlockHeader"
	PageBlockSubheaderType       PageBlockEnum = "pageBlockSubheader"
	PageBlockKickerType          PageBlockEnum = "pageBlockKicker"
	PageBlockParagraphType       PageBlockEnum = "pageBlockParagraph"
	PageBlockPreformattedType    PageBlockEnum = "pageBlockPreformatted"
	PageBlockFooterType          PageBlockEnum = "pageBlockFooter"
	PageBlockDividerType         PageBlockEnum = "pageBlockDivider"
	PageBlockAnchorType          PageBlockEnum = "pageBlockAnchor"
	PageBlockListType            PageBlockEnum = "pageBlockList"
	PageBlockBlockQuoteType      PageBlockEnum = "pageBlockBlockQuote"
	PageBlockPullQuoteType       PageBlockEnum = "pageBlockPullQuote"
	PageBlockAnimationType       PageBlockEnum = "pageBlockAnimation"
	PageBlockAudioType           PageBlockEnum = "pageBlockAudio"
	PageBlockPhotoType           PageBlockEnum = "pageBlockPhoto"
	PageBlockVideoType           PageBlockEnum = "pageBlockVideo"
	PageBlockVoiceNoteType       PageBlockEnum = "pageBlockVoiceNote"
	PageBlockCoverType           PageBlockEnum = "pageBlockCover"
	PageBlockEmbeddedType        PageBlockEnum = "pageBlockEmbedded"
	PageBlockEmbeddedPostType    PageBlockEnum = "pageBlockEmbeddedPost"
	PageBlockCollageType         PageBlockEnum = "pageBlockCollage"
	PageBlockSlideshowType       PageBlockEnum = "pageBlockSlideshow"
	PageBlockChatLinkType        PageBlockEnum = "pageBlockChatLink"
	PageBlockTableType           PageBlockEnum = "pageBlockTable"
	PageBlockDetailsType         PageBlockEnum = "pageBlockDetails"
	PageBlockRelatedArticlesType PageBlockEnum = "pageBlockRelatedArticles"
	PageBlockMapType             PageBlockEnum = "pageBlockMap"
)

func unmarshalPageBlock(rawMsg *json.RawMessage) (PageBlock, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch PageBlockEnum(objMap["@type"].(string)) {
	case PageBlockTitleType:
		var pageBlockTitle PageBlockTitle
		err := json.Unmarshal(*rawMsg, &pageBlockTitle)
		return &pageBlockTitle, err

	case PageBlockSubtitleType:
		var pageBlockSubtitle PageBlockSubtitle
		err := json.Unmarshal(*rawMsg, &pageBlockSubtitle)
		return &pageBlockSubtitle, err

	case PageBlockAuthorDateType:
		var pageBlockAuthorDate PageBlockAuthorDate
		err := json.Unmarshal(*rawMsg, &pageBlockAuthorDate)
		return &pageBlockAuthorDate, err

	case PageBlockHeaderType:
		var pageBlockHeader PageBlockHeader
		err := json.Unmarshal(*rawMsg, &pageBlockHeader)
		return &pageBlockHeader, err

	case PageBlockSubheaderType:
		var pageBlockSubheader PageBlockSubheader
		err := json.Unmarshal(*rawMsg, &pageBlockSubheader)
		return &pageBlockSubheader, err

	case PageBlockKickerType:
		var pageBlockKicker PageBlockKicker
		err := json.Unmarshal(*rawMsg, &pageBlockKicker)
		return &pageBlockKicker, err

	case PageBlockParagraphType:
		var pageBlockParagraph PageBlockParagraph
		err := json.Unmarshal(*rawMsg, &pageBlockParagraph)
		return &pageBlockParagraph, err

	case PageBlockPreformattedType:
		var pageBlockPreformatted PageBlockPreformatted
		err := json.Unmarshal(*rawMsg, &pageBlockPreformatted)
		return &pageBlockPreformatted, err

	case PageBlockFooterType:
		var pageBlockFooter PageBlockFooter
		err := json.Unmarshal(*rawMsg, &pageBlockFooter)
		return &pageBlockFooter, err

	case PageBlockDividerType:
		var pageBlockDivider PageBlockDivider
		err := json.Unmarshal(*rawMsg, &pageBlockDivider)
		return &pageBlockDivider, err

	case PageBlockAnchorType:
		var pageBlockAnchor PageBlockAnchor
		err := json.Unmarshal(*rawMsg, &pageBlockAnchor)
		return &pageBlockAnchor, err

	case PageBlockListType:
		var pageBlockList PageBlockList
		err := json.Unmarshal(*rawMsg, &pageBlockList)
		return &pageBlockList, err

	case PageBlockBlockQuoteType:
		var pageBlockBlockQuote PageBlockBlockQuote
		err := json.Unmarshal(*rawMsg, &pageBlockBlockQuote)
		return &pageBlockBlockQuote, err

	case PageBlockPullQuoteType:
		var pageBlockPullQuote PageBlockPullQuote
		err := json.Unmarshal(*rawMsg, &pageBlockPullQuote)
		return &pageBlockPullQuote, err

	case PageBlockAnimationType:
		var pageBlockAnimation PageBlockAnimation
		err := json.Unmarshal(*rawMsg, &pageBlockAnimation)
		return &pageBlockAnimation, err

	case PageBlockAudioType:
		var pageBlockAudio PageBlockAudio
		err := json.Unmarshal(*rawMsg, &pageBlockAudio)
		return &pageBlockAudio, err

	case PageBlockPhotoType:
		var pageBlockPhoto PageBlockPhoto
		err := json.Unmarshal(*rawMsg, &pageBlockPhoto)
		return &pageBlockPhoto, err

	case PageBlockVideoType:
		var pageBlockVideo PageBlockVideo
		err := json.Unmarshal(*rawMsg, &pageBlockVideo)
		return &pageBlockVideo, err

	case PageBlockVoiceNoteType:
		var pageBlockVoiceNote PageBlockVoiceNote
		err := json.Unmarshal(*rawMsg, &pageBlockVoiceNote)
		return &pageBlockVoiceNote, err

	case PageBlockCoverType:
		var pageBlockCover PageBlockCover
		err := json.Unmarshal(*rawMsg, &pageBlockCover)
		return &pageBlockCover, err

	case PageBlockEmbeddedType:
		var pageBlockEmbedded PageBlockEmbedded
		err := json.Unmarshal(*rawMsg, &pageBlockEmbedded)
		return &pageBlockEmbedded, err

	case PageBlockEmbeddedPostType:
		var pageBlockEmbeddedPost PageBlockEmbeddedPost
		err := json.Unmarshal(*rawMsg, &pageBlockEmbeddedPost)
		return &pageBlockEmbeddedPost, err

	case PageBlockCollageType:
		var pageBlockCollage PageBlockCollage
		err := json.Unmarshal(*rawMsg, &pageBlockCollage)
		return &pageBlockCollage, err

	case PageBlockSlideshowType:
		var pageBlockSlideshow PageBlockSlideshow
		err := json.Unmarshal(*rawMsg, &pageBlockSlideshow)
		return &pageBlockSlideshow, err

	case PageBlockChatLinkType:
		var pageBlockChatLink PageBlockChatLink
		err := json.Unmarshal(*rawMsg, &pageBlockChatLink)
		return &pageBlockChatLink, err

	case PageBlockTableType:
		var pageBlockTable PageBlockTable
		err := json.Unmarshal(*rawMsg, &pageBlockTable)
		return &pageBlockTable, err

	case PageBlockDetailsType:
		var pageBlockDetails PageBlockDetails
		err := json.Unmarshal(*rawMsg, &pageBlockDetails)
		return &pageBlockDetails, err

	case PageBlockRelatedArticlesType:
		var pageBlockRelatedArticles PageBlockRelatedArticles
		err := json.Unmarshal(*rawMsg, &pageBlockRelatedArticles)
		return &pageBlockRelatedArticles, err

	case PageBlockMapType:
		var pageBlockMap PageBlockMap
		err := json.Unmarshal(*rawMsg, &pageBlockMap)
		return &pageBlockMap, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// InputCredentials Contains information about the payment method chosen by the user
type InputCredentials interface {
	GetInputCredentialsEnum() InputCredentialsEnum
}

// InputCredentialsEnum Alias for abstract InputCredentials 'Sub-Classes', used as constant-enum here
type InputCredentialsEnum string

// InputCredentials enums
const (
	InputCredentialsSavedType     InputCredentialsEnum = "inputCredentialsSaved"
	InputCredentialsNewType       InputCredentialsEnum = "inputCredentialsNew"
	InputCredentialsApplePayType  InputCredentialsEnum = "inputCredentialsApplePay"
	InputCredentialsGooglePayType InputCredentialsEnum = "inputCredentialsGooglePay"
)

func unmarshalInputCredentials(rawMsg *json.RawMessage) (InputCredentials, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch InputCredentialsEnum(objMap["@type"].(string)) {
	case InputCredentialsSavedType:
		var inputCredentialsSaved InputCredentialsSaved
		err := json.Unmarshal(*rawMsg, &inputCredentialsSaved)
		return &inputCredentialsSaved, err

	case InputCredentialsNewType:
		var inputCredentialsNew InputCredentialsNew
		err := json.Unmarshal(*rawMsg, &inputCredentialsNew)
		return &inputCredentialsNew, err

	case InputCredentialsApplePayType:
		var inputCredentialsApplePay InputCredentialsApplePay
		err := json.Unmarshal(*rawMsg, &inputCredentialsApplePay)
		return &inputCredentialsApplePay, err

	case InputCredentialsGooglePayType:
		var inputCredentialsGooglePay InputCredentialsGooglePay
		err := json.Unmarshal(*rawMsg, &inputCredentialsGooglePay)
		return &inputCredentialsGooglePay, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// PassportElementType Contains the type of a Telegram Passport element
type PassportElementType interface {
	GetPassportElementTypeEnum() PassportElementTypeEnum
}

// PassportElementTypeEnum Alias for abstract PassportElementType 'Sub-Classes', used as constant-enum here
type PassportElementTypeEnum string

// PassportElementType enums
const (
	PassportElementTypePersonalDetailsType       PassportElementTypeEnum = "passportElementTypePersonalDetails"
	PassportElementTypePassportType              PassportElementTypeEnum = "passportElementTypePassport"
	PassportElementTypeDriverLicenseType         PassportElementTypeEnum = "passportElementTypeDriverLicense"
	PassportElementTypeIDentityCardType          PassportElementTypeEnum = "passportElementTypeIdentityCard"
	PassportElementTypeInternalPassportType      PassportElementTypeEnum = "passportElementTypeInternalPassport"
	PassportElementTypeAddressType               PassportElementTypeEnum = "passportElementTypeAddress"
	PassportElementTypeUtilityBillType           PassportElementTypeEnum = "passportElementTypeUtilityBill"
	PassportElementTypeBankStatementType         PassportElementTypeEnum = "passportElementTypeBankStatement"
	PassportElementTypeRentalAgreementType       PassportElementTypeEnum = "passportElementTypeRentalAgreement"
	PassportElementTypePassportRegistrationType  PassportElementTypeEnum = "passportElementTypePassportRegistration"
	PassportElementTypeTemporaryRegistrationType PassportElementTypeEnum = "passportElementTypeTemporaryRegistration"
	PassportElementTypePhoneNumberType           PassportElementTypeEnum = "passportElementTypePhoneNumber"
	PassportElementTypeEmailAddressType          PassportElementTypeEnum = "passportElementTypeEmailAddress"
)

func unmarshalPassportElementType(rawMsg *json.RawMessage) (PassportElementType, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch PassportElementTypeEnum(objMap["@type"].(string)) {
	case PassportElementTypePersonalDetailsType:
		var passportElementTypePersonalDetails PassportElementTypePersonalDetails
		err := json.Unmarshal(*rawMsg, &passportElementTypePersonalDetails)
		return &passportElementTypePersonalDetails, err

	case PassportElementTypePassportType:
		var passportElementTypePassport PassportElementTypePassport
		err := json.Unmarshal(*rawMsg, &passportElementTypePassport)
		return &passportElementTypePassport, err

	case PassportElementTypeDriverLicenseType:
		var passportElementTypeDriverLicense PassportElementTypeDriverLicense
		err := json.Unmarshal(*rawMsg, &passportElementTypeDriverLicense)
		return &passportElementTypeDriverLicense, err

	case PassportElementTypeIDentityCardType:
		var passportElementTypeIDentityCard PassportElementTypeIDentityCard
		err := json.Unmarshal(*rawMsg, &passportElementTypeIDentityCard)
		return &passportElementTypeIDentityCard, err

	case PassportElementTypeInternalPassportType:
		var passportElementTypeInternalPassport PassportElementTypeInternalPassport
		err := json.Unmarshal(*rawMsg, &passportElementTypeInternalPassport)
		return &passportElementTypeInternalPassport, err

	case PassportElementTypeAddressType:
		var passportElementTypeAddress PassportElementTypeAddress
		err := json.Unmarshal(*rawMsg, &passportElementTypeAddress)
		return &passportElementTypeAddress, err

	case PassportElementTypeUtilityBillType:
		var passportElementTypeUtilityBill PassportElementTypeUtilityBill
		err := json.Unmarshal(*rawMsg, &passportElementTypeUtilityBill)
		return &passportElementTypeUtilityBill, err

	case PassportElementTypeBankStatementType:
		var passportElementTypeBankStatement PassportElementTypeBankStatement
		err := json.Unmarshal(*rawMsg, &passportElementTypeBankStatement)
		return &passportElementTypeBankStatement, err

	case PassportElementTypeRentalAgreementType:
		var passportElementTypeRentalAgreement PassportElementTypeRentalAgreement
		err := json.Unmarshal(*rawMsg, &passportElementTypeRentalAgreement)
		return &passportElementTypeRentalAgreement, err

	case PassportElementTypePassportRegistrationType:
		var passportElementTypePassportRegistration PassportElementTypePassportRegistration
		err := json.Unmarshal(*rawMsg, &passportElementTypePassportRegistration)
		return &passportElementTypePassportRegistration, err

	case PassportElementTypeTemporaryRegistrationType:
		var passportElementTypeTemporaryRegistration PassportElementTypeTemporaryRegistration
		err := json.Unmarshal(*rawMsg, &passportElementTypeTemporaryRegistration)
		return &passportElementTypeTemporaryRegistration, err

	case PassportElementTypePhoneNumberType:
		var passportElementTypePhoneNumber PassportElementTypePhoneNumber
		err := json.Unmarshal(*rawMsg, &passportElementTypePhoneNumber)
		return &passportElementTypePhoneNumber, err

	case PassportElementTypeEmailAddressType:
		var passportElementTypeEmailAddress PassportElementTypeEmailAddress
		err := json.Unmarshal(*rawMsg, &passportElementTypeEmailAddress)
		return &passportElementTypeEmailAddress, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// PassportElement Contains information about a Telegram Passport element
type PassportElement interface {
	GetPassportElementEnum() PassportElementEnum
}

// PassportElementEnum Alias for abstract PassportElement 'Sub-Classes', used as constant-enum here
type PassportElementEnum string

// PassportElement enums
const (
	PassportElementPersonalDetailsType       PassportElementEnum = "passportElementPersonalDetails"
	PassportElementPassportType              PassportElementEnum = "passportElementPassport"
	PassportElementDriverLicenseType         PassportElementEnum = "passportElementDriverLicense"
	PassportElementIDentityCardType          PassportElementEnum = "passportElementIdentityCard"
	PassportElementInternalPassportType      PassportElementEnum = "passportElementInternalPassport"
	PassportElementAddressType               PassportElementEnum = "passportElementAddress"
	PassportElementUtilityBillType           PassportElementEnum = "passportElementUtilityBill"
	PassportElementBankStatementType         PassportElementEnum = "passportElementBankStatement"
	PassportElementRentalAgreementType       PassportElementEnum = "passportElementRentalAgreement"
	PassportElementPassportRegistrationType  PassportElementEnum = "passportElementPassportRegistration"
	PassportElementTemporaryRegistrationType PassportElementEnum = "passportElementTemporaryRegistration"
	PassportElementPhoneNumberType           PassportElementEnum = "passportElementPhoneNumber"
	PassportElementEmailAddressType          PassportElementEnum = "passportElementEmailAddress"
)

func unmarshalPassportElement(rawMsg *json.RawMessage) (PassportElement, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch PassportElementEnum(objMap["@type"].(string)) {
	case PassportElementPersonalDetailsType:
		var passportElementPersonalDetails PassportElementPersonalDetails
		err := json.Unmarshal(*rawMsg, &passportElementPersonalDetails)
		return &passportElementPersonalDetails, err

	case PassportElementPassportType:
		var passportElementPassport PassportElementPassport
		err := json.Unmarshal(*rawMsg, &passportElementPassport)
		return &passportElementPassport, err

	case PassportElementDriverLicenseType:
		var passportElementDriverLicense PassportElementDriverLicense
		err := json.Unmarshal(*rawMsg, &passportElementDriverLicense)
		return &passportElementDriverLicense, err

	case PassportElementIDentityCardType:
		var passportElementIDentityCard PassportElementIDentityCard
		err := json.Unmarshal(*rawMsg, &passportElementIDentityCard)
		return &passportElementIDentityCard, err

	case PassportElementInternalPassportType:
		var passportElementInternalPassport PassportElementInternalPassport
		err := json.Unmarshal(*rawMsg, &passportElementInternalPassport)
		return &passportElementInternalPassport, err

	case PassportElementAddressType:
		var passportElementAddress PassportElementAddress
		err := json.Unmarshal(*rawMsg, &passportElementAddress)
		return &passportElementAddress, err

	case PassportElementUtilityBillType:
		var passportElementUtilityBill PassportElementUtilityBill
		err := json.Unmarshal(*rawMsg, &passportElementUtilityBill)
		return &passportElementUtilityBill, err

	case PassportElementBankStatementType:
		var passportElementBankStatement PassportElementBankStatement
		err := json.Unmarshal(*rawMsg, &passportElementBankStatement)
		return &passportElementBankStatement, err

	case PassportElementRentalAgreementType:
		var passportElementRentalAgreement PassportElementRentalAgreement
		err := json.Unmarshal(*rawMsg, &passportElementRentalAgreement)
		return &passportElementRentalAgreement, err

	case PassportElementPassportRegistrationType:
		var passportElementPassportRegistration PassportElementPassportRegistration
		err := json.Unmarshal(*rawMsg, &passportElementPassportRegistration)
		return &passportElementPassportRegistration, err

	case PassportElementTemporaryRegistrationType:
		var passportElementTemporaryRegistration PassportElementTemporaryRegistration
		err := json.Unmarshal(*rawMsg, &passportElementTemporaryRegistration)
		return &passportElementTemporaryRegistration, err

	case PassportElementPhoneNumberType:
		var passportElementPhoneNumber PassportElementPhoneNumber
		err := json.Unmarshal(*rawMsg, &passportElementPhoneNumber)
		return &passportElementPhoneNumber, err

	case PassportElementEmailAddressType:
		var passportElementEmailAddress PassportElementEmailAddress
		err := json.Unmarshal(*rawMsg, &passportElementEmailAddress)
		return &passportElementEmailAddress, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// InputPassportElement Contains information about a Telegram Passport element to be saved
type InputPassportElement interface {
	GetInputPassportElementEnum() InputPassportElementEnum
}

// InputPassportElementEnum Alias for abstract InputPassportElement 'Sub-Classes', used as constant-enum here
type InputPassportElementEnum string

// InputPassportElement enums
const (
	InputPassportElementPersonalDetailsType       InputPassportElementEnum = "inputPassportElementPersonalDetails"
	InputPassportElementPassportType              InputPassportElementEnum = "inputPassportElementPassport"
	InputPassportElementDriverLicenseType         InputPassportElementEnum = "inputPassportElementDriverLicense"
	InputPassportElementIDentityCardType          InputPassportElementEnum = "inputPassportElementIdentityCard"
	InputPassportElementInternalPassportType      InputPassportElementEnum = "inputPassportElementInternalPassport"
	InputPassportElementAddressType               InputPassportElementEnum = "inputPassportElementAddress"
	InputPassportElementUtilityBillType           InputPassportElementEnum = "inputPassportElementUtilityBill"
	InputPassportElementBankStatementType         InputPassportElementEnum = "inputPassportElementBankStatement"
	InputPassportElementRentalAgreementType       InputPassportElementEnum = "inputPassportElementRentalAgreement"
	InputPassportElementPassportRegistrationType  InputPassportElementEnum = "inputPassportElementPassportRegistration"
	InputPassportElementTemporaryRegistrationType InputPassportElementEnum = "inputPassportElementTemporaryRegistration"
	InputPassportElementPhoneNumberType           InputPassportElementEnum = "inputPassportElementPhoneNumber"
	InputPassportElementEmailAddressType          InputPassportElementEnum = "inputPassportElementEmailAddress"
)

func unmarshalInputPassportElement(rawMsg *json.RawMessage) (InputPassportElement, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch InputPassportElementEnum(objMap["@type"].(string)) {
	case InputPassportElementPersonalDetailsType:
		var inputPassportElementPersonalDetails InputPassportElementPersonalDetails
		err := json.Unmarshal(*rawMsg, &inputPassportElementPersonalDetails)
		return &inputPassportElementPersonalDetails, err

	case InputPassportElementPassportType:
		var inputPassportElementPassport InputPassportElementPassport
		err := json.Unmarshal(*rawMsg, &inputPassportElementPassport)
		return &inputPassportElementPassport, err

	case InputPassportElementDriverLicenseType:
		var inputPassportElementDriverLicense InputPassportElementDriverLicense
		err := json.Unmarshal(*rawMsg, &inputPassportElementDriverLicense)
		return &inputPassportElementDriverLicense, err

	case InputPassportElementIDentityCardType:
		var inputPassportElementIDentityCard InputPassportElementIDentityCard
		err := json.Unmarshal(*rawMsg, &inputPassportElementIDentityCard)
		return &inputPassportElementIDentityCard, err

	case InputPassportElementInternalPassportType:
		var inputPassportElementInternalPassport InputPassportElementInternalPassport
		err := json.Unmarshal(*rawMsg, &inputPassportElementInternalPassport)
		return &inputPassportElementInternalPassport, err

	case InputPassportElementAddressType:
		var inputPassportElementAddress InputPassportElementAddress
		err := json.Unmarshal(*rawMsg, &inputPassportElementAddress)
		return &inputPassportElementAddress, err

	case InputPassportElementUtilityBillType:
		var inputPassportElementUtilityBill InputPassportElementUtilityBill
		err := json.Unmarshal(*rawMsg, &inputPassportElementUtilityBill)
		return &inputPassportElementUtilityBill, err

	case InputPassportElementBankStatementType:
		var inputPassportElementBankStatement InputPassportElementBankStatement
		err := json.Unmarshal(*rawMsg, &inputPassportElementBankStatement)
		return &inputPassportElementBankStatement, err

	case InputPassportElementRentalAgreementType:
		var inputPassportElementRentalAgreement InputPassportElementRentalAgreement
		err := json.Unmarshal(*rawMsg, &inputPassportElementRentalAgreement)
		return &inputPassportElementRentalAgreement, err

	case InputPassportElementPassportRegistrationType:
		var inputPassportElementPassportRegistration InputPassportElementPassportRegistration
		err := json.Unmarshal(*rawMsg, &inputPassportElementPassportRegistration)
		return &inputPassportElementPassportRegistration, err

	case InputPassportElementTemporaryRegistrationType:
		var inputPassportElementTemporaryRegistration InputPassportElementTemporaryRegistration
		err := json.Unmarshal(*rawMsg, &inputPassportElementTemporaryRegistration)
		return &inputPassportElementTemporaryRegistration, err

	case InputPassportElementPhoneNumberType:
		var inputPassportElementPhoneNumber InputPassportElementPhoneNumber
		err := json.Unmarshal(*rawMsg, &inputPassportElementPhoneNumber)
		return &inputPassportElementPhoneNumber, err

	case InputPassportElementEmailAddressType:
		var inputPassportElementEmailAddress InputPassportElementEmailAddress
		err := json.Unmarshal(*rawMsg, &inputPassportElementEmailAddress)
		return &inputPassportElementEmailAddress, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// PassportElementErrorSource Contains the description of an error in a Telegram Passport element
type PassportElementErrorSource interface {
	GetPassportElementErrorSourceEnum() PassportElementErrorSourceEnum
}

// PassportElementErrorSourceEnum Alias for abstract PassportElementErrorSource 'Sub-Classes', used as constant-enum here
type PassportElementErrorSourceEnum string

// PassportElementErrorSource enums
const (
	PassportElementErrorSourceUnspecifiedType      PassportElementErrorSourceEnum = "passportElementErrorSourceUnspecified"
	PassportElementErrorSourceDataFieldType        PassportElementErrorSourceEnum = "passportElementErrorSourceDataField"
	PassportElementErrorSourceFrontSideType        PassportElementErrorSourceEnum = "passportElementErrorSourceFrontSide"
	PassportElementErrorSourceReverseSideType      PassportElementErrorSourceEnum = "passportElementErrorSourceReverseSide"
	PassportElementErrorSourceSelfieType           PassportElementErrorSourceEnum = "passportElementErrorSourceSelfie"
	PassportElementErrorSourceTranslationFileType  PassportElementErrorSourceEnum = "passportElementErrorSourceTranslationFile"
	PassportElementErrorSourceTranslationFilesType PassportElementErrorSourceEnum = "passportElementErrorSourceTranslationFiles"
	PassportElementErrorSourceFileType             PassportElementErrorSourceEnum = "passportElementErrorSourceFile"
	PassportElementErrorSourceFilesType            PassportElementErrorSourceEnum = "passportElementErrorSourceFiles"
)

func unmarshalPassportElementErrorSource(rawMsg *json.RawMessage) (PassportElementErrorSource, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch PassportElementErrorSourceEnum(objMap["@type"].(string)) {
	case PassportElementErrorSourceUnspecifiedType:
		var passportElementErrorSourceUnspecified PassportElementErrorSourceUnspecified
		err := json.Unmarshal(*rawMsg, &passportElementErrorSourceUnspecified)
		return &passportElementErrorSourceUnspecified, err

	case PassportElementErrorSourceDataFieldType:
		var passportElementErrorSourceDataField PassportElementErrorSourceDataField
		err := json.Unmarshal(*rawMsg, &passportElementErrorSourceDataField)
		return &passportElementErrorSourceDataField, err

	case PassportElementErrorSourceFrontSideType:
		var passportElementErrorSourceFrontSide PassportElementErrorSourceFrontSide
		err := json.Unmarshal(*rawMsg, &passportElementErrorSourceFrontSide)
		return &passportElementErrorSourceFrontSide, err

	case PassportElementErrorSourceReverseSideType:
		var passportElementErrorSourceReverseSide PassportElementErrorSourceReverseSide
		err := json.Unmarshal(*rawMsg, &passportElementErrorSourceReverseSide)
		return &passportElementErrorSourceReverseSide, err

	case PassportElementErrorSourceSelfieType:
		var passportElementErrorSourceSelfie PassportElementErrorSourceSelfie
		err := json.Unmarshal(*rawMsg, &passportElementErrorSourceSelfie)
		return &passportElementErrorSourceSelfie, err

	case PassportElementErrorSourceTranslationFileType:
		var passportElementErrorSourceTranslationFile PassportElementErrorSourceTranslationFile
		err := json.Unmarshal(*rawMsg, &passportElementErrorSourceTranslationFile)
		return &passportElementErrorSourceTranslationFile, err

	case PassportElementErrorSourceTranslationFilesType:
		var passportElementErrorSourceTranslationFiles PassportElementErrorSourceTranslationFiles
		err := json.Unmarshal(*rawMsg, &passportElementErrorSourceTranslationFiles)
		return &passportElementErrorSourceTranslationFiles, err

	case PassportElementErrorSourceFileType:
		var passportElementErrorSourceFile PassportElementErrorSourceFile
		err := json.Unmarshal(*rawMsg, &passportElementErrorSourceFile)
		return &passportElementErrorSourceFile, err

	case PassportElementErrorSourceFilesType:
		var passportElementErrorSourceFiles PassportElementErrorSourceFiles
		err := json.Unmarshal(*rawMsg, &passportElementErrorSourceFiles)
		return &passportElementErrorSourceFiles, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// InputPassportElementErrorSource Contains the description of an error in a Telegram Passport element; for bots only
type InputPassportElementErrorSource interface {
	GetInputPassportElementErrorSourceEnum() InputPassportElementErrorSourceEnum
}

// InputPassportElementErrorSourceEnum Alias for abstract InputPassportElementErrorSource 'Sub-Classes', used as constant-enum here
type InputPassportElementErrorSourceEnum string

// InputPassportElementErrorSource enums
const (
	InputPassportElementErrorSourceUnspecifiedType      InputPassportElementErrorSourceEnum = "inputPassportElementErrorSourceUnspecified"
	InputPassportElementErrorSourceDataFieldType        InputPassportElementErrorSourceEnum = "inputPassportElementErrorSourceDataField"
	InputPassportElementErrorSourceFrontSideType        InputPassportElementErrorSourceEnum = "inputPassportElementErrorSourceFrontSide"
	InputPassportElementErrorSourceReverseSideType      InputPassportElementErrorSourceEnum = "inputPassportElementErrorSourceReverseSide"
	InputPassportElementErrorSourceSelfieType           InputPassportElementErrorSourceEnum = "inputPassportElementErrorSourceSelfie"
	InputPassportElementErrorSourceTranslationFileType  InputPassportElementErrorSourceEnum = "inputPassportElementErrorSourceTranslationFile"
	InputPassportElementErrorSourceTranslationFilesType InputPassportElementErrorSourceEnum = "inputPassportElementErrorSourceTranslationFiles"
	InputPassportElementErrorSourceFileType             InputPassportElementErrorSourceEnum = "inputPassportElementErrorSourceFile"
	InputPassportElementErrorSourceFilesType            InputPassportElementErrorSourceEnum = "inputPassportElementErrorSourceFiles"
)

func unmarshalInputPassportElementErrorSource(rawMsg *json.RawMessage) (InputPassportElementErrorSource, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch InputPassportElementErrorSourceEnum(objMap["@type"].(string)) {
	case InputPassportElementErrorSourceUnspecifiedType:
		var inputPassportElementErrorSourceUnspecified InputPassportElementErrorSourceUnspecified
		err := json.Unmarshal(*rawMsg, &inputPassportElementErrorSourceUnspecified)
		return &inputPassportElementErrorSourceUnspecified, err

	case InputPassportElementErrorSourceDataFieldType:
		var inputPassportElementErrorSourceDataField InputPassportElementErrorSourceDataField
		err := json.Unmarshal(*rawMsg, &inputPassportElementErrorSourceDataField)
		return &inputPassportElementErrorSourceDataField, err

	case InputPassportElementErrorSourceFrontSideType:
		var inputPassportElementErrorSourceFrontSide InputPassportElementErrorSourceFrontSide
		err := json.Unmarshal(*rawMsg, &inputPassportElementErrorSourceFrontSide)
		return &inputPassportElementErrorSourceFrontSide, err

	case InputPassportElementErrorSourceReverseSideType:
		var inputPassportElementErrorSourceReverseSide InputPassportElementErrorSourceReverseSide
		err := json.Unmarshal(*rawMsg, &inputPassportElementErrorSourceReverseSide)
		return &inputPassportElementErrorSourceReverseSide, err

	case InputPassportElementErrorSourceSelfieType:
		var inputPassportElementErrorSourceSelfie InputPassportElementErrorSourceSelfie
		err := json.Unmarshal(*rawMsg, &inputPassportElementErrorSourceSelfie)
		return &inputPassportElementErrorSourceSelfie, err

	case InputPassportElementErrorSourceTranslationFileType:
		var inputPassportElementErrorSourceTranslationFile InputPassportElementErrorSourceTranslationFile
		err := json.Unmarshal(*rawMsg, &inputPassportElementErrorSourceTranslationFile)
		return &inputPassportElementErrorSourceTranslationFile, err

	case InputPassportElementErrorSourceTranslationFilesType:
		var inputPassportElementErrorSourceTranslationFiles InputPassportElementErrorSourceTranslationFiles
		err := json.Unmarshal(*rawMsg, &inputPassportElementErrorSourceTranslationFiles)
		return &inputPassportElementErrorSourceTranslationFiles, err

	case InputPassportElementErrorSourceFileType:
		var inputPassportElementErrorSourceFile InputPassportElementErrorSourceFile
		err := json.Unmarshal(*rawMsg, &inputPassportElementErrorSourceFile)
		return &inputPassportElementErrorSourceFile, err

	case InputPassportElementErrorSourceFilesType:
		var inputPassportElementErrorSourceFiles InputPassportElementErrorSourceFiles
		err := json.Unmarshal(*rawMsg, &inputPassportElementErrorSourceFiles)
		return &inputPassportElementErrorSourceFiles, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// MessageContent Contains the content of a message
type MessageContent interface {
	GetMessageContentEnum() MessageContentEnum
}

// MessageContentEnum Alias for abstract MessageContent 'Sub-Classes', used as constant-enum here
type MessageContentEnum string

// MessageContent enums
const (
	MessageTextType                        MessageContentEnum = "messageText"
	MessageAnimationType                   MessageContentEnum = "messageAnimation"
	MessageAudioType                       MessageContentEnum = "messageAudio"
	MessageDocumentType                    MessageContentEnum = "messageDocument"
	MessagePhotoType                       MessageContentEnum = "messagePhoto"
	MessageExpiredPhotoType                MessageContentEnum = "messageExpiredPhoto"
	MessageStickerType                     MessageContentEnum = "messageSticker"
	MessageVideoType                       MessageContentEnum = "messageVideo"
	MessageExpiredVideoType                MessageContentEnum = "messageExpiredVideo"
	MessageVideoNoteType                   MessageContentEnum = "messageVideoNote"
	MessageVoiceNoteType                   MessageContentEnum = "messageVoiceNote"
	MessageLocationType                    MessageContentEnum = "messageLocation"
	MessageVenueType                       MessageContentEnum = "messageVenue"
	MessageContactType                     MessageContentEnum = "messageContact"
	MessageAnimatedEmojiType               MessageContentEnum = "messageAnimatedEmoji"
	MessageDiceType                        MessageContentEnum = "messageDice"
	MessageGameType                        MessageContentEnum = "messageGame"
	MessagePollType                        MessageContentEnum = "messagePoll"
	MessageInvoiceType                     MessageContentEnum = "messageInvoice"
	MessageCallType                        MessageContentEnum = "messageCall"
	MessageVideoChatScheduledType          MessageContentEnum = "messageVideoChatScheduled"
	MessageVideoChatStartedType            MessageContentEnum = "messageVideoChatStarted"
	MessageVideoChatEndedType              MessageContentEnum = "messageVideoChatEnded"
	MessageInviteVideoChatParticipantsType MessageContentEnum = "messageInviteVideoChatParticipants"
	MessageBasicGroupChatCreateType        MessageContentEnum = "messageBasicGroupChatCreate"
	MessageSupergroupChatCreateType        MessageContentEnum = "messageSupergroupChatCreate"
	MessageChatChangeTitleType             MessageContentEnum = "messageChatChangeTitle"
	MessageChatChangePhotoType             MessageContentEnum = "messageChatChangePhoto"
	MessageChatDeletePhotoType             MessageContentEnum = "messageChatDeletePhoto"
	MessageChatAddMembersType              MessageContentEnum = "messageChatAddMembers"
	MessageChatJoinByLinkType              MessageContentEnum = "messageChatJoinByLink"
	MessageChatJoinByRequestType           MessageContentEnum = "messageChatJoinByRequest"
	MessageChatDeleteMemberType            MessageContentEnum = "messageChatDeleteMember"
	MessageChatUpgradeToType               MessageContentEnum = "messageChatUpgradeTo"
	MessageChatUpgradeFromType             MessageContentEnum = "messageChatUpgradeFrom"
	MessagePinMessageType                  MessageContentEnum = "messagePinMessage"
	MessageScreenshotTakenType             MessageContentEnum = "messageScreenshotTaken"
	MessageChatSetThemeType                MessageContentEnum = "messageChatSetTheme"
	MessageChatSetTTLType                  MessageContentEnum = "messageChatSetTtl"
	MessageCustomServiceActionType         MessageContentEnum = "messageCustomServiceAction"
	MessageGameScoreType                   MessageContentEnum = "messageGameScore"
	MessagePaymentSuccessfulType           MessageContentEnum = "messagePaymentSuccessful"
	MessagePaymentSuccessfulBotType        MessageContentEnum = "messagePaymentSuccessfulBot"
	MessageContactRegisteredType           MessageContentEnum = "messageContactRegistered"
	MessageWebsiteConnectedType            MessageContentEnum = "messageWebsiteConnected"
	MessagePassportDataSentType            MessageContentEnum = "messagePassportDataSent"
	MessagePassportDataReceivedType        MessageContentEnum = "messagePassportDataReceived"
	MessageProximityAlertTriggeredType     MessageContentEnum = "messageProximityAlertTriggered"
	MessageUnsupportedType                 MessageContentEnum = "messageUnsupported"
)

func unmarshalMessageContent(rawMsg *json.RawMessage) (MessageContent, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch MessageContentEnum(objMap["@type"].(string)) {
	case MessageTextType:
		var messageText MessageText
		err := json.Unmarshal(*rawMsg, &messageText)
		return &messageText, err

	case MessageAnimationType:
		var messageAnimation MessageAnimation
		err := json.Unmarshal(*rawMsg, &messageAnimation)
		return &messageAnimation, err

	case MessageAudioType:
		var messageAudio MessageAudio
		err := json.Unmarshal(*rawMsg, &messageAudio)
		return &messageAudio, err

	case MessageDocumentType:
		var messageDocument MessageDocument
		err := json.Unmarshal(*rawMsg, &messageDocument)
		return &messageDocument, err

	case MessagePhotoType:
		var messagePhoto MessagePhoto
		err := json.Unmarshal(*rawMsg, &messagePhoto)
		return &messagePhoto, err

	case MessageExpiredPhotoType:
		var messageExpiredPhoto MessageExpiredPhoto
		err := json.Unmarshal(*rawMsg, &messageExpiredPhoto)
		return &messageExpiredPhoto, err

	case MessageStickerType:
		var messageSticker MessageSticker
		err := json.Unmarshal(*rawMsg, &messageSticker)
		return &messageSticker, err

	case MessageVideoType:
		var messageVideo MessageVideo
		err := json.Unmarshal(*rawMsg, &messageVideo)
		return &messageVideo, err

	case MessageExpiredVideoType:
		var messageExpiredVideo MessageExpiredVideo
		err := json.Unmarshal(*rawMsg, &messageExpiredVideo)
		return &messageExpiredVideo, err

	case MessageVideoNoteType:
		var messageVideoNote MessageVideoNote
		err := json.Unmarshal(*rawMsg, &messageVideoNote)
		return &messageVideoNote, err

	case MessageVoiceNoteType:
		var messageVoiceNote MessageVoiceNote
		err := json.Unmarshal(*rawMsg, &messageVoiceNote)
		return &messageVoiceNote, err

	case MessageLocationType:
		var messageLocation MessageLocation
		err := json.Unmarshal(*rawMsg, &messageLocation)
		return &messageLocation, err

	case MessageVenueType:
		var messageVenue MessageVenue
		err := json.Unmarshal(*rawMsg, &messageVenue)
		return &messageVenue, err

	case MessageContactType:
		var messageContact MessageContact
		err := json.Unmarshal(*rawMsg, &messageContact)
		return &messageContact, err

	case MessageAnimatedEmojiType:
		var messageAnimatedEmoji MessageAnimatedEmoji
		err := json.Unmarshal(*rawMsg, &messageAnimatedEmoji)
		return &messageAnimatedEmoji, err

	case MessageDiceType:
		var messageDice MessageDice
		err := json.Unmarshal(*rawMsg, &messageDice)
		return &messageDice, err

	case MessageGameType:
		var messageGame MessageGame
		err := json.Unmarshal(*rawMsg, &messageGame)
		return &messageGame, err

	case MessagePollType:
		var messagePoll MessagePoll
		err := json.Unmarshal(*rawMsg, &messagePoll)
		return &messagePoll, err

	case MessageInvoiceType:
		var messageInvoice MessageInvoice
		err := json.Unmarshal(*rawMsg, &messageInvoice)
		return &messageInvoice, err

	case MessageCallType:
		var messageCall MessageCall
		err := json.Unmarshal(*rawMsg, &messageCall)
		return &messageCall, err

	case MessageVideoChatScheduledType:
		var messageVideoChatScheduled MessageVideoChatScheduled
		err := json.Unmarshal(*rawMsg, &messageVideoChatScheduled)
		return &messageVideoChatScheduled, err

	case MessageVideoChatStartedType:
		var messageVideoChatStarted MessageVideoChatStarted
		err := json.Unmarshal(*rawMsg, &messageVideoChatStarted)
		return &messageVideoChatStarted, err

	case MessageVideoChatEndedType:
		var messageVideoChatEnded MessageVideoChatEnded
		err := json.Unmarshal(*rawMsg, &messageVideoChatEnded)
		return &messageVideoChatEnded, err

	case MessageInviteVideoChatParticipantsType:
		var messageInviteVideoChatParticipants MessageInviteVideoChatParticipants
		err := json.Unmarshal(*rawMsg, &messageInviteVideoChatParticipants)
		return &messageInviteVideoChatParticipants, err

	case MessageBasicGroupChatCreateType:
		var messageBasicGroupChatCreate MessageBasicGroupChatCreate
		err := json.Unmarshal(*rawMsg, &messageBasicGroupChatCreate)
		return &messageBasicGroupChatCreate, err

	case MessageSupergroupChatCreateType:
		var messageSupergroupChatCreate MessageSupergroupChatCreate
		err := json.Unmarshal(*rawMsg, &messageSupergroupChatCreate)
		return &messageSupergroupChatCreate, err

	case MessageChatChangeTitleType:
		var messageChatChangeTitle MessageChatChangeTitle
		err := json.Unmarshal(*rawMsg, &messageChatChangeTitle)
		return &messageChatChangeTitle, err

	case MessageChatChangePhotoType:
		var messageChatChangePhoto MessageChatChangePhoto
		err := json.Unmarshal(*rawMsg, &messageChatChangePhoto)
		return &messageChatChangePhoto, err

	case MessageChatDeletePhotoType:
		var messageChatDeletePhoto MessageChatDeletePhoto
		err := json.Unmarshal(*rawMsg, &messageChatDeletePhoto)
		return &messageChatDeletePhoto, err

	case MessageChatAddMembersType:
		var messageChatAddMembers MessageChatAddMembers
		err := json.Unmarshal(*rawMsg, &messageChatAddMembers)
		return &messageChatAddMembers, err

	case MessageChatJoinByLinkType:
		var messageChatJoinByLink MessageChatJoinByLink
		err := json.Unmarshal(*rawMsg, &messageChatJoinByLink)
		return &messageChatJoinByLink, err

	case MessageChatJoinByRequestType:
		var messageChatJoinByRequest MessageChatJoinByRequest
		err := json.Unmarshal(*rawMsg, &messageChatJoinByRequest)
		return &messageChatJoinByRequest, err

	case MessageChatDeleteMemberType:
		var messageChatDeleteMember MessageChatDeleteMember
		err := json.Unmarshal(*rawMsg, &messageChatDeleteMember)
		return &messageChatDeleteMember, err

	case MessageChatUpgradeToType:
		var messageChatUpgradeTo MessageChatUpgradeTo
		err := json.Unmarshal(*rawMsg, &messageChatUpgradeTo)
		return &messageChatUpgradeTo, err

	case MessageChatUpgradeFromType:
		var messageChatUpgradeFrom MessageChatUpgradeFrom
		err := json.Unmarshal(*rawMsg, &messageChatUpgradeFrom)
		return &messageChatUpgradeFrom, err

	case MessagePinMessageType:
		var messagePinMessage MessagePinMessage
		err := json.Unmarshal(*rawMsg, &messagePinMessage)
		return &messagePinMessage, err

	case MessageScreenshotTakenType:
		var messageScreenshotTaken MessageScreenshotTaken
		err := json.Unmarshal(*rawMsg, &messageScreenshotTaken)
		return &messageScreenshotTaken, err

	case MessageChatSetThemeType:
		var messageChatSetTheme MessageChatSetTheme
		err := json.Unmarshal(*rawMsg, &messageChatSetTheme)
		return &messageChatSetTheme, err

	case MessageChatSetTTLType:
		var messageChatSetTTL MessageChatSetTTL
		err := json.Unmarshal(*rawMsg, &messageChatSetTTL)
		return &messageChatSetTTL, err

	case MessageCustomServiceActionType:
		var messageCustomServiceAction MessageCustomServiceAction
		err := json.Unmarshal(*rawMsg, &messageCustomServiceAction)
		return &messageCustomServiceAction, err

	case MessageGameScoreType:
		var messageGameScore MessageGameScore
		err := json.Unmarshal(*rawMsg, &messageGameScore)
		return &messageGameScore, err

	case MessagePaymentSuccessfulType:
		var messagePaymentSuccessful MessagePaymentSuccessful
		err := json.Unmarshal(*rawMsg, &messagePaymentSuccessful)
		return &messagePaymentSuccessful, err

	case MessagePaymentSuccessfulBotType:
		var messagePaymentSuccessfulBot MessagePaymentSuccessfulBot
		err := json.Unmarshal(*rawMsg, &messagePaymentSuccessfulBot)
		return &messagePaymentSuccessfulBot, err

	case MessageContactRegisteredType:
		var messageContactRegistered MessageContactRegistered
		err := json.Unmarshal(*rawMsg, &messageContactRegistered)
		return &messageContactRegistered, err

	case MessageWebsiteConnectedType:
		var messageWebsiteConnected MessageWebsiteConnected
		err := json.Unmarshal(*rawMsg, &messageWebsiteConnected)
		return &messageWebsiteConnected, err

	case MessagePassportDataSentType:
		var messagePassportDataSent MessagePassportDataSent
		err := json.Unmarshal(*rawMsg, &messagePassportDataSent)
		return &messagePassportDataSent, err

	case MessagePassportDataReceivedType:
		var messagePassportDataReceived MessagePassportDataReceived
		err := json.Unmarshal(*rawMsg, &messagePassportDataReceived)
		return &messagePassportDataReceived, err

	case MessageProximityAlertTriggeredType:
		var messageProximityAlertTriggered MessageProximityAlertTriggered
		err := json.Unmarshal(*rawMsg, &messageProximityAlertTriggered)
		return &messageProximityAlertTriggered, err

	case MessageUnsupportedType:
		var messageUnsupported MessageUnsupported
		err := json.Unmarshal(*rawMsg, &messageUnsupported)
		return &messageUnsupported, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// TextEntityType Represents a part of the text which must be formatted differently
type TextEntityType interface {
	GetTextEntityTypeEnum() TextEntityTypeEnum
}

// TextEntityTypeEnum Alias for abstract TextEntityType 'Sub-Classes', used as constant-enum here
type TextEntityTypeEnum string

// TextEntityType enums
const (
	TextEntityTypeMentionType        TextEntityTypeEnum = "textEntityTypeMention"
	TextEntityTypeHashtagType        TextEntityTypeEnum = "textEntityTypeHashtag"
	TextEntityTypeCashtagType        TextEntityTypeEnum = "textEntityTypeCashtag"
	TextEntityTypeBotCommandType     TextEntityTypeEnum = "textEntityTypeBotCommand"
	TextEntityTypeURLType            TextEntityTypeEnum = "textEntityTypeUrl"
	TextEntityTypeEmailAddressType   TextEntityTypeEnum = "textEntityTypeEmailAddress"
	TextEntityTypePhoneNumberType    TextEntityTypeEnum = "textEntityTypePhoneNumber"
	TextEntityTypeBankCardNumberType TextEntityTypeEnum = "textEntityTypeBankCardNumber"
	TextEntityTypeBoldType           TextEntityTypeEnum = "textEntityTypeBold"
	TextEntityTypeItalicType         TextEntityTypeEnum = "textEntityTypeItalic"
	TextEntityTypeUnderlineType      TextEntityTypeEnum = "textEntityTypeUnderline"
	TextEntityTypeStrikethroughType  TextEntityTypeEnum = "textEntityTypeStrikethrough"
	TextEntityTypeCodeType           TextEntityTypeEnum = "textEntityTypeCode"
	TextEntityTypePreType            TextEntityTypeEnum = "textEntityTypePre"
	TextEntityTypePreCodeType        TextEntityTypeEnum = "textEntityTypePreCode"
	TextEntityTypeTextURLType        TextEntityTypeEnum = "textEntityTypeTextUrl"
	TextEntityTypeMentionNameType    TextEntityTypeEnum = "textEntityTypeMentionName"
	TextEntityTypeMediaTimestampType TextEntityTypeEnum = "textEntityTypeMediaTimestamp"
)

func unmarshalTextEntityType(rawMsg *json.RawMessage) (TextEntityType, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch TextEntityTypeEnum(objMap["@type"].(string)) {
	case TextEntityTypeMentionType:
		var textEntityTypeMention TextEntityTypeMention
		err := json.Unmarshal(*rawMsg, &textEntityTypeMention)
		return &textEntityTypeMention, err

	case TextEntityTypeHashtagType:
		var textEntityTypeHashtag TextEntityTypeHashtag
		err := json.Unmarshal(*rawMsg, &textEntityTypeHashtag)
		return &textEntityTypeHashtag, err

	case TextEntityTypeCashtagType:
		var textEntityTypeCashtag TextEntityTypeCashtag
		err := json.Unmarshal(*rawMsg, &textEntityTypeCashtag)
		return &textEntityTypeCashtag, err

	case TextEntityTypeBotCommandType:
		var textEntityTypeBotCommand TextEntityTypeBotCommand
		err := json.Unmarshal(*rawMsg, &textEntityTypeBotCommand)
		return &textEntityTypeBotCommand, err

	case TextEntityTypeURLType:
		var textEntityTypeURL TextEntityTypeURL
		err := json.Unmarshal(*rawMsg, &textEntityTypeURL)
		return &textEntityTypeURL, err

	case TextEntityTypeEmailAddressType:
		var textEntityTypeEmailAddress TextEntityTypeEmailAddress
		err := json.Unmarshal(*rawMsg, &textEntityTypeEmailAddress)
		return &textEntityTypeEmailAddress, err

	case TextEntityTypePhoneNumberType:
		var textEntityTypePhoneNumber TextEntityTypePhoneNumber
		err := json.Unmarshal(*rawMsg, &textEntityTypePhoneNumber)
		return &textEntityTypePhoneNumber, err

	case TextEntityTypeBankCardNumberType:
		var textEntityTypeBankCardNumber TextEntityTypeBankCardNumber
		err := json.Unmarshal(*rawMsg, &textEntityTypeBankCardNumber)
		return &textEntityTypeBankCardNumber, err

	case TextEntityTypeBoldType:
		var textEntityTypeBold TextEntityTypeBold
		err := json.Unmarshal(*rawMsg, &textEntityTypeBold)
		return &textEntityTypeBold, err

	case TextEntityTypeItalicType:
		var textEntityTypeItalic TextEntityTypeItalic
		err := json.Unmarshal(*rawMsg, &textEntityTypeItalic)
		return &textEntityTypeItalic, err

	case TextEntityTypeUnderlineType:
		var textEntityTypeUnderline TextEntityTypeUnderline
		err := json.Unmarshal(*rawMsg, &textEntityTypeUnderline)
		return &textEntityTypeUnderline, err

	case TextEntityTypeStrikethroughType:
		var textEntityTypeStrikethrough TextEntityTypeStrikethrough
		err := json.Unmarshal(*rawMsg, &textEntityTypeStrikethrough)
		return &textEntityTypeStrikethrough, err

	case TextEntityTypeCodeType:
		var textEntityTypeCode TextEntityTypeCode
		err := json.Unmarshal(*rawMsg, &textEntityTypeCode)
		return &textEntityTypeCode, err

	case TextEntityTypePreType:
		var textEntityTypePre TextEntityTypePre
		err := json.Unmarshal(*rawMsg, &textEntityTypePre)
		return &textEntityTypePre, err

	case TextEntityTypePreCodeType:
		var textEntityTypePreCode TextEntityTypePreCode
		err := json.Unmarshal(*rawMsg, &textEntityTypePreCode)
		return &textEntityTypePreCode, err

	case TextEntityTypeTextURLType:
		var textEntityTypeTextURL TextEntityTypeTextURL
		err := json.Unmarshal(*rawMsg, &textEntityTypeTextURL)
		return &textEntityTypeTextURL, err

	case TextEntityTypeMentionNameType:
		var textEntityTypeMentionName TextEntityTypeMentionName
		err := json.Unmarshal(*rawMsg, &textEntityTypeMentionName)
		return &textEntityTypeMentionName, err

	case TextEntityTypeMediaTimestampType:
		var textEntityTypeMediaTimestamp TextEntityTypeMediaTimestamp
		err := json.Unmarshal(*rawMsg, &textEntityTypeMediaTimestamp)
		return &textEntityTypeMediaTimestamp, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// MessageSchedulingState Contains information about the time when a scheduled message will be sent
type MessageSchedulingState interface {
	GetMessageSchedulingStateEnum() MessageSchedulingStateEnum
}

// MessageSchedulingStateEnum Alias for abstract MessageSchedulingState 'Sub-Classes', used as constant-enum here
type MessageSchedulingStateEnum string

// MessageSchedulingState enums
const (
	MessageSchedulingStateSendAtDateType     MessageSchedulingStateEnum = "messageSchedulingStateSendAtDate"
	MessageSchedulingStateSendWhenOnlineType MessageSchedulingStateEnum = "messageSchedulingStateSendWhenOnline"
)

func unmarshalMessageSchedulingState(rawMsg *json.RawMessage) (MessageSchedulingState, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch MessageSchedulingStateEnum(objMap["@type"].(string)) {
	case MessageSchedulingStateSendAtDateType:
		var messageSchedulingStateSendAtDate MessageSchedulingStateSendAtDate
		err := json.Unmarshal(*rawMsg, &messageSchedulingStateSendAtDate)
		return &messageSchedulingStateSendAtDate, err

	case MessageSchedulingStateSendWhenOnlineType:
		var messageSchedulingStateSendWhenOnline MessageSchedulingStateSendWhenOnline
		err := json.Unmarshal(*rawMsg, &messageSchedulingStateSendWhenOnline)
		return &messageSchedulingStateSendWhenOnline, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// InputMessageContent The content of a message to send
type InputMessageContent interface {
	GetInputMessageContentEnum() InputMessageContentEnum
}

// InputMessageContentEnum Alias for abstract InputMessageContent 'Sub-Classes', used as constant-enum here
type InputMessageContentEnum string

// InputMessageContent enums
const (
	InputMessageTextType      InputMessageContentEnum = "inputMessageText"
	InputMessageAnimationType InputMessageContentEnum = "inputMessageAnimation"
	InputMessageAudioType     InputMessageContentEnum = "inputMessageAudio"
	InputMessageDocumentType  InputMessageContentEnum = "inputMessageDocument"
	InputMessagePhotoType     InputMessageContentEnum = "inputMessagePhoto"
	InputMessageStickerType   InputMessageContentEnum = "inputMessageSticker"
	InputMessageVideoType     InputMessageContentEnum = "inputMessageVideo"
	InputMessageVideoNoteType InputMessageContentEnum = "inputMessageVideoNote"
	InputMessageVoiceNoteType InputMessageContentEnum = "inputMessageVoiceNote"
	InputMessageLocationType  InputMessageContentEnum = "inputMessageLocation"
	InputMessageVenueType     InputMessageContentEnum = "inputMessageVenue"
	InputMessageContactType   InputMessageContentEnum = "inputMessageContact"
	InputMessageDiceType      InputMessageContentEnum = "inputMessageDice"
	InputMessageGameType      InputMessageContentEnum = "inputMessageGame"
	InputMessageInvoiceType   InputMessageContentEnum = "inputMessageInvoice"
	InputMessagePollType      InputMessageContentEnum = "inputMessagePoll"
	InputMessageForwardedType InputMessageContentEnum = "inputMessageForwarded"
)

func unmarshalInputMessageContent(rawMsg *json.RawMessage) (InputMessageContent, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch InputMessageContentEnum(objMap["@type"].(string)) {
	case InputMessageTextType:
		var inputMessageText InputMessageText
		err := json.Unmarshal(*rawMsg, &inputMessageText)
		return &inputMessageText, err

	case InputMessageAnimationType:
		var inputMessageAnimation InputMessageAnimation
		err := json.Unmarshal(*rawMsg, &inputMessageAnimation)
		return &inputMessageAnimation, err

	case InputMessageAudioType:
		var inputMessageAudio InputMessageAudio
		err := json.Unmarshal(*rawMsg, &inputMessageAudio)
		return &inputMessageAudio, err

	case InputMessageDocumentType:
		var inputMessageDocument InputMessageDocument
		err := json.Unmarshal(*rawMsg, &inputMessageDocument)
		return &inputMessageDocument, err

	case InputMessagePhotoType:
		var inputMessagePhoto InputMessagePhoto
		err := json.Unmarshal(*rawMsg, &inputMessagePhoto)
		return &inputMessagePhoto, err

	case InputMessageStickerType:
		var inputMessageSticker InputMessageSticker
		err := json.Unmarshal(*rawMsg, &inputMessageSticker)
		return &inputMessageSticker, err

	case InputMessageVideoType:
		var inputMessageVideo InputMessageVideo
		err := json.Unmarshal(*rawMsg, &inputMessageVideo)
		return &inputMessageVideo, err

	case InputMessageVideoNoteType:
		var inputMessageVideoNote InputMessageVideoNote
		err := json.Unmarshal(*rawMsg, &inputMessageVideoNote)
		return &inputMessageVideoNote, err

	case InputMessageVoiceNoteType:
		var inputMessageVoiceNote InputMessageVoiceNote
		err := json.Unmarshal(*rawMsg, &inputMessageVoiceNote)
		return &inputMessageVoiceNote, err

	case InputMessageLocationType:
		var inputMessageLocation InputMessageLocation
		err := json.Unmarshal(*rawMsg, &inputMessageLocation)
		return &inputMessageLocation, err

	case InputMessageVenueType:
		var inputMessageVenue InputMessageVenue
		err := json.Unmarshal(*rawMsg, &inputMessageVenue)
		return &inputMessageVenue, err

	case InputMessageContactType:
		var inputMessageContact InputMessageContact
		err := json.Unmarshal(*rawMsg, &inputMessageContact)
		return &inputMessageContact, err

	case InputMessageDiceType:
		var inputMessageDice InputMessageDice
		err := json.Unmarshal(*rawMsg, &inputMessageDice)
		return &inputMessageDice, err

	case InputMessageGameType:
		var inputMessageGame InputMessageGame
		err := json.Unmarshal(*rawMsg, &inputMessageGame)
		return &inputMessageGame, err

	case InputMessageInvoiceType:
		var inputMessageInvoice InputMessageInvoice
		err := json.Unmarshal(*rawMsg, &inputMessageInvoice)
		return &inputMessageInvoice, err

	case InputMessagePollType:
		var inputMessagePoll InputMessagePoll
		err := json.Unmarshal(*rawMsg, &inputMessagePoll)
		return &inputMessagePoll, err

	case InputMessageForwardedType:
		var inputMessageForwarded InputMessageForwarded
		err := json.Unmarshal(*rawMsg, &inputMessageForwarded)
		return &inputMessageForwarded, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// SearchMessagesFilter Represents a filter for message search results
type SearchMessagesFilter interface {
	GetSearchMessagesFilterEnum() SearchMessagesFilterEnum
}

// SearchMessagesFilterEnum Alias for abstract SearchMessagesFilter 'Sub-Classes', used as constant-enum here
type SearchMessagesFilterEnum string

// SearchMessagesFilter enums
const (
	SearchMessagesFilterEmptyType             SearchMessagesFilterEnum = "searchMessagesFilterEmpty"
	SearchMessagesFilterAnimationType         SearchMessagesFilterEnum = "searchMessagesFilterAnimation"
	SearchMessagesFilterAudioType             SearchMessagesFilterEnum = "searchMessagesFilterAudio"
	SearchMessagesFilterDocumentType          SearchMessagesFilterEnum = "searchMessagesFilterDocument"
	SearchMessagesFilterPhotoType             SearchMessagesFilterEnum = "searchMessagesFilterPhoto"
	SearchMessagesFilterVideoType             SearchMessagesFilterEnum = "searchMessagesFilterVideo"
	SearchMessagesFilterVoiceNoteType         SearchMessagesFilterEnum = "searchMessagesFilterVoiceNote"
	SearchMessagesFilterPhotoAndVideoType     SearchMessagesFilterEnum = "searchMessagesFilterPhotoAndVideo"
	SearchMessagesFilterURLType               SearchMessagesFilterEnum = "searchMessagesFilterUrl"
	SearchMessagesFilterChatPhotoType         SearchMessagesFilterEnum = "searchMessagesFilterChatPhoto"
	SearchMessagesFilterVideoNoteType         SearchMessagesFilterEnum = "searchMessagesFilterVideoNote"
	SearchMessagesFilterVoiceAndVideoNoteType SearchMessagesFilterEnum = "searchMessagesFilterVoiceAndVideoNote"
	SearchMessagesFilterMentionType           SearchMessagesFilterEnum = "searchMessagesFilterMention"
	SearchMessagesFilterUnreadMentionType     SearchMessagesFilterEnum = "searchMessagesFilterUnreadMention"
	SearchMessagesFilterFailedToSendType      SearchMessagesFilterEnum = "searchMessagesFilterFailedToSend"
	SearchMessagesFilterPinnedType            SearchMessagesFilterEnum = "searchMessagesFilterPinned"
)

func unmarshalSearchMessagesFilter(rawMsg *json.RawMessage) (SearchMessagesFilter, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch SearchMessagesFilterEnum(objMap["@type"].(string)) {
	case SearchMessagesFilterEmptyType:
		var searchMessagesFilterEmpty SearchMessagesFilterEmpty
		err := json.Unmarshal(*rawMsg, &searchMessagesFilterEmpty)
		return &searchMessagesFilterEmpty, err

	case SearchMessagesFilterAnimationType:
		var searchMessagesFilterAnimation SearchMessagesFilterAnimation
		err := json.Unmarshal(*rawMsg, &searchMessagesFilterAnimation)
		return &searchMessagesFilterAnimation, err

	case SearchMessagesFilterAudioType:
		var searchMessagesFilterAudio SearchMessagesFilterAudio
		err := json.Unmarshal(*rawMsg, &searchMessagesFilterAudio)
		return &searchMessagesFilterAudio, err

	case SearchMessagesFilterDocumentType:
		var searchMessagesFilterDocument SearchMessagesFilterDocument
		err := json.Unmarshal(*rawMsg, &searchMessagesFilterDocument)
		return &searchMessagesFilterDocument, err

	case SearchMessagesFilterPhotoType:
		var searchMessagesFilterPhoto SearchMessagesFilterPhoto
		err := json.Unmarshal(*rawMsg, &searchMessagesFilterPhoto)
		return &searchMessagesFilterPhoto, err

	case SearchMessagesFilterVideoType:
		var searchMessagesFilterVideo SearchMessagesFilterVideo
		err := json.Unmarshal(*rawMsg, &searchMessagesFilterVideo)
		return &searchMessagesFilterVideo, err

	case SearchMessagesFilterVoiceNoteType:
		var searchMessagesFilterVoiceNote SearchMessagesFilterVoiceNote
		err := json.Unmarshal(*rawMsg, &searchMessagesFilterVoiceNote)
		return &searchMessagesFilterVoiceNote, err

	case SearchMessagesFilterPhotoAndVideoType:
		var searchMessagesFilterPhotoAndVideo SearchMessagesFilterPhotoAndVideo
		err := json.Unmarshal(*rawMsg, &searchMessagesFilterPhotoAndVideo)
		return &searchMessagesFilterPhotoAndVideo, err

	case SearchMessagesFilterURLType:
		var searchMessagesFilterURL SearchMessagesFilterURL
		err := json.Unmarshal(*rawMsg, &searchMessagesFilterURL)
		return &searchMessagesFilterURL, err

	case SearchMessagesFilterChatPhotoType:
		var searchMessagesFilterChatPhoto SearchMessagesFilterChatPhoto
		err := json.Unmarshal(*rawMsg, &searchMessagesFilterChatPhoto)
		return &searchMessagesFilterChatPhoto, err

	case SearchMessagesFilterVideoNoteType:
		var searchMessagesFilterVideoNote SearchMessagesFilterVideoNote
		err := json.Unmarshal(*rawMsg, &searchMessagesFilterVideoNote)
		return &searchMessagesFilterVideoNote, err

	case SearchMessagesFilterVoiceAndVideoNoteType:
		var searchMessagesFilterVoiceAndVideoNote SearchMessagesFilterVoiceAndVideoNote
		err := json.Unmarshal(*rawMsg, &searchMessagesFilterVoiceAndVideoNote)
		return &searchMessagesFilterVoiceAndVideoNote, err

	case SearchMessagesFilterMentionType:
		var searchMessagesFilterMention SearchMessagesFilterMention
		err := json.Unmarshal(*rawMsg, &searchMessagesFilterMention)
		return &searchMessagesFilterMention, err

	case SearchMessagesFilterUnreadMentionType:
		var searchMessagesFilterUnreadMention SearchMessagesFilterUnreadMention
		err := json.Unmarshal(*rawMsg, &searchMessagesFilterUnreadMention)
		return &searchMessagesFilterUnreadMention, err

	case SearchMessagesFilterFailedToSendType:
		var searchMessagesFilterFailedToSend SearchMessagesFilterFailedToSend
		err := json.Unmarshal(*rawMsg, &searchMessagesFilterFailedToSend)
		return &searchMessagesFilterFailedToSend, err

	case SearchMessagesFilterPinnedType:
		var searchMessagesFilterPinned SearchMessagesFilterPinned
		err := json.Unmarshal(*rawMsg, &searchMessagesFilterPinned)
		return &searchMessagesFilterPinned, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// ChatAction Describes the different types of activity in a chat
type ChatAction interface {
	GetChatActionEnum() ChatActionEnum
}

// ChatActionEnum Alias for abstract ChatAction 'Sub-Classes', used as constant-enum here
type ChatActionEnum string

// ChatAction enums
const (
	ChatActionTypingType             ChatActionEnum = "chatActionTyping"
	ChatActionRecordingVideoType     ChatActionEnum = "chatActionRecordingVideo"
	ChatActionUploadingVideoType     ChatActionEnum = "chatActionUploadingVideo"
	ChatActionRecordingVoiceNoteType ChatActionEnum = "chatActionRecordingVoiceNote"
	ChatActionUploadingVoiceNoteType ChatActionEnum = "chatActionUploadingVoiceNote"
	ChatActionUploadingPhotoType     ChatActionEnum = "chatActionUploadingPhoto"
	ChatActionUploadingDocumentType  ChatActionEnum = "chatActionUploadingDocument"
	ChatActionChoosingStickerType    ChatActionEnum = "chatActionChoosingSticker"
	ChatActionChoosingLocationType   ChatActionEnum = "chatActionChoosingLocation"
	ChatActionChoosingContactType    ChatActionEnum = "chatActionChoosingContact"
	ChatActionStartPlayingGameType   ChatActionEnum = "chatActionStartPlayingGame"
	ChatActionRecordingVideoNoteType ChatActionEnum = "chatActionRecordingVideoNote"
	ChatActionUploadingVideoNoteType ChatActionEnum = "chatActionUploadingVideoNote"
	ChatActionWatchingAnimationsType ChatActionEnum = "chatActionWatchingAnimations"
	ChatActionCancelType             ChatActionEnum = "chatActionCancel"
)

func unmarshalChatAction(rawMsg *json.RawMessage) (ChatAction, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch ChatActionEnum(objMap["@type"].(string)) {
	case ChatActionTypingType:
		var chatActionTyping ChatActionTyping
		err := json.Unmarshal(*rawMsg, &chatActionTyping)
		return &chatActionTyping, err

	case ChatActionRecordingVideoType:
		var chatActionRecordingVideo ChatActionRecordingVideo
		err := json.Unmarshal(*rawMsg, &chatActionRecordingVideo)
		return &chatActionRecordingVideo, err

	case ChatActionUploadingVideoType:
		var chatActionUploadingVideo ChatActionUploadingVideo
		err := json.Unmarshal(*rawMsg, &chatActionUploadingVideo)
		return &chatActionUploadingVideo, err

	case ChatActionRecordingVoiceNoteType:
		var chatActionRecordingVoiceNote ChatActionRecordingVoiceNote
		err := json.Unmarshal(*rawMsg, &chatActionRecordingVoiceNote)
		return &chatActionRecordingVoiceNote, err

	case ChatActionUploadingVoiceNoteType:
		var chatActionUploadingVoiceNote ChatActionUploadingVoiceNote
		err := json.Unmarshal(*rawMsg, &chatActionUploadingVoiceNote)
		return &chatActionUploadingVoiceNote, err

	case ChatActionUploadingPhotoType:
		var chatActionUploadingPhoto ChatActionUploadingPhoto
		err := json.Unmarshal(*rawMsg, &chatActionUploadingPhoto)
		return &chatActionUploadingPhoto, err

	case ChatActionUploadingDocumentType:
		var chatActionUploadingDocument ChatActionUploadingDocument
		err := json.Unmarshal(*rawMsg, &chatActionUploadingDocument)
		return &chatActionUploadingDocument, err

	case ChatActionChoosingStickerType:
		var chatActionChoosingSticker ChatActionChoosingSticker
		err := json.Unmarshal(*rawMsg, &chatActionChoosingSticker)
		return &chatActionChoosingSticker, err

	case ChatActionChoosingLocationType:
		var chatActionChoosingLocation ChatActionChoosingLocation
		err := json.Unmarshal(*rawMsg, &chatActionChoosingLocation)
		return &chatActionChoosingLocation, err

	case ChatActionChoosingContactType:
		var chatActionChoosingContact ChatActionChoosingContact
		err := json.Unmarshal(*rawMsg, &chatActionChoosingContact)
		return &chatActionChoosingContact, err

	case ChatActionStartPlayingGameType:
		var chatActionStartPlayingGame ChatActionStartPlayingGame
		err := json.Unmarshal(*rawMsg, &chatActionStartPlayingGame)
		return &chatActionStartPlayingGame, err

	case ChatActionRecordingVideoNoteType:
		var chatActionRecordingVideoNote ChatActionRecordingVideoNote
		err := json.Unmarshal(*rawMsg, &chatActionRecordingVideoNote)
		return &chatActionRecordingVideoNote, err

	case ChatActionUploadingVideoNoteType:
		var chatActionUploadingVideoNote ChatActionUploadingVideoNote
		err := json.Unmarshal(*rawMsg, &chatActionUploadingVideoNote)
		return &chatActionUploadingVideoNote, err

	case ChatActionWatchingAnimationsType:
		var chatActionWatchingAnimations ChatActionWatchingAnimations
		err := json.Unmarshal(*rawMsg, &chatActionWatchingAnimations)
		return &chatActionWatchingAnimations, err

	case ChatActionCancelType:
		var chatActionCancel ChatActionCancel
		err := json.Unmarshal(*rawMsg, &chatActionCancel)
		return &chatActionCancel, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// UserStatus Describes the last time the user was online
type UserStatus interface {
	GetUserStatusEnum() UserStatusEnum
}

// UserStatusEnum Alias for abstract UserStatus 'Sub-Classes', used as constant-enum here
type UserStatusEnum string

// UserStatus enums
const (
	UserStatusEmptyType     UserStatusEnum = "userStatusEmpty"
	UserStatusOnlineType    UserStatusEnum = "userStatusOnline"
	UserStatusOfflineType   UserStatusEnum = "userStatusOffline"
	UserStatusRecentlyType  UserStatusEnum = "userStatusRecently"
	UserStatusLastWeekType  UserStatusEnum = "userStatusLastWeek"
	UserStatusLastMonthType UserStatusEnum = "userStatusLastMonth"
)

func unmarshalUserStatus(rawMsg *json.RawMessage) (UserStatus, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch UserStatusEnum(objMap["@type"].(string)) {
	case UserStatusEmptyType:
		var userStatusEmpty UserStatusEmpty
		err := json.Unmarshal(*rawMsg, &userStatusEmpty)
		return &userStatusEmpty, err

	case UserStatusOnlineType:
		var userStatusOnline UserStatusOnline
		err := json.Unmarshal(*rawMsg, &userStatusOnline)
		return &userStatusOnline, err

	case UserStatusOfflineType:
		var userStatusOffline UserStatusOffline
		err := json.Unmarshal(*rawMsg, &userStatusOffline)
		return &userStatusOffline, err

	case UserStatusRecentlyType:
		var userStatusRecently UserStatusRecently
		err := json.Unmarshal(*rawMsg, &userStatusRecently)
		return &userStatusRecently, err

	case UserStatusLastWeekType:
		var userStatusLastWeek UserStatusLastWeek
		err := json.Unmarshal(*rawMsg, &userStatusLastWeek)
		return &userStatusLastWeek, err

	case UserStatusLastMonthType:
		var userStatusLastMonth UserStatusLastMonth
		err := json.Unmarshal(*rawMsg, &userStatusLastMonth)
		return &userStatusLastMonth, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// CallDiscardReason Describes the reason why a call was discarded
type CallDiscardReason interface {
	GetCallDiscardReasonEnum() CallDiscardReasonEnum
}

// CallDiscardReasonEnum Alias for abstract CallDiscardReason 'Sub-Classes', used as constant-enum here
type CallDiscardReasonEnum string

// CallDiscardReason enums
const (
	CallDiscardReasonEmptyType        CallDiscardReasonEnum = "callDiscardReasonEmpty"
	CallDiscardReasonMissedType       CallDiscardReasonEnum = "callDiscardReasonMissed"
	CallDiscardReasonDeclinedType     CallDiscardReasonEnum = "callDiscardReasonDeclined"
	CallDiscardReasonDisconnectedType CallDiscardReasonEnum = "callDiscardReasonDisconnected"
	CallDiscardReasonHungUpType       CallDiscardReasonEnum = "callDiscardReasonHungUp"
)

func unmarshalCallDiscardReason(rawMsg *json.RawMessage) (CallDiscardReason, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch CallDiscardReasonEnum(objMap["@type"].(string)) {
	case CallDiscardReasonEmptyType:
		var callDiscardReasonEmpty CallDiscardReasonEmpty
		err := json.Unmarshal(*rawMsg, &callDiscardReasonEmpty)
		return &callDiscardReasonEmpty, err

	case CallDiscardReasonMissedType:
		var callDiscardReasonMissed CallDiscardReasonMissed
		err := json.Unmarshal(*rawMsg, &callDiscardReasonMissed)
		return &callDiscardReasonMissed, err

	case CallDiscardReasonDeclinedType:
		var callDiscardReasonDeclined CallDiscardReasonDeclined
		err := json.Unmarshal(*rawMsg, &callDiscardReasonDeclined)
		return &callDiscardReasonDeclined, err

	case CallDiscardReasonDisconnectedType:
		var callDiscardReasonDisconnected CallDiscardReasonDisconnected
		err := json.Unmarshal(*rawMsg, &callDiscardReasonDisconnected)
		return &callDiscardReasonDisconnected, err

	case CallDiscardReasonHungUpType:
		var callDiscardReasonHungUp CallDiscardReasonHungUp
		err := json.Unmarshal(*rawMsg, &callDiscardReasonHungUp)
		return &callDiscardReasonHungUp, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// CallServerType Describes the type of a call server
type CallServerType interface {
	GetCallServerTypeEnum() CallServerTypeEnum
}

// CallServerTypeEnum Alias for abstract CallServerType 'Sub-Classes', used as constant-enum here
type CallServerTypeEnum string

// CallServerType enums
const (
	CallServerTypeTelegramReflectorType CallServerTypeEnum = "callServerTypeTelegramReflector"
	CallServerTypeWebrtcType            CallServerTypeEnum = "callServerTypeWebrtc"
)

func unmarshalCallServerType(rawMsg *json.RawMessage) (CallServerType, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch CallServerTypeEnum(objMap["@type"].(string)) {
	case CallServerTypeTelegramReflectorType:
		var callServerTypeTelegramReflector CallServerTypeTelegramReflector
		err := json.Unmarshal(*rawMsg, &callServerTypeTelegramReflector)
		return &callServerTypeTelegramReflector, err

	case CallServerTypeWebrtcType:
		var callServerTypeWebrtc CallServerTypeWebrtc
		err := json.Unmarshal(*rawMsg, &callServerTypeWebrtc)
		return &callServerTypeWebrtc, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// CallState Describes the current call state
type CallState interface {
	GetCallStateEnum() CallStateEnum
}

// CallStateEnum Alias for abstract CallState 'Sub-Classes', used as constant-enum here
type CallStateEnum string

// CallState enums
const (
	CallStatePendingType        CallStateEnum = "callStatePending"
	CallStateExchangingKeysType CallStateEnum = "callStateExchangingKeys"
	CallStateReadyType          CallStateEnum = "callStateReady"
	CallStateHangingUpType      CallStateEnum = "callStateHangingUp"
	CallStateDiscardedType      CallStateEnum = "callStateDiscarded"
	CallStateErrorType          CallStateEnum = "callStateError"
)

func unmarshalCallState(rawMsg *json.RawMessage) (CallState, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch CallStateEnum(objMap["@type"].(string)) {
	case CallStatePendingType:
		var callStatePending CallStatePending
		err := json.Unmarshal(*rawMsg, &callStatePending)
		return &callStatePending, err

	case CallStateExchangingKeysType:
		var callStateExchangingKeys CallStateExchangingKeys
		err := json.Unmarshal(*rawMsg, &callStateExchangingKeys)
		return &callStateExchangingKeys, err

	case CallStateReadyType:
		var callStateReady CallStateReady
		err := json.Unmarshal(*rawMsg, &callStateReady)
		return &callStateReady, err

	case CallStateHangingUpType:
		var callStateHangingUp CallStateHangingUp
		err := json.Unmarshal(*rawMsg, &callStateHangingUp)
		return &callStateHangingUp, err

	case CallStateDiscardedType:
		var callStateDiscarded CallStateDiscarded
		err := json.Unmarshal(*rawMsg, &callStateDiscarded)
		return &callStateDiscarded, err

	case CallStateErrorType:
		var callStateError CallStateError
		err := json.Unmarshal(*rawMsg, &callStateError)
		return &callStateError, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// GroupCallVideoQuality Describes the quality of a group call video
type GroupCallVideoQuality interface {
	GetGroupCallVideoQualityEnum() GroupCallVideoQualityEnum
}

// GroupCallVideoQualityEnum Alias for abstract GroupCallVideoQuality 'Sub-Classes', used as constant-enum here
type GroupCallVideoQualityEnum string

// GroupCallVideoQuality enums
const (
	GroupCallVideoQualityThumbnailType GroupCallVideoQualityEnum = "groupCallVideoQualityThumbnail"
	GroupCallVideoQualityMediumType    GroupCallVideoQualityEnum = "groupCallVideoQualityMedium"
	GroupCallVideoQualityFullType      GroupCallVideoQualityEnum = "groupCallVideoQualityFull"
)

func unmarshalGroupCallVideoQuality(rawMsg *json.RawMessage) (GroupCallVideoQuality, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch GroupCallVideoQualityEnum(objMap["@type"].(string)) {
	case GroupCallVideoQualityThumbnailType:
		var groupCallVideoQualityThumbnail GroupCallVideoQualityThumbnail
		err := json.Unmarshal(*rawMsg, &groupCallVideoQualityThumbnail)
		return &groupCallVideoQualityThumbnail, err

	case GroupCallVideoQualityMediumType:
		var groupCallVideoQualityMedium GroupCallVideoQualityMedium
		err := json.Unmarshal(*rawMsg, &groupCallVideoQualityMedium)
		return &groupCallVideoQualityMedium, err

	case GroupCallVideoQualityFullType:
		var groupCallVideoQualityFull GroupCallVideoQualityFull
		err := json.Unmarshal(*rawMsg, &groupCallVideoQualityFull)
		return &groupCallVideoQualityFull, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// CallProblem Describes the exact type of a problem with a call
type CallProblem interface {
	GetCallProblemEnum() CallProblemEnum
}

// CallProblemEnum Alias for abstract CallProblem 'Sub-Classes', used as constant-enum here
type CallProblemEnum string

// CallProblem enums
const (
	CallProblemEchoType            CallProblemEnum = "callProblemEcho"
	CallProblemNoiseType           CallProblemEnum = "callProblemNoise"
	CallProblemInterruptionsType   CallProblemEnum = "callProblemInterruptions"
	CallProblemDistortedSpeechType CallProblemEnum = "callProblemDistortedSpeech"
	CallProblemSilentLocalType     CallProblemEnum = "callProblemSilentLocal"
	CallProblemSilentRemoteType    CallProblemEnum = "callProblemSilentRemote"
	CallProblemDroppedType         CallProblemEnum = "callProblemDropped"
	CallProblemDistortedVideoType  CallProblemEnum = "callProblemDistortedVideo"
	CallProblemPixelatedVideoType  CallProblemEnum = "callProblemPixelatedVideo"
)

func unmarshalCallProblem(rawMsg *json.RawMessage) (CallProblem, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch CallProblemEnum(objMap["@type"].(string)) {
	case CallProblemEchoType:
		var callProblemEcho CallProblemEcho
		err := json.Unmarshal(*rawMsg, &callProblemEcho)
		return &callProblemEcho, err

	case CallProblemNoiseType:
		var callProblemNoise CallProblemNoise
		err := json.Unmarshal(*rawMsg, &callProblemNoise)
		return &callProblemNoise, err

	case CallProblemInterruptionsType:
		var callProblemInterruptions CallProblemInterruptions
		err := json.Unmarshal(*rawMsg, &callProblemInterruptions)
		return &callProblemInterruptions, err

	case CallProblemDistortedSpeechType:
		var callProblemDistortedSpeech CallProblemDistortedSpeech
		err := json.Unmarshal(*rawMsg, &callProblemDistortedSpeech)
		return &callProblemDistortedSpeech, err

	case CallProblemSilentLocalType:
		var callProblemSilentLocal CallProblemSilentLocal
		err := json.Unmarshal(*rawMsg, &callProblemSilentLocal)
		return &callProblemSilentLocal, err

	case CallProblemSilentRemoteType:
		var callProblemSilentRemote CallProblemSilentRemote
		err := json.Unmarshal(*rawMsg, &callProblemSilentRemote)
		return &callProblemSilentRemote, err

	case CallProblemDroppedType:
		var callProblemDropped CallProblemDropped
		err := json.Unmarshal(*rawMsg, &callProblemDropped)
		return &callProblemDropped, err

	case CallProblemDistortedVideoType:
		var callProblemDistortedVideo CallProblemDistortedVideo
		err := json.Unmarshal(*rawMsg, &callProblemDistortedVideo)
		return &callProblemDistortedVideo, err

	case CallProblemPixelatedVideoType:
		var callProblemPixelatedVideo CallProblemPixelatedVideo
		err := json.Unmarshal(*rawMsg, &callProblemPixelatedVideo)
		return &callProblemPixelatedVideo, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// DiceStickers Contains animated stickers which must be used for dice animation rendering
type DiceStickers interface {
	GetDiceStickersEnum() DiceStickersEnum
}

// DiceStickersEnum Alias for abstract DiceStickers 'Sub-Classes', used as constant-enum here
type DiceStickersEnum string

// DiceStickers enums
const (
	DiceStickersRegularType     DiceStickersEnum = "diceStickersRegular"
	DiceStickersSlotMachineType DiceStickersEnum = "diceStickersSlotMachine"
)

func unmarshalDiceStickers(rawMsg *json.RawMessage) (DiceStickers, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch DiceStickersEnum(objMap["@type"].(string)) {
	case DiceStickersRegularType:
		var diceStickersRegular DiceStickersRegular
		err := json.Unmarshal(*rawMsg, &diceStickersRegular)
		return &diceStickersRegular, err

	case DiceStickersSlotMachineType:
		var diceStickersSlotMachine DiceStickersSlotMachine
		err := json.Unmarshal(*rawMsg, &diceStickersSlotMachine)
		return &diceStickersSlotMachine, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// InputInlineQueryResult Represents a single result of an inline query; for bots only
type InputInlineQueryResult interface {
	GetInputInlineQueryResultEnum() InputInlineQueryResultEnum
}

// InputInlineQueryResultEnum Alias for abstract InputInlineQueryResult 'Sub-Classes', used as constant-enum here
type InputInlineQueryResultEnum string

// InputInlineQueryResult enums
const (
	InputInlineQueryResultAnimationType InputInlineQueryResultEnum = "inputInlineQueryResultAnimation"
	InputInlineQueryResultArticleType   InputInlineQueryResultEnum = "inputInlineQueryResultArticle"
	InputInlineQueryResultAudioType     InputInlineQueryResultEnum = "inputInlineQueryResultAudio"
	InputInlineQueryResultContactType   InputInlineQueryResultEnum = "inputInlineQueryResultContact"
	InputInlineQueryResultDocumentType  InputInlineQueryResultEnum = "inputInlineQueryResultDocument"
	InputInlineQueryResultGameType      InputInlineQueryResultEnum = "inputInlineQueryResultGame"
	InputInlineQueryResultLocationType  InputInlineQueryResultEnum = "inputInlineQueryResultLocation"
	InputInlineQueryResultPhotoType     InputInlineQueryResultEnum = "inputInlineQueryResultPhoto"
	InputInlineQueryResultStickerType   InputInlineQueryResultEnum = "inputInlineQueryResultSticker"
	InputInlineQueryResultVenueType     InputInlineQueryResultEnum = "inputInlineQueryResultVenue"
	InputInlineQueryResultVideoType     InputInlineQueryResultEnum = "inputInlineQueryResultVideo"
	InputInlineQueryResultVoiceNoteType InputInlineQueryResultEnum = "inputInlineQueryResultVoiceNote"
)

func unmarshalInputInlineQueryResult(rawMsg *json.RawMessage) (InputInlineQueryResult, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch InputInlineQueryResultEnum(objMap["@type"].(string)) {
	case InputInlineQueryResultAnimationType:
		var inputInlineQueryResultAnimation InputInlineQueryResultAnimation
		err := json.Unmarshal(*rawMsg, &inputInlineQueryResultAnimation)
		return &inputInlineQueryResultAnimation, err

	case InputInlineQueryResultArticleType:
		var inputInlineQueryResultArticle InputInlineQueryResultArticle
		err := json.Unmarshal(*rawMsg, &inputInlineQueryResultArticle)
		return &inputInlineQueryResultArticle, err

	case InputInlineQueryResultAudioType:
		var inputInlineQueryResultAudio InputInlineQueryResultAudio
		err := json.Unmarshal(*rawMsg, &inputInlineQueryResultAudio)
		return &inputInlineQueryResultAudio, err

	case InputInlineQueryResultContactType:
		var inputInlineQueryResultContact InputInlineQueryResultContact
		err := json.Unmarshal(*rawMsg, &inputInlineQueryResultContact)
		return &inputInlineQueryResultContact, err

	case InputInlineQueryResultDocumentType:
		var inputInlineQueryResultDocument InputInlineQueryResultDocument
		err := json.Unmarshal(*rawMsg, &inputInlineQueryResultDocument)
		return &inputInlineQueryResultDocument, err

	case InputInlineQueryResultGameType:
		var inputInlineQueryResultGame InputInlineQueryResultGame
		err := json.Unmarshal(*rawMsg, &inputInlineQueryResultGame)
		return &inputInlineQueryResultGame, err

	case InputInlineQueryResultLocationType:
		var inputInlineQueryResultLocation InputInlineQueryResultLocation
		err := json.Unmarshal(*rawMsg, &inputInlineQueryResultLocation)
		return &inputInlineQueryResultLocation, err

	case InputInlineQueryResultPhotoType:
		var inputInlineQueryResultPhoto InputInlineQueryResultPhoto
		err := json.Unmarshal(*rawMsg, &inputInlineQueryResultPhoto)
		return &inputInlineQueryResultPhoto, err

	case InputInlineQueryResultStickerType:
		var inputInlineQueryResultSticker InputInlineQueryResultSticker
		err := json.Unmarshal(*rawMsg, &inputInlineQueryResultSticker)
		return &inputInlineQueryResultSticker, err

	case InputInlineQueryResultVenueType:
		var inputInlineQueryResultVenue InputInlineQueryResultVenue
		err := json.Unmarshal(*rawMsg, &inputInlineQueryResultVenue)
		return &inputInlineQueryResultVenue, err

	case InputInlineQueryResultVideoType:
		var inputInlineQueryResultVideo InputInlineQueryResultVideo
		err := json.Unmarshal(*rawMsg, &inputInlineQueryResultVideo)
		return &inputInlineQueryResultVideo, err

	case InputInlineQueryResultVoiceNoteType:
		var inputInlineQueryResultVoiceNote InputInlineQueryResultVoiceNote
		err := json.Unmarshal(*rawMsg, &inputInlineQueryResultVoiceNote)
		return &inputInlineQueryResultVoiceNote, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// InlineQueryResult Represents a single result of an inline query
type InlineQueryResult interface {
	GetInlineQueryResultEnum() InlineQueryResultEnum
}

// InlineQueryResultEnum Alias for abstract InlineQueryResult 'Sub-Classes', used as constant-enum here
type InlineQueryResultEnum string

// InlineQueryResult enums
const (
	InlineQueryResultArticleType   InlineQueryResultEnum = "inlineQueryResultArticle"
	InlineQueryResultContactType   InlineQueryResultEnum = "inlineQueryResultContact"
	InlineQueryResultLocationType  InlineQueryResultEnum = "inlineQueryResultLocation"
	InlineQueryResultVenueType     InlineQueryResultEnum = "inlineQueryResultVenue"
	InlineQueryResultGameType      InlineQueryResultEnum = "inlineQueryResultGame"
	InlineQueryResultAnimationType InlineQueryResultEnum = "inlineQueryResultAnimation"
	InlineQueryResultAudioType     InlineQueryResultEnum = "inlineQueryResultAudio"
	InlineQueryResultDocumentType  InlineQueryResultEnum = "inlineQueryResultDocument"
	InlineQueryResultPhotoType     InlineQueryResultEnum = "inlineQueryResultPhoto"
	InlineQueryResultStickerType   InlineQueryResultEnum = "inlineQueryResultSticker"
	InlineQueryResultVideoType     InlineQueryResultEnum = "inlineQueryResultVideo"
	InlineQueryResultVoiceNoteType InlineQueryResultEnum = "inlineQueryResultVoiceNote"
)

func unmarshalInlineQueryResult(rawMsg *json.RawMessage) (InlineQueryResult, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch InlineQueryResultEnum(objMap["@type"].(string)) {
	case InlineQueryResultArticleType:
		var inlineQueryResultArticle InlineQueryResultArticle
		err := json.Unmarshal(*rawMsg, &inlineQueryResultArticle)
		return &inlineQueryResultArticle, err

	case InlineQueryResultContactType:
		var inlineQueryResultContact InlineQueryResultContact
		err := json.Unmarshal(*rawMsg, &inlineQueryResultContact)
		return &inlineQueryResultContact, err

	case InlineQueryResultLocationType:
		var inlineQueryResultLocation InlineQueryResultLocation
		err := json.Unmarshal(*rawMsg, &inlineQueryResultLocation)
		return &inlineQueryResultLocation, err

	case InlineQueryResultVenueType:
		var inlineQueryResultVenue InlineQueryResultVenue
		err := json.Unmarshal(*rawMsg, &inlineQueryResultVenue)
		return &inlineQueryResultVenue, err

	case InlineQueryResultGameType:
		var inlineQueryResultGame InlineQueryResultGame
		err := json.Unmarshal(*rawMsg, &inlineQueryResultGame)
		return &inlineQueryResultGame, err

	case InlineQueryResultAnimationType:
		var inlineQueryResultAnimation InlineQueryResultAnimation
		err := json.Unmarshal(*rawMsg, &inlineQueryResultAnimation)
		return &inlineQueryResultAnimation, err

	case InlineQueryResultAudioType:
		var inlineQueryResultAudio InlineQueryResultAudio
		err := json.Unmarshal(*rawMsg, &inlineQueryResultAudio)
		return &inlineQueryResultAudio, err

	case InlineQueryResultDocumentType:
		var inlineQueryResultDocument InlineQueryResultDocument
		err := json.Unmarshal(*rawMsg, &inlineQueryResultDocument)
		return &inlineQueryResultDocument, err

	case InlineQueryResultPhotoType:
		var inlineQueryResultPhoto InlineQueryResultPhoto
		err := json.Unmarshal(*rawMsg, &inlineQueryResultPhoto)
		return &inlineQueryResultPhoto, err

	case InlineQueryResultStickerType:
		var inlineQueryResultSticker InlineQueryResultSticker
		err := json.Unmarshal(*rawMsg, &inlineQueryResultSticker)
		return &inlineQueryResultSticker, err

	case InlineQueryResultVideoType:
		var inlineQueryResultVideo InlineQueryResultVideo
		err := json.Unmarshal(*rawMsg, &inlineQueryResultVideo)
		return &inlineQueryResultVideo, err

	case InlineQueryResultVoiceNoteType:
		var inlineQueryResultVoiceNote InlineQueryResultVoiceNote
		err := json.Unmarshal(*rawMsg, &inlineQueryResultVoiceNote)
		return &inlineQueryResultVoiceNote, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// CallbackQueryPayload Represents a payload of a callback query
type CallbackQueryPayload interface {
	GetCallbackQueryPayloadEnum() CallbackQueryPayloadEnum
}

// CallbackQueryPayloadEnum Alias for abstract CallbackQueryPayload 'Sub-Classes', used as constant-enum here
type CallbackQueryPayloadEnum string

// CallbackQueryPayload enums
const (
	CallbackQueryPayloadDataType             CallbackQueryPayloadEnum = "callbackQueryPayloadData"
	CallbackQueryPayloadDataWithPasswordType CallbackQueryPayloadEnum = "callbackQueryPayloadDataWithPassword"
	CallbackQueryPayloadGameType             CallbackQueryPayloadEnum = "callbackQueryPayloadGame"
)

func unmarshalCallbackQueryPayload(rawMsg *json.RawMessage) (CallbackQueryPayload, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch CallbackQueryPayloadEnum(objMap["@type"].(string)) {
	case CallbackQueryPayloadDataType:
		var callbackQueryPayloadData CallbackQueryPayloadData
		err := json.Unmarshal(*rawMsg, &callbackQueryPayloadData)
		return &callbackQueryPayloadData, err

	case CallbackQueryPayloadDataWithPasswordType:
		var callbackQueryPayloadDataWithPassword CallbackQueryPayloadDataWithPassword
		err := json.Unmarshal(*rawMsg, &callbackQueryPayloadDataWithPassword)
		return &callbackQueryPayloadDataWithPassword, err

	case CallbackQueryPayloadGameType:
		var callbackQueryPayloadGame CallbackQueryPayloadGame
		err := json.Unmarshal(*rawMsg, &callbackQueryPayloadGame)
		return &callbackQueryPayloadGame, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// ChatEventAction Represents a chat event
type ChatEventAction interface {
	GetChatEventActionEnum() ChatEventActionEnum
}

// ChatEventActionEnum Alias for abstract ChatEventAction 'Sub-Classes', used as constant-enum here
type ChatEventActionEnum string

// ChatEventAction enums
const (
	ChatEventMessageEditedType                          ChatEventActionEnum = "chatEventMessageEdited"
	ChatEventMessageDeletedType                         ChatEventActionEnum = "chatEventMessageDeleted"
	ChatEventPollStoppedType                            ChatEventActionEnum = "chatEventPollStopped"
	ChatEventMessagePinnedType                          ChatEventActionEnum = "chatEventMessagePinned"
	ChatEventMessageUnpinnedType                        ChatEventActionEnum = "chatEventMessageUnpinned"
	ChatEventMemberJoinedType                           ChatEventActionEnum = "chatEventMemberJoined"
	ChatEventMemberJoinedByInviteLinkType               ChatEventActionEnum = "chatEventMemberJoinedByInviteLink"
	ChatEventMemberJoinedByRequestType                  ChatEventActionEnum = "chatEventMemberJoinedByRequest"
	ChatEventMemberLeftType                             ChatEventActionEnum = "chatEventMemberLeft"
	ChatEventMemberInvitedType                          ChatEventActionEnum = "chatEventMemberInvited"
	ChatEventMemberPromotedType                         ChatEventActionEnum = "chatEventMemberPromoted"
	ChatEventMemberRestrictedType                       ChatEventActionEnum = "chatEventMemberRestricted"
	ChatEventTitleChangedType                           ChatEventActionEnum = "chatEventTitleChanged"
	ChatEventPermissionsChangedType                     ChatEventActionEnum = "chatEventPermissionsChanged"
	ChatEventDescriptionChangedType                     ChatEventActionEnum = "chatEventDescriptionChanged"
	ChatEventUsernameChangedType                        ChatEventActionEnum = "chatEventUsernameChanged"
	ChatEventPhotoChangedType                           ChatEventActionEnum = "chatEventPhotoChanged"
	ChatEventInvitesToggledType                         ChatEventActionEnum = "chatEventInvitesToggled"
	ChatEventLinkedChatChangedType                      ChatEventActionEnum = "chatEventLinkedChatChanged"
	ChatEventSlowModeDelayChangedType                   ChatEventActionEnum = "chatEventSlowModeDelayChanged"
	ChatEventMessageTTLChangedType                      ChatEventActionEnum = "chatEventMessageTtlChanged"
	ChatEventSignMessagesToggledType                    ChatEventActionEnum = "chatEventSignMessagesToggled"
	ChatEventHasProtectedContentToggledType             ChatEventActionEnum = "chatEventHasProtectedContentToggled"
	ChatEventStickerSetChangedType                      ChatEventActionEnum = "chatEventStickerSetChanged"
	ChatEventLocationChangedType                        ChatEventActionEnum = "chatEventLocationChanged"
	ChatEventIsAllHistoryAvailableToggledType           ChatEventActionEnum = "chatEventIsAllHistoryAvailableToggled"
	ChatEventInviteLinkEditedType                       ChatEventActionEnum = "chatEventInviteLinkEdited"
	ChatEventInviteLinkRevokedType                      ChatEventActionEnum = "chatEventInviteLinkRevoked"
	ChatEventInviteLinkDeletedType                      ChatEventActionEnum = "chatEventInviteLinkDeleted"
	ChatEventVideoChatCreatedType                       ChatEventActionEnum = "chatEventVideoChatCreated"
	ChatEventVideoChatEndedType                         ChatEventActionEnum = "chatEventVideoChatEnded"
	ChatEventVideoChatParticipantIsMutedToggledType     ChatEventActionEnum = "chatEventVideoChatParticipantIsMutedToggled"
	ChatEventVideoChatParticipantVolumeLevelChangedType ChatEventActionEnum = "chatEventVideoChatParticipantVolumeLevelChanged"
	ChatEventVideoChatMuteNewParticipantsToggledType    ChatEventActionEnum = "chatEventVideoChatMuteNewParticipantsToggled"
)

func unmarshalChatEventAction(rawMsg *json.RawMessage) (ChatEventAction, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch ChatEventActionEnum(objMap["@type"].(string)) {
	case ChatEventMessageEditedType:
		var chatEventMessageEdited ChatEventMessageEdited
		err := json.Unmarshal(*rawMsg, &chatEventMessageEdited)
		return &chatEventMessageEdited, err

	case ChatEventMessageDeletedType:
		var chatEventMessageDeleted ChatEventMessageDeleted
		err := json.Unmarshal(*rawMsg, &chatEventMessageDeleted)
		return &chatEventMessageDeleted, err

	case ChatEventPollStoppedType:
		var chatEventPollStopped ChatEventPollStopped
		err := json.Unmarshal(*rawMsg, &chatEventPollStopped)
		return &chatEventPollStopped, err

	case ChatEventMessagePinnedType:
		var chatEventMessagePinned ChatEventMessagePinned
		err := json.Unmarshal(*rawMsg, &chatEventMessagePinned)
		return &chatEventMessagePinned, err

	case ChatEventMessageUnpinnedType:
		var chatEventMessageUnpinned ChatEventMessageUnpinned
		err := json.Unmarshal(*rawMsg, &chatEventMessageUnpinned)
		return &chatEventMessageUnpinned, err

	case ChatEventMemberJoinedType:
		var chatEventMemberJoined ChatEventMemberJoined
		err := json.Unmarshal(*rawMsg, &chatEventMemberJoined)
		return &chatEventMemberJoined, err

	case ChatEventMemberJoinedByInviteLinkType:
		var chatEventMemberJoinedByInviteLink ChatEventMemberJoinedByInviteLink
		err := json.Unmarshal(*rawMsg, &chatEventMemberJoinedByInviteLink)
		return &chatEventMemberJoinedByInviteLink, err

	case ChatEventMemberJoinedByRequestType:
		var chatEventMemberJoinedByRequest ChatEventMemberJoinedByRequest
		err := json.Unmarshal(*rawMsg, &chatEventMemberJoinedByRequest)
		return &chatEventMemberJoinedByRequest, err

	case ChatEventMemberLeftType:
		var chatEventMemberLeft ChatEventMemberLeft
		err := json.Unmarshal(*rawMsg, &chatEventMemberLeft)
		return &chatEventMemberLeft, err

	case ChatEventMemberInvitedType:
		var chatEventMemberInvited ChatEventMemberInvited
		err := json.Unmarshal(*rawMsg, &chatEventMemberInvited)
		return &chatEventMemberInvited, err

	case ChatEventMemberPromotedType:
		var chatEventMemberPromoted ChatEventMemberPromoted
		err := json.Unmarshal(*rawMsg, &chatEventMemberPromoted)
		return &chatEventMemberPromoted, err

	case ChatEventMemberRestrictedType:
		var chatEventMemberRestricted ChatEventMemberRestricted
		err := json.Unmarshal(*rawMsg, &chatEventMemberRestricted)
		return &chatEventMemberRestricted, err

	case ChatEventTitleChangedType:
		var chatEventTitleChanged ChatEventTitleChanged
		err := json.Unmarshal(*rawMsg, &chatEventTitleChanged)
		return &chatEventTitleChanged, err

	case ChatEventPermissionsChangedType:
		var chatEventPermissionsChanged ChatEventPermissionsChanged
		err := json.Unmarshal(*rawMsg, &chatEventPermissionsChanged)
		return &chatEventPermissionsChanged, err

	case ChatEventDescriptionChangedType:
		var chatEventDescriptionChanged ChatEventDescriptionChanged
		err := json.Unmarshal(*rawMsg, &chatEventDescriptionChanged)
		return &chatEventDescriptionChanged, err

	case ChatEventUsernameChangedType:
		var chatEventUsernameChanged ChatEventUsernameChanged
		err := json.Unmarshal(*rawMsg, &chatEventUsernameChanged)
		return &chatEventUsernameChanged, err

	case ChatEventPhotoChangedType:
		var chatEventPhotoChanged ChatEventPhotoChanged
		err := json.Unmarshal(*rawMsg, &chatEventPhotoChanged)
		return &chatEventPhotoChanged, err

	case ChatEventInvitesToggledType:
		var chatEventInvitesToggled ChatEventInvitesToggled
		err := json.Unmarshal(*rawMsg, &chatEventInvitesToggled)
		return &chatEventInvitesToggled, err

	case ChatEventLinkedChatChangedType:
		var chatEventLinkedChatChanged ChatEventLinkedChatChanged
		err := json.Unmarshal(*rawMsg, &chatEventLinkedChatChanged)
		return &chatEventLinkedChatChanged, err

	case ChatEventSlowModeDelayChangedType:
		var chatEventSlowModeDelayChanged ChatEventSlowModeDelayChanged
		err := json.Unmarshal(*rawMsg, &chatEventSlowModeDelayChanged)
		return &chatEventSlowModeDelayChanged, err

	case ChatEventMessageTTLChangedType:
		var chatEventMessageTTLChanged ChatEventMessageTTLChanged
		err := json.Unmarshal(*rawMsg, &chatEventMessageTTLChanged)
		return &chatEventMessageTTLChanged, err

	case ChatEventSignMessagesToggledType:
		var chatEventSignMessagesToggled ChatEventSignMessagesToggled
		err := json.Unmarshal(*rawMsg, &chatEventSignMessagesToggled)
		return &chatEventSignMessagesToggled, err

	case ChatEventHasProtectedContentToggledType:
		var chatEventHasProtectedContentToggled ChatEventHasProtectedContentToggled
		err := json.Unmarshal(*rawMsg, &chatEventHasProtectedContentToggled)
		return &chatEventHasProtectedContentToggled, err

	case ChatEventStickerSetChangedType:
		var chatEventStickerSetChanged ChatEventStickerSetChanged
		err := json.Unmarshal(*rawMsg, &chatEventStickerSetChanged)
		return &chatEventStickerSetChanged, err

	case ChatEventLocationChangedType:
		var chatEventLocationChanged ChatEventLocationChanged
		err := json.Unmarshal(*rawMsg, &chatEventLocationChanged)
		return &chatEventLocationChanged, err

	case ChatEventIsAllHistoryAvailableToggledType:
		var chatEventIsAllHistoryAvailableToggled ChatEventIsAllHistoryAvailableToggled
		err := json.Unmarshal(*rawMsg, &chatEventIsAllHistoryAvailableToggled)
		return &chatEventIsAllHistoryAvailableToggled, err

	case ChatEventInviteLinkEditedType:
		var chatEventInviteLinkEdited ChatEventInviteLinkEdited
		err := json.Unmarshal(*rawMsg, &chatEventInviteLinkEdited)
		return &chatEventInviteLinkEdited, err

	case ChatEventInviteLinkRevokedType:
		var chatEventInviteLinkRevoked ChatEventInviteLinkRevoked
		err := json.Unmarshal(*rawMsg, &chatEventInviteLinkRevoked)
		return &chatEventInviteLinkRevoked, err

	case ChatEventInviteLinkDeletedType:
		var chatEventInviteLinkDeleted ChatEventInviteLinkDeleted
		err := json.Unmarshal(*rawMsg, &chatEventInviteLinkDeleted)
		return &chatEventInviteLinkDeleted, err

	case ChatEventVideoChatCreatedType:
		var chatEventVideoChatCreated ChatEventVideoChatCreated
		err := json.Unmarshal(*rawMsg, &chatEventVideoChatCreated)
		return &chatEventVideoChatCreated, err

	case ChatEventVideoChatEndedType:
		var chatEventVideoChatEnded ChatEventVideoChatEnded
		err := json.Unmarshal(*rawMsg, &chatEventVideoChatEnded)
		return &chatEventVideoChatEnded, err

	case ChatEventVideoChatParticipantIsMutedToggledType:
		var chatEventVideoChatParticipantIsMutedToggled ChatEventVideoChatParticipantIsMutedToggled
		err := json.Unmarshal(*rawMsg, &chatEventVideoChatParticipantIsMutedToggled)
		return &chatEventVideoChatParticipantIsMutedToggled, err

	case ChatEventVideoChatParticipantVolumeLevelChangedType:
		var chatEventVideoChatParticipantVolumeLevelChanged ChatEventVideoChatParticipantVolumeLevelChanged
		err := json.Unmarshal(*rawMsg, &chatEventVideoChatParticipantVolumeLevelChanged)
		return &chatEventVideoChatParticipantVolumeLevelChanged, err

	case ChatEventVideoChatMuteNewParticipantsToggledType:
		var chatEventVideoChatMuteNewParticipantsToggled ChatEventVideoChatMuteNewParticipantsToggled
		err := json.Unmarshal(*rawMsg, &chatEventVideoChatMuteNewParticipantsToggled)
		return &chatEventVideoChatMuteNewParticipantsToggled, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// LanguagePackStringValue Represents the value of a string in a language pack
type LanguagePackStringValue interface {
	GetLanguagePackStringValueEnum() LanguagePackStringValueEnum
}

// LanguagePackStringValueEnum Alias for abstract LanguagePackStringValue 'Sub-Classes', used as constant-enum here
type LanguagePackStringValueEnum string

// LanguagePackStringValue enums
const (
	LanguagePackStringValueOrdinaryType   LanguagePackStringValueEnum = "languagePackStringValueOrdinary"
	LanguagePackStringValuePluralizedType LanguagePackStringValueEnum = "languagePackStringValuePluralized"
	LanguagePackStringValueDeletedType    LanguagePackStringValueEnum = "languagePackStringValueDeleted"
)

func unmarshalLanguagePackStringValue(rawMsg *json.RawMessage) (LanguagePackStringValue, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch LanguagePackStringValueEnum(objMap["@type"].(string)) {
	case LanguagePackStringValueOrdinaryType:
		var languagePackStringValueOrdinary LanguagePackStringValueOrdinary
		err := json.Unmarshal(*rawMsg, &languagePackStringValueOrdinary)
		return &languagePackStringValueOrdinary, err

	case LanguagePackStringValuePluralizedType:
		var languagePackStringValuePluralized LanguagePackStringValuePluralized
		err := json.Unmarshal(*rawMsg, &languagePackStringValuePluralized)
		return &languagePackStringValuePluralized, err

	case LanguagePackStringValueDeletedType:
		var languagePackStringValueDeleted LanguagePackStringValueDeleted
		err := json.Unmarshal(*rawMsg, &languagePackStringValueDeleted)
		return &languagePackStringValueDeleted, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// DeviceToken Represents a data needed to subscribe for push notifications through registerDevice method. To use specific push notification service, the correct application platform must be specified and a valid server authentication data must be uploaded at https://my.telegram.org
type DeviceToken interface {
	GetDeviceTokenEnum() DeviceTokenEnum
}

// DeviceTokenEnum Alias for abstract DeviceToken 'Sub-Classes', used as constant-enum here
type DeviceTokenEnum string

// DeviceToken enums
const (
	DeviceTokenFirebaseCloudMessagingType DeviceTokenEnum = "deviceTokenFirebaseCloudMessaging"
	DeviceTokenApplePushType              DeviceTokenEnum = "deviceTokenApplePush"
	DeviceTokenApplePushVoIPType          DeviceTokenEnum = "deviceTokenApplePushVoIP"
	DeviceTokenWindowsPushType            DeviceTokenEnum = "deviceTokenWindowsPush"
	DeviceTokenMicrosoftPushType          DeviceTokenEnum = "deviceTokenMicrosoftPush"
	DeviceTokenMicrosoftPushVoIPType      DeviceTokenEnum = "deviceTokenMicrosoftPushVoIP"
	DeviceTokenWebPushType                DeviceTokenEnum = "deviceTokenWebPush"
	DeviceTokenSimplePushType             DeviceTokenEnum = "deviceTokenSimplePush"
	DeviceTokenUbuntuPushType             DeviceTokenEnum = "deviceTokenUbuntuPush"
	DeviceTokenBlackBerryPushType         DeviceTokenEnum = "deviceTokenBlackBerryPush"
	DeviceTokenTizenPushType              DeviceTokenEnum = "deviceTokenTizenPush"
)

func unmarshalDeviceToken(rawMsg *json.RawMessage) (DeviceToken, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch DeviceTokenEnum(objMap["@type"].(string)) {
	case DeviceTokenFirebaseCloudMessagingType:
		var deviceTokenFirebaseCloudMessaging DeviceTokenFirebaseCloudMessaging
		err := json.Unmarshal(*rawMsg, &deviceTokenFirebaseCloudMessaging)
		return &deviceTokenFirebaseCloudMessaging, err

	case DeviceTokenApplePushType:
		var deviceTokenApplePush DeviceTokenApplePush
		err := json.Unmarshal(*rawMsg, &deviceTokenApplePush)
		return &deviceTokenApplePush, err

	case DeviceTokenApplePushVoIPType:
		var deviceTokenApplePushVoIP DeviceTokenApplePushVoIP
		err := json.Unmarshal(*rawMsg, &deviceTokenApplePushVoIP)
		return &deviceTokenApplePushVoIP, err

	case DeviceTokenWindowsPushType:
		var deviceTokenWindowsPush DeviceTokenWindowsPush
		err := json.Unmarshal(*rawMsg, &deviceTokenWindowsPush)
		return &deviceTokenWindowsPush, err

	case DeviceTokenMicrosoftPushType:
		var deviceTokenMicrosoftPush DeviceTokenMicrosoftPush
		err := json.Unmarshal(*rawMsg, &deviceTokenMicrosoftPush)
		return &deviceTokenMicrosoftPush, err

	case DeviceTokenMicrosoftPushVoIPType:
		var deviceTokenMicrosoftPushVoIP DeviceTokenMicrosoftPushVoIP
		err := json.Unmarshal(*rawMsg, &deviceTokenMicrosoftPushVoIP)
		return &deviceTokenMicrosoftPushVoIP, err

	case DeviceTokenWebPushType:
		var deviceTokenWebPush DeviceTokenWebPush
		err := json.Unmarshal(*rawMsg, &deviceTokenWebPush)
		return &deviceTokenWebPush, err

	case DeviceTokenSimplePushType:
		var deviceTokenSimplePush DeviceTokenSimplePush
		err := json.Unmarshal(*rawMsg, &deviceTokenSimplePush)
		return &deviceTokenSimplePush, err

	case DeviceTokenUbuntuPushType:
		var deviceTokenUbuntuPush DeviceTokenUbuntuPush
		err := json.Unmarshal(*rawMsg, &deviceTokenUbuntuPush)
		return &deviceTokenUbuntuPush, err

	case DeviceTokenBlackBerryPushType:
		var deviceTokenBlackBerryPush DeviceTokenBlackBerryPush
		err := json.Unmarshal(*rawMsg, &deviceTokenBlackBerryPush)
		return &deviceTokenBlackBerryPush, err

	case DeviceTokenTizenPushType:
		var deviceTokenTizenPush DeviceTokenTizenPush
		err := json.Unmarshal(*rawMsg, &deviceTokenTizenPush)
		return &deviceTokenTizenPush, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// BackgroundFill Describes a fill of a background
type BackgroundFill interface {
	GetBackgroundFillEnum() BackgroundFillEnum
}

// BackgroundFillEnum Alias for abstract BackgroundFill 'Sub-Classes', used as constant-enum here
type BackgroundFillEnum string

// BackgroundFill enums
const (
	BackgroundFillSolidType            BackgroundFillEnum = "backgroundFillSolid"
	BackgroundFillGradientType         BackgroundFillEnum = "backgroundFillGradient"
	BackgroundFillFreeformGradientType BackgroundFillEnum = "backgroundFillFreeformGradient"
)

func unmarshalBackgroundFill(rawMsg *json.RawMessage) (BackgroundFill, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch BackgroundFillEnum(objMap["@type"].(string)) {
	case BackgroundFillSolidType:
		var backgroundFillSolid BackgroundFillSolid
		err := json.Unmarshal(*rawMsg, &backgroundFillSolid)
		return &backgroundFillSolid, err

	case BackgroundFillGradientType:
		var backgroundFillGradient BackgroundFillGradient
		err := json.Unmarshal(*rawMsg, &backgroundFillGradient)
		return &backgroundFillGradient, err

	case BackgroundFillFreeformGradientType:
		var backgroundFillFreeformGradient BackgroundFillFreeformGradient
		err := json.Unmarshal(*rawMsg, &backgroundFillFreeformGradient)
		return &backgroundFillFreeformGradient, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// BackgroundType Describes the type of a background
type BackgroundType interface {
	GetBackgroundTypeEnum() BackgroundTypeEnum
}

// BackgroundTypeEnum Alias for abstract BackgroundType 'Sub-Classes', used as constant-enum here
type BackgroundTypeEnum string

// BackgroundType enums
const (
	BackgroundTypeWallpaperType BackgroundTypeEnum = "backgroundTypeWallpaper"
	BackgroundTypePatternType   BackgroundTypeEnum = "backgroundTypePattern"
	BackgroundTypeFillType      BackgroundTypeEnum = "backgroundTypeFill"
)

func unmarshalBackgroundType(rawMsg *json.RawMessage) (BackgroundType, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch BackgroundTypeEnum(objMap["@type"].(string)) {
	case BackgroundTypeWallpaperType:
		var backgroundTypeWallpaper BackgroundTypeWallpaper
		err := json.Unmarshal(*rawMsg, &backgroundTypeWallpaper)
		return &backgroundTypeWallpaper, err

	case BackgroundTypePatternType:
		var backgroundTypePattern BackgroundTypePattern
		err := json.Unmarshal(*rawMsg, &backgroundTypePattern)
		return &backgroundTypePattern, err

	case BackgroundTypeFillType:
		var backgroundTypeFill BackgroundTypeFill
		err := json.Unmarshal(*rawMsg, &backgroundTypeFill)
		return &backgroundTypeFill, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// InputBackground Contains information about background to set
type InputBackground interface {
	GetInputBackgroundEnum() InputBackgroundEnum
}

// InputBackgroundEnum Alias for abstract InputBackground 'Sub-Classes', used as constant-enum here
type InputBackgroundEnum string

// InputBackground enums
const (
	InputBackgroundLocalType  InputBackgroundEnum = "inputBackgroundLocal"
	InputBackgroundRemoteType InputBackgroundEnum = "inputBackgroundRemote"
)

func unmarshalInputBackground(rawMsg *json.RawMessage) (InputBackground, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch InputBackgroundEnum(objMap["@type"].(string)) {
	case InputBackgroundLocalType:
		var inputBackgroundLocal InputBackgroundLocal
		err := json.Unmarshal(*rawMsg, &inputBackgroundLocal)
		return &inputBackgroundLocal, err

	case InputBackgroundRemoteType:
		var inputBackgroundRemote InputBackgroundRemote
		err := json.Unmarshal(*rawMsg, &inputBackgroundRemote)
		return &inputBackgroundRemote, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// CanTransferOwnershipResult Represents result of checking whether the current session can be used to transfer a chat ownership to another user
type CanTransferOwnershipResult interface {
	GetCanTransferOwnershipResultEnum() CanTransferOwnershipResultEnum
}

// CanTransferOwnershipResultEnum Alias for abstract CanTransferOwnershipResult 'Sub-Classes', used as constant-enum here
type CanTransferOwnershipResultEnum string

// CanTransferOwnershipResult enums
const (
	CanTransferOwnershipResultOkType               CanTransferOwnershipResultEnum = "canTransferOwnershipResultOk"
	CanTransferOwnershipResultPasswordNeededType   CanTransferOwnershipResultEnum = "canTransferOwnershipResultPasswordNeeded"
	CanTransferOwnershipResultPasswordTooFreshType CanTransferOwnershipResultEnum = "canTransferOwnershipResultPasswordTooFresh"
	CanTransferOwnershipResultSessionTooFreshType  CanTransferOwnershipResultEnum = "canTransferOwnershipResultSessionTooFresh"
)

func unmarshalCanTransferOwnershipResult(rawMsg *json.RawMessage) (CanTransferOwnershipResult, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch CanTransferOwnershipResultEnum(objMap["@type"].(string)) {
	case CanTransferOwnershipResultOkType:
		var canTransferOwnershipResultOk CanTransferOwnershipResultOk
		err := json.Unmarshal(*rawMsg, &canTransferOwnershipResultOk)
		return &canTransferOwnershipResultOk, err

	case CanTransferOwnershipResultPasswordNeededType:
		var canTransferOwnershipResultPasswordNeeded CanTransferOwnershipResultPasswordNeeded
		err := json.Unmarshal(*rawMsg, &canTransferOwnershipResultPasswordNeeded)
		return &canTransferOwnershipResultPasswordNeeded, err

	case CanTransferOwnershipResultPasswordTooFreshType:
		var canTransferOwnershipResultPasswordTooFresh CanTransferOwnershipResultPasswordTooFresh
		err := json.Unmarshal(*rawMsg, &canTransferOwnershipResultPasswordTooFresh)
		return &canTransferOwnershipResultPasswordTooFresh, err

	case CanTransferOwnershipResultSessionTooFreshType:
		var canTransferOwnershipResultSessionTooFresh CanTransferOwnershipResultSessionTooFresh
		err := json.Unmarshal(*rawMsg, &canTransferOwnershipResultSessionTooFresh)
		return &canTransferOwnershipResultSessionTooFresh, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// CheckChatUsernameResult Represents result of checking whether a username can be set for a chat
type CheckChatUsernameResult interface {
	GetCheckChatUsernameResultEnum() CheckChatUsernameResultEnum
}

// CheckChatUsernameResultEnum Alias for abstract CheckChatUsernameResult 'Sub-Classes', used as constant-enum here
type CheckChatUsernameResultEnum string

// CheckChatUsernameResult enums
const (
	CheckChatUsernameResultOkType                      CheckChatUsernameResultEnum = "checkChatUsernameResultOk"
	CheckChatUsernameResultUsernameInvalidType         CheckChatUsernameResultEnum = "checkChatUsernameResultUsernameInvalid"
	CheckChatUsernameResultUsernameOccupiedType        CheckChatUsernameResultEnum = "checkChatUsernameResultUsernameOccupied"
	CheckChatUsernameResultPublicChatsTooMuchType      CheckChatUsernameResultEnum = "checkChatUsernameResultPublicChatsTooMuch"
	CheckChatUsernameResultPublicGroupsUnavailableType CheckChatUsernameResultEnum = "checkChatUsernameResultPublicGroupsUnavailable"
)

func unmarshalCheckChatUsernameResult(rawMsg *json.RawMessage) (CheckChatUsernameResult, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch CheckChatUsernameResultEnum(objMap["@type"].(string)) {
	case CheckChatUsernameResultOkType:
		var checkChatUsernameResultOk CheckChatUsernameResultOk
		err := json.Unmarshal(*rawMsg, &checkChatUsernameResultOk)
		return &checkChatUsernameResultOk, err

	case CheckChatUsernameResultUsernameInvalidType:
		var checkChatUsernameResultUsernameInvalid CheckChatUsernameResultUsernameInvalid
		err := json.Unmarshal(*rawMsg, &checkChatUsernameResultUsernameInvalid)
		return &checkChatUsernameResultUsernameInvalid, err

	case CheckChatUsernameResultUsernameOccupiedType:
		var checkChatUsernameResultUsernameOccupied CheckChatUsernameResultUsernameOccupied
		err := json.Unmarshal(*rawMsg, &checkChatUsernameResultUsernameOccupied)
		return &checkChatUsernameResultUsernameOccupied, err

	case CheckChatUsernameResultPublicChatsTooMuchType:
		var checkChatUsernameResultPublicChatsTooMuch CheckChatUsernameResultPublicChatsTooMuch
		err := json.Unmarshal(*rawMsg, &checkChatUsernameResultPublicChatsTooMuch)
		return &checkChatUsernameResultPublicChatsTooMuch, err

	case CheckChatUsernameResultPublicGroupsUnavailableType:
		var checkChatUsernameResultPublicGroupsUnavailable CheckChatUsernameResultPublicGroupsUnavailable
		err := json.Unmarshal(*rawMsg, &checkChatUsernameResultPublicGroupsUnavailable)
		return &checkChatUsernameResultPublicGroupsUnavailable, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// CheckStickerSetNameResult Represents result of checking whether a name can be used for a new sticker set
type CheckStickerSetNameResult interface {
	GetCheckStickerSetNameResultEnum() CheckStickerSetNameResultEnum
}

// CheckStickerSetNameResultEnum Alias for abstract CheckStickerSetNameResult 'Sub-Classes', used as constant-enum here
type CheckStickerSetNameResultEnum string

// CheckStickerSetNameResult enums
const (
	CheckStickerSetNameResultOkType           CheckStickerSetNameResultEnum = "checkStickerSetNameResultOk"
	CheckStickerSetNameResultNameInvalidType  CheckStickerSetNameResultEnum = "checkStickerSetNameResultNameInvalid"
	CheckStickerSetNameResultNameOccupiedType CheckStickerSetNameResultEnum = "checkStickerSetNameResultNameOccupied"
)

func unmarshalCheckStickerSetNameResult(rawMsg *json.RawMessage) (CheckStickerSetNameResult, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch CheckStickerSetNameResultEnum(objMap["@type"].(string)) {
	case CheckStickerSetNameResultOkType:
		var checkStickerSetNameResultOk CheckStickerSetNameResultOk
		err := json.Unmarshal(*rawMsg, &checkStickerSetNameResultOk)
		return &checkStickerSetNameResultOk, err

	case CheckStickerSetNameResultNameInvalidType:
		var checkStickerSetNameResultNameInvalid CheckStickerSetNameResultNameInvalid
		err := json.Unmarshal(*rawMsg, &checkStickerSetNameResultNameInvalid)
		return &checkStickerSetNameResultNameInvalid, err

	case CheckStickerSetNameResultNameOccupiedType:
		var checkStickerSetNameResultNameOccupied CheckStickerSetNameResultNameOccupied
		err := json.Unmarshal(*rawMsg, &checkStickerSetNameResultNameOccupied)
		return &checkStickerSetNameResultNameOccupied, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// ResetPasswordResult Represents result of 2-step verification password reset
type ResetPasswordResult interface {
	GetResetPasswordResultEnum() ResetPasswordResultEnum
}

// ResetPasswordResultEnum Alias for abstract ResetPasswordResult 'Sub-Classes', used as constant-enum here
type ResetPasswordResultEnum string

// ResetPasswordResult enums
const (
	ResetPasswordResultOkType       ResetPasswordResultEnum = "resetPasswordResultOk"
	ResetPasswordResultPendingType  ResetPasswordResultEnum = "resetPasswordResultPending"
	ResetPasswordResultDeclinedType ResetPasswordResultEnum = "resetPasswordResultDeclined"
)

func unmarshalResetPasswordResult(rawMsg *json.RawMessage) (ResetPasswordResult, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch ResetPasswordResultEnum(objMap["@type"].(string)) {
	case ResetPasswordResultOkType:
		var resetPasswordResultOk ResetPasswordResultOk
		err := json.Unmarshal(*rawMsg, &resetPasswordResultOk)
		return &resetPasswordResultOk, err

	case ResetPasswordResultPendingType:
		var resetPasswordResultPending ResetPasswordResultPending
		err := json.Unmarshal(*rawMsg, &resetPasswordResultPending)
		return &resetPasswordResultPending, err

	case ResetPasswordResultDeclinedType:
		var resetPasswordResultDeclined ResetPasswordResultDeclined
		err := json.Unmarshal(*rawMsg, &resetPasswordResultDeclined)
		return &resetPasswordResultDeclined, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// MessageFileType Contains information about a file with messages exported from another app
type MessageFileType interface {
	GetMessageFileTypeEnum() MessageFileTypeEnum
}

// MessageFileTypeEnum Alias for abstract MessageFileType 'Sub-Classes', used as constant-enum here
type MessageFileTypeEnum string

// MessageFileType enums
const (
	MessageFileTypePrivateType MessageFileTypeEnum = "messageFileTypePrivate"
	MessageFileTypeGroupType   MessageFileTypeEnum = "messageFileTypeGroup"
	MessageFileTypeUnknownType MessageFileTypeEnum = "messageFileTypeUnknown"
)

func unmarshalMessageFileType(rawMsg *json.RawMessage) (MessageFileType, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch MessageFileTypeEnum(objMap["@type"].(string)) {
	case MessageFileTypePrivateType:
		var messageFileTypePrivate MessageFileTypePrivate
		err := json.Unmarshal(*rawMsg, &messageFileTypePrivate)
		return &messageFileTypePrivate, err

	case MessageFileTypeGroupType:
		var messageFileTypeGroup MessageFileTypeGroup
		err := json.Unmarshal(*rawMsg, &messageFileTypeGroup)
		return &messageFileTypeGroup, err

	case MessageFileTypeUnknownType:
		var messageFileTypeUnknown MessageFileTypeUnknown
		err := json.Unmarshal(*rawMsg, &messageFileTypeUnknown)
		return &messageFileTypeUnknown, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// PushMessageContent Contains content of a push message notification
type PushMessageContent interface {
	GetPushMessageContentEnum() PushMessageContentEnum
}

// PushMessageContentEnum Alias for abstract PushMessageContent 'Sub-Classes', used as constant-enum here
type PushMessageContentEnum string

// PushMessageContent enums
const (
	PushMessageContentHiddenType               PushMessageContentEnum = "pushMessageContentHidden"
	PushMessageContentAnimationType            PushMessageContentEnum = "pushMessageContentAnimation"
	PushMessageContentAudioType                PushMessageContentEnum = "pushMessageContentAudio"
	PushMessageContentContactType              PushMessageContentEnum = "pushMessageContentContact"
	PushMessageContentContactRegisteredType    PushMessageContentEnum = "pushMessageContentContactRegistered"
	PushMessageContentDocumentType             PushMessageContentEnum = "pushMessageContentDocument"
	PushMessageContentGameType                 PushMessageContentEnum = "pushMessageContentGame"
	PushMessageContentGameScoreType            PushMessageContentEnum = "pushMessageContentGameScore"
	PushMessageContentInvoiceType              PushMessageContentEnum = "pushMessageContentInvoice"
	PushMessageContentLocationType             PushMessageContentEnum = "pushMessageContentLocation"
	PushMessageContentPhotoType                PushMessageContentEnum = "pushMessageContentPhoto"
	PushMessageContentPollType                 PushMessageContentEnum = "pushMessageContentPoll"
	PushMessageContentScreenshotTakenType      PushMessageContentEnum = "pushMessageContentScreenshotTaken"
	PushMessageContentStickerType              PushMessageContentEnum = "pushMessageContentSticker"
	PushMessageContentTextType                 PushMessageContentEnum = "pushMessageContentText"
	PushMessageContentVideoType                PushMessageContentEnum = "pushMessageContentVideo"
	PushMessageContentVideoNoteType            PushMessageContentEnum = "pushMessageContentVideoNote"
	PushMessageContentVoiceNoteType            PushMessageContentEnum = "pushMessageContentVoiceNote"
	PushMessageContentBasicGroupChatCreateType PushMessageContentEnum = "pushMessageContentBasicGroupChatCreate"
	PushMessageContentChatAddMembersType       PushMessageContentEnum = "pushMessageContentChatAddMembers"
	PushMessageContentChatChangePhotoType      PushMessageContentEnum = "pushMessageContentChatChangePhoto"
	PushMessageContentChatChangeTitleType      PushMessageContentEnum = "pushMessageContentChatChangeTitle"
	PushMessageContentChatSetThemeType         PushMessageContentEnum = "pushMessageContentChatSetTheme"
	PushMessageContentChatDeleteMemberType     PushMessageContentEnum = "pushMessageContentChatDeleteMember"
	PushMessageContentChatJoinByLinkType       PushMessageContentEnum = "pushMessageContentChatJoinByLink"
	PushMessageContentChatJoinByRequestType    PushMessageContentEnum = "pushMessageContentChatJoinByRequest"
	PushMessageContentMessageForwardsType      PushMessageContentEnum = "pushMessageContentMessageForwards"
	PushMessageContentMediaAlbumType           PushMessageContentEnum = "pushMessageContentMediaAlbum"
)

func unmarshalPushMessageContent(rawMsg *json.RawMessage) (PushMessageContent, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch PushMessageContentEnum(objMap["@type"].(string)) {
	case PushMessageContentHiddenType:
		var pushMessageContentHidden PushMessageContentHidden
		err := json.Unmarshal(*rawMsg, &pushMessageContentHidden)
		return &pushMessageContentHidden, err

	case PushMessageContentAnimationType:
		var pushMessageContentAnimation PushMessageContentAnimation
		err := json.Unmarshal(*rawMsg, &pushMessageContentAnimation)
		return &pushMessageContentAnimation, err

	case PushMessageContentAudioType:
		var pushMessageContentAudio PushMessageContentAudio
		err := json.Unmarshal(*rawMsg, &pushMessageContentAudio)
		return &pushMessageContentAudio, err

	case PushMessageContentContactType:
		var pushMessageContentContact PushMessageContentContact
		err := json.Unmarshal(*rawMsg, &pushMessageContentContact)
		return &pushMessageContentContact, err

	case PushMessageContentContactRegisteredType:
		var pushMessageContentContactRegistered PushMessageContentContactRegistered
		err := json.Unmarshal(*rawMsg, &pushMessageContentContactRegistered)
		return &pushMessageContentContactRegistered, err

	case PushMessageContentDocumentType:
		var pushMessageContentDocument PushMessageContentDocument
		err := json.Unmarshal(*rawMsg, &pushMessageContentDocument)
		return &pushMessageContentDocument, err

	case PushMessageContentGameType:
		var pushMessageContentGame PushMessageContentGame
		err := json.Unmarshal(*rawMsg, &pushMessageContentGame)
		return &pushMessageContentGame, err

	case PushMessageContentGameScoreType:
		var pushMessageContentGameScore PushMessageContentGameScore
		err := json.Unmarshal(*rawMsg, &pushMessageContentGameScore)
		return &pushMessageContentGameScore, err

	case PushMessageContentInvoiceType:
		var pushMessageContentInvoice PushMessageContentInvoice
		err := json.Unmarshal(*rawMsg, &pushMessageContentInvoice)
		return &pushMessageContentInvoice, err

	case PushMessageContentLocationType:
		var pushMessageContentLocation PushMessageContentLocation
		err := json.Unmarshal(*rawMsg, &pushMessageContentLocation)
		return &pushMessageContentLocation, err

	case PushMessageContentPhotoType:
		var pushMessageContentPhoto PushMessageContentPhoto
		err := json.Unmarshal(*rawMsg, &pushMessageContentPhoto)
		return &pushMessageContentPhoto, err

	case PushMessageContentPollType:
		var pushMessageContentPoll PushMessageContentPoll
		err := json.Unmarshal(*rawMsg, &pushMessageContentPoll)
		return &pushMessageContentPoll, err

	case PushMessageContentScreenshotTakenType:
		var pushMessageContentScreenshotTaken PushMessageContentScreenshotTaken
		err := json.Unmarshal(*rawMsg, &pushMessageContentScreenshotTaken)
		return &pushMessageContentScreenshotTaken, err

	case PushMessageContentStickerType:
		var pushMessageContentSticker PushMessageContentSticker
		err := json.Unmarshal(*rawMsg, &pushMessageContentSticker)
		return &pushMessageContentSticker, err

	case PushMessageContentTextType:
		var pushMessageContentText PushMessageContentText
		err := json.Unmarshal(*rawMsg, &pushMessageContentText)
		return &pushMessageContentText, err

	case PushMessageContentVideoType:
		var pushMessageContentVideo PushMessageContentVideo
		err := json.Unmarshal(*rawMsg, &pushMessageContentVideo)
		return &pushMessageContentVideo, err

	case PushMessageContentVideoNoteType:
		var pushMessageContentVideoNote PushMessageContentVideoNote
		err := json.Unmarshal(*rawMsg, &pushMessageContentVideoNote)
		return &pushMessageContentVideoNote, err

	case PushMessageContentVoiceNoteType:
		var pushMessageContentVoiceNote PushMessageContentVoiceNote
		err := json.Unmarshal(*rawMsg, &pushMessageContentVoiceNote)
		return &pushMessageContentVoiceNote, err

	case PushMessageContentBasicGroupChatCreateType:
		var pushMessageContentBasicGroupChatCreate PushMessageContentBasicGroupChatCreate
		err := json.Unmarshal(*rawMsg, &pushMessageContentBasicGroupChatCreate)
		return &pushMessageContentBasicGroupChatCreate, err

	case PushMessageContentChatAddMembersType:
		var pushMessageContentChatAddMembers PushMessageContentChatAddMembers
		err := json.Unmarshal(*rawMsg, &pushMessageContentChatAddMembers)
		return &pushMessageContentChatAddMembers, err

	case PushMessageContentChatChangePhotoType:
		var pushMessageContentChatChangePhoto PushMessageContentChatChangePhoto
		err := json.Unmarshal(*rawMsg, &pushMessageContentChatChangePhoto)
		return &pushMessageContentChatChangePhoto, err

	case PushMessageContentChatChangeTitleType:
		var pushMessageContentChatChangeTitle PushMessageContentChatChangeTitle
		err := json.Unmarshal(*rawMsg, &pushMessageContentChatChangeTitle)
		return &pushMessageContentChatChangeTitle, err

	case PushMessageContentChatSetThemeType:
		var pushMessageContentChatSetTheme PushMessageContentChatSetTheme
		err := json.Unmarshal(*rawMsg, &pushMessageContentChatSetTheme)
		return &pushMessageContentChatSetTheme, err

	case PushMessageContentChatDeleteMemberType:
		var pushMessageContentChatDeleteMember PushMessageContentChatDeleteMember
		err := json.Unmarshal(*rawMsg, &pushMessageContentChatDeleteMember)
		return &pushMessageContentChatDeleteMember, err

	case PushMessageContentChatJoinByLinkType:
		var pushMessageContentChatJoinByLink PushMessageContentChatJoinByLink
		err := json.Unmarshal(*rawMsg, &pushMessageContentChatJoinByLink)
		return &pushMessageContentChatJoinByLink, err

	case PushMessageContentChatJoinByRequestType:
		var pushMessageContentChatJoinByRequest PushMessageContentChatJoinByRequest
		err := json.Unmarshal(*rawMsg, &pushMessageContentChatJoinByRequest)
		return &pushMessageContentChatJoinByRequest, err

	case PushMessageContentMessageForwardsType:
		var pushMessageContentMessageForwards PushMessageContentMessageForwards
		err := json.Unmarshal(*rawMsg, &pushMessageContentMessageForwards)
		return &pushMessageContentMessageForwards, err

	case PushMessageContentMediaAlbumType:
		var pushMessageContentMediaAlbum PushMessageContentMediaAlbum
		err := json.Unmarshal(*rawMsg, &pushMessageContentMediaAlbum)
		return &pushMessageContentMediaAlbum, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// NotificationType Contains detailed information about a notification
type NotificationType interface {
	GetNotificationTypeEnum() NotificationTypeEnum
}

// NotificationTypeEnum Alias for abstract NotificationType 'Sub-Classes', used as constant-enum here
type NotificationTypeEnum string

// NotificationType enums
const (
	NotificationTypeNewMessageType     NotificationTypeEnum = "notificationTypeNewMessage"
	NotificationTypeNewSecretChatType  NotificationTypeEnum = "notificationTypeNewSecretChat"
	NotificationTypeNewCallType        NotificationTypeEnum = "notificationTypeNewCall"
	NotificationTypeNewPushMessageType NotificationTypeEnum = "notificationTypeNewPushMessage"
)

func unmarshalNotificationType(rawMsg *json.RawMessage) (NotificationType, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch NotificationTypeEnum(objMap["@type"].(string)) {
	case NotificationTypeNewMessageType:
		var notificationTypeNewMessage NotificationTypeNewMessage
		err := json.Unmarshal(*rawMsg, &notificationTypeNewMessage)
		return &notificationTypeNewMessage, err

	case NotificationTypeNewSecretChatType:
		var notificationTypeNewSecretChat NotificationTypeNewSecretChat
		err := json.Unmarshal(*rawMsg, &notificationTypeNewSecretChat)
		return &notificationTypeNewSecretChat, err

	case NotificationTypeNewCallType:
		var notificationTypeNewCall NotificationTypeNewCall
		err := json.Unmarshal(*rawMsg, &notificationTypeNewCall)
		return &notificationTypeNewCall, err

	case NotificationTypeNewPushMessageType:
		var notificationTypeNewPushMessage NotificationTypeNewPushMessage
		err := json.Unmarshal(*rawMsg, &notificationTypeNewPushMessage)
		return &notificationTypeNewPushMessage, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// NotificationGroupType Describes the type of notifications in a notification group
type NotificationGroupType interface {
	GetNotificationGroupTypeEnum() NotificationGroupTypeEnum
}

// NotificationGroupTypeEnum Alias for abstract NotificationGroupType 'Sub-Classes', used as constant-enum here
type NotificationGroupTypeEnum string

// NotificationGroupType enums
const (
	NotificationGroupTypeMessagesType   NotificationGroupTypeEnum = "notificationGroupTypeMessages"
	NotificationGroupTypeMentionsType   NotificationGroupTypeEnum = "notificationGroupTypeMentions"
	NotificationGroupTypeSecretChatType NotificationGroupTypeEnum = "notificationGroupTypeSecretChat"
	NotificationGroupTypeCallsType      NotificationGroupTypeEnum = "notificationGroupTypeCalls"
)

func unmarshalNotificationGroupType(rawMsg *json.RawMessage) (NotificationGroupType, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch NotificationGroupTypeEnum(objMap["@type"].(string)) {
	case NotificationGroupTypeMessagesType:
		var notificationGroupTypeMessages NotificationGroupTypeMessages
		err := json.Unmarshal(*rawMsg, &notificationGroupTypeMessages)
		return &notificationGroupTypeMessages, err

	case NotificationGroupTypeMentionsType:
		var notificationGroupTypeMentions NotificationGroupTypeMentions
		err := json.Unmarshal(*rawMsg, &notificationGroupTypeMentions)
		return &notificationGroupTypeMentions, err

	case NotificationGroupTypeSecretChatType:
		var notificationGroupTypeSecretChat NotificationGroupTypeSecretChat
		err := json.Unmarshal(*rawMsg, &notificationGroupTypeSecretChat)
		return &notificationGroupTypeSecretChat, err

	case NotificationGroupTypeCallsType:
		var notificationGroupTypeCalls NotificationGroupTypeCalls
		err := json.Unmarshal(*rawMsg, &notificationGroupTypeCalls)
		return &notificationGroupTypeCalls, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// OptionValue Represents the value of an option
type OptionValue interface {
	GetOptionValueEnum() OptionValueEnum
}

// OptionValueEnum Alias for abstract OptionValue 'Sub-Classes', used as constant-enum here
type OptionValueEnum string

// OptionValue enums
const (
	OptionValueBooleanType OptionValueEnum = "optionValueBoolean"
	OptionValueEmptyType   OptionValueEnum = "optionValueEmpty"
	OptionValueIntegerType OptionValueEnum = "optionValueInteger"
	OptionValueStringType  OptionValueEnum = "optionValueString"
)

func unmarshalOptionValue(rawMsg *json.RawMessage) (OptionValue, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch OptionValueEnum(objMap["@type"].(string)) {
	case OptionValueBooleanType:
		var optionValueBoolean OptionValueBoolean
		err := json.Unmarshal(*rawMsg, &optionValueBoolean)
		return &optionValueBoolean, err

	case OptionValueEmptyType:
		var optionValueEmpty OptionValueEmpty
		err := json.Unmarshal(*rawMsg, &optionValueEmpty)
		return &optionValueEmpty, err

	case OptionValueIntegerType:
		var optionValueInteger OptionValueInteger
		err := json.Unmarshal(*rawMsg, &optionValueInteger)
		return &optionValueInteger, err

	case OptionValueStringType:
		var optionValueString OptionValueString
		err := json.Unmarshal(*rawMsg, &optionValueString)
		return &optionValueString, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// JsonValue Represents a JSON value
type JsonValue interface {
	GetJsonValueEnum() JsonValueEnum
}

// JsonValueEnum Alias for abstract JsonValue 'Sub-Classes', used as constant-enum here
type JsonValueEnum string

// JsonValue enums
const (
	JsonValueNullType    JsonValueEnum = "jsonValueNull"
	JsonValueBooleanType JsonValueEnum = "jsonValueBoolean"
	JsonValueNumberType  JsonValueEnum = "jsonValueNumber"
	JsonValueStringType  JsonValueEnum = "jsonValueString"
	JsonValueArrayType   JsonValueEnum = "jsonValueArray"
	JsonValueObjectType  JsonValueEnum = "jsonValueObject"
)

func unmarshalJsonValue(rawMsg *json.RawMessage) (JsonValue, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch JsonValueEnum(objMap["@type"].(string)) {
	case JsonValueNullType:
		var jsonValueNull JsonValueNull
		err := json.Unmarshal(*rawMsg, &jsonValueNull)
		return &jsonValueNull, err

	case JsonValueBooleanType:
		var jsonValueBoolean JsonValueBoolean
		err := json.Unmarshal(*rawMsg, &jsonValueBoolean)
		return &jsonValueBoolean, err

	case JsonValueNumberType:
		var jsonValueNumber JsonValueNumber
		err := json.Unmarshal(*rawMsg, &jsonValueNumber)
		return &jsonValueNumber, err

	case JsonValueStringType:
		var jsonValueString JsonValueString
		err := json.Unmarshal(*rawMsg, &jsonValueString)
		return &jsonValueString, err

	case JsonValueArrayType:
		var jsonValueArray JsonValueArray
		err := json.Unmarshal(*rawMsg, &jsonValueArray)
		return &jsonValueArray, err

	case JsonValueObjectType:
		var jsonValueObject JsonValueObject
		err := json.Unmarshal(*rawMsg, &jsonValueObject)
		return &jsonValueObject, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// UserPrivacySettingRule Represents a single rule for managing privacy settings
type UserPrivacySettingRule interface {
	GetUserPrivacySettingRuleEnum() UserPrivacySettingRuleEnum
}

// UserPrivacySettingRuleEnum Alias for abstract UserPrivacySettingRule 'Sub-Classes', used as constant-enum here
type UserPrivacySettingRuleEnum string

// UserPrivacySettingRule enums
const (
	UserPrivacySettingRuleAllowAllType            UserPrivacySettingRuleEnum = "userPrivacySettingRuleAllowAll"
	UserPrivacySettingRuleAllowContactsType       UserPrivacySettingRuleEnum = "userPrivacySettingRuleAllowContacts"
	UserPrivacySettingRuleAllowUsersType          UserPrivacySettingRuleEnum = "userPrivacySettingRuleAllowUsers"
	UserPrivacySettingRuleAllowChatMembersType    UserPrivacySettingRuleEnum = "userPrivacySettingRuleAllowChatMembers"
	UserPrivacySettingRuleRestrictAllType         UserPrivacySettingRuleEnum = "userPrivacySettingRuleRestrictAll"
	UserPrivacySettingRuleRestrictContactsType    UserPrivacySettingRuleEnum = "userPrivacySettingRuleRestrictContacts"
	UserPrivacySettingRuleRestrictUsersType       UserPrivacySettingRuleEnum = "userPrivacySettingRuleRestrictUsers"
	UserPrivacySettingRuleRestrictChatMembersType UserPrivacySettingRuleEnum = "userPrivacySettingRuleRestrictChatMembers"
)

func unmarshalUserPrivacySettingRule(rawMsg *json.RawMessage) (UserPrivacySettingRule, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch UserPrivacySettingRuleEnum(objMap["@type"].(string)) {
	case UserPrivacySettingRuleAllowAllType:
		var userPrivacySettingRuleAllowAll UserPrivacySettingRuleAllowAll
		err := json.Unmarshal(*rawMsg, &userPrivacySettingRuleAllowAll)
		return &userPrivacySettingRuleAllowAll, err

	case UserPrivacySettingRuleAllowContactsType:
		var userPrivacySettingRuleAllowContacts UserPrivacySettingRuleAllowContacts
		err := json.Unmarshal(*rawMsg, &userPrivacySettingRuleAllowContacts)
		return &userPrivacySettingRuleAllowContacts, err

	case UserPrivacySettingRuleAllowUsersType:
		var userPrivacySettingRuleAllowUsers UserPrivacySettingRuleAllowUsers
		err := json.Unmarshal(*rawMsg, &userPrivacySettingRuleAllowUsers)
		return &userPrivacySettingRuleAllowUsers, err

	case UserPrivacySettingRuleAllowChatMembersType:
		var userPrivacySettingRuleAllowChatMembers UserPrivacySettingRuleAllowChatMembers
		err := json.Unmarshal(*rawMsg, &userPrivacySettingRuleAllowChatMembers)
		return &userPrivacySettingRuleAllowChatMembers, err

	case UserPrivacySettingRuleRestrictAllType:
		var userPrivacySettingRuleRestrictAll UserPrivacySettingRuleRestrictAll
		err := json.Unmarshal(*rawMsg, &userPrivacySettingRuleRestrictAll)
		return &userPrivacySettingRuleRestrictAll, err

	case UserPrivacySettingRuleRestrictContactsType:
		var userPrivacySettingRuleRestrictContacts UserPrivacySettingRuleRestrictContacts
		err := json.Unmarshal(*rawMsg, &userPrivacySettingRuleRestrictContacts)
		return &userPrivacySettingRuleRestrictContacts, err

	case UserPrivacySettingRuleRestrictUsersType:
		var userPrivacySettingRuleRestrictUsers UserPrivacySettingRuleRestrictUsers
		err := json.Unmarshal(*rawMsg, &userPrivacySettingRuleRestrictUsers)
		return &userPrivacySettingRuleRestrictUsers, err

	case UserPrivacySettingRuleRestrictChatMembersType:
		var userPrivacySettingRuleRestrictChatMembers UserPrivacySettingRuleRestrictChatMembers
		err := json.Unmarshal(*rawMsg, &userPrivacySettingRuleRestrictChatMembers)
		return &userPrivacySettingRuleRestrictChatMembers, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// UserPrivacySetting Describes available user privacy settings
type UserPrivacySetting interface {
	GetUserPrivacySettingEnum() UserPrivacySettingEnum
}

// UserPrivacySettingEnum Alias for abstract UserPrivacySetting 'Sub-Classes', used as constant-enum here
type UserPrivacySettingEnum string

// UserPrivacySetting enums
const (
	UserPrivacySettingShowStatusType                  UserPrivacySettingEnum = "userPrivacySettingShowStatus"
	UserPrivacySettingShowProfilePhotoType            UserPrivacySettingEnum = "userPrivacySettingShowProfilePhoto"
	UserPrivacySettingShowLinkInForwardedMessagesType UserPrivacySettingEnum = "userPrivacySettingShowLinkInForwardedMessages"
	UserPrivacySettingShowPhoneNumberType             UserPrivacySettingEnum = "userPrivacySettingShowPhoneNumber"
	UserPrivacySettingAllowChatInvitesType            UserPrivacySettingEnum = "userPrivacySettingAllowChatInvites"
	UserPrivacySettingAllowCallsType                  UserPrivacySettingEnum = "userPrivacySettingAllowCalls"
	UserPrivacySettingAllowPeerToPeerCallsType        UserPrivacySettingEnum = "userPrivacySettingAllowPeerToPeerCalls"
	UserPrivacySettingAllowFindingByPhoneNumberType   UserPrivacySettingEnum = "userPrivacySettingAllowFindingByPhoneNumber"
)

func unmarshalUserPrivacySetting(rawMsg *json.RawMessage) (UserPrivacySetting, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch UserPrivacySettingEnum(objMap["@type"].(string)) {
	case UserPrivacySettingShowStatusType:
		var userPrivacySettingShowStatus UserPrivacySettingShowStatus
		err := json.Unmarshal(*rawMsg, &userPrivacySettingShowStatus)
		return &userPrivacySettingShowStatus, err

	case UserPrivacySettingShowProfilePhotoType:
		var userPrivacySettingShowProfilePhoto UserPrivacySettingShowProfilePhoto
		err := json.Unmarshal(*rawMsg, &userPrivacySettingShowProfilePhoto)
		return &userPrivacySettingShowProfilePhoto, err

	case UserPrivacySettingShowLinkInForwardedMessagesType:
		var userPrivacySettingShowLinkInForwardedMessages UserPrivacySettingShowLinkInForwardedMessages
		err := json.Unmarshal(*rawMsg, &userPrivacySettingShowLinkInForwardedMessages)
		return &userPrivacySettingShowLinkInForwardedMessages, err

	case UserPrivacySettingShowPhoneNumberType:
		var userPrivacySettingShowPhoneNumber UserPrivacySettingShowPhoneNumber
		err := json.Unmarshal(*rawMsg, &userPrivacySettingShowPhoneNumber)
		return &userPrivacySettingShowPhoneNumber, err

	case UserPrivacySettingAllowChatInvitesType:
		var userPrivacySettingAllowChatInvites UserPrivacySettingAllowChatInvites
		err := json.Unmarshal(*rawMsg, &userPrivacySettingAllowChatInvites)
		return &userPrivacySettingAllowChatInvites, err

	case UserPrivacySettingAllowCallsType:
		var userPrivacySettingAllowCalls UserPrivacySettingAllowCalls
		err := json.Unmarshal(*rawMsg, &userPrivacySettingAllowCalls)
		return &userPrivacySettingAllowCalls, err

	case UserPrivacySettingAllowPeerToPeerCallsType:
		var userPrivacySettingAllowPeerToPeerCalls UserPrivacySettingAllowPeerToPeerCalls
		err := json.Unmarshal(*rawMsg, &userPrivacySettingAllowPeerToPeerCalls)
		return &userPrivacySettingAllowPeerToPeerCalls, err

	case UserPrivacySettingAllowFindingByPhoneNumberType:
		var userPrivacySettingAllowFindingByPhoneNumber UserPrivacySettingAllowFindingByPhoneNumber
		err := json.Unmarshal(*rawMsg, &userPrivacySettingAllowFindingByPhoneNumber)
		return &userPrivacySettingAllowFindingByPhoneNumber, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// ChatReportReason Describes the reason why a chat is reported
type ChatReportReason interface {
	GetChatReportReasonEnum() ChatReportReasonEnum
}

// ChatReportReasonEnum Alias for abstract ChatReportReason 'Sub-Classes', used as constant-enum here
type ChatReportReasonEnum string

// ChatReportReason enums
const (
	ChatReportReasonSpamType              ChatReportReasonEnum = "chatReportReasonSpam"
	ChatReportReasonViolenceType          ChatReportReasonEnum = "chatReportReasonViolence"
	ChatReportReasonPornographyType       ChatReportReasonEnum = "chatReportReasonPornography"
	ChatReportReasonChildAbuseType        ChatReportReasonEnum = "chatReportReasonChildAbuse"
	ChatReportReasonCopyrightType         ChatReportReasonEnum = "chatReportReasonCopyright"
	ChatReportReasonUnrelatedLocationType ChatReportReasonEnum = "chatReportReasonUnrelatedLocation"
	ChatReportReasonFakeType              ChatReportReasonEnum = "chatReportReasonFake"
	ChatReportReasonCustomType            ChatReportReasonEnum = "chatReportReasonCustom"
)

func unmarshalChatReportReason(rawMsg *json.RawMessage) (ChatReportReason, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch ChatReportReasonEnum(objMap["@type"].(string)) {
	case ChatReportReasonSpamType:
		var chatReportReasonSpam ChatReportReasonSpam
		err := json.Unmarshal(*rawMsg, &chatReportReasonSpam)
		return &chatReportReasonSpam, err

	case ChatReportReasonViolenceType:
		var chatReportReasonViolence ChatReportReasonViolence
		err := json.Unmarshal(*rawMsg, &chatReportReasonViolence)
		return &chatReportReasonViolence, err

	case ChatReportReasonPornographyType:
		var chatReportReasonPornography ChatReportReasonPornography
		err := json.Unmarshal(*rawMsg, &chatReportReasonPornography)
		return &chatReportReasonPornography, err

	case ChatReportReasonChildAbuseType:
		var chatReportReasonChildAbuse ChatReportReasonChildAbuse
		err := json.Unmarshal(*rawMsg, &chatReportReasonChildAbuse)
		return &chatReportReasonChildAbuse, err

	case ChatReportReasonCopyrightType:
		var chatReportReasonCopyright ChatReportReasonCopyright
		err := json.Unmarshal(*rawMsg, &chatReportReasonCopyright)
		return &chatReportReasonCopyright, err

	case ChatReportReasonUnrelatedLocationType:
		var chatReportReasonUnrelatedLocation ChatReportReasonUnrelatedLocation
		err := json.Unmarshal(*rawMsg, &chatReportReasonUnrelatedLocation)
		return &chatReportReasonUnrelatedLocation, err

	case ChatReportReasonFakeType:
		var chatReportReasonFake ChatReportReasonFake
		err := json.Unmarshal(*rawMsg, &chatReportReasonFake)
		return &chatReportReasonFake, err

	case ChatReportReasonCustomType:
		var chatReportReasonCustom ChatReportReasonCustom
		err := json.Unmarshal(*rawMsg, &chatReportReasonCustom)
		return &chatReportReasonCustom, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// InternalLinkType Describes an internal https://t.me or tg: link, which must be processed by the app in a special way
type InternalLinkType interface {
	GetInternalLinkTypeEnum() InternalLinkTypeEnum
}

// InternalLinkTypeEnum Alias for abstract InternalLinkType 'Sub-Classes', used as constant-enum here
type InternalLinkTypeEnum string

// InternalLinkType enums
const (
	InternalLinkTypeActiveSessionsType          InternalLinkTypeEnum = "internalLinkTypeActiveSessions"
	InternalLinkTypeAuthenticationCodeType      InternalLinkTypeEnum = "internalLinkTypeAuthenticationCode"
	InternalLinkTypeBackgroundType              InternalLinkTypeEnum = "internalLinkTypeBackground"
	InternalLinkTypeBotStartType                InternalLinkTypeEnum = "internalLinkTypeBotStart"
	InternalLinkTypeBotStartInGroupType         InternalLinkTypeEnum = "internalLinkTypeBotStartInGroup"
	InternalLinkTypeChangePhoneNumberType       InternalLinkTypeEnum = "internalLinkTypeChangePhoneNumber"
	InternalLinkTypeChatInviteType              InternalLinkTypeEnum = "internalLinkTypeChatInvite"
	InternalLinkTypeFilterSettingsType          InternalLinkTypeEnum = "internalLinkTypeFilterSettings"
	InternalLinkTypeGameType                    InternalLinkTypeEnum = "internalLinkTypeGame"
	InternalLinkTypeLanguagePackType            InternalLinkTypeEnum = "internalLinkTypeLanguagePack"
	InternalLinkTypeMessageType                 InternalLinkTypeEnum = "internalLinkTypeMessage"
	InternalLinkTypeMessageDraftType            InternalLinkTypeEnum = "internalLinkTypeMessageDraft"
	InternalLinkTypePassportDataRequestType     InternalLinkTypeEnum = "internalLinkTypePassportDataRequest"
	InternalLinkTypePhoneNumberConfirmationType InternalLinkTypeEnum = "internalLinkTypePhoneNumberConfirmation"
	InternalLinkTypeProxyType                   InternalLinkTypeEnum = "internalLinkTypeProxy"
	InternalLinkTypePublicChatType              InternalLinkTypeEnum = "internalLinkTypePublicChat"
	InternalLinkTypeQrCodeAuthenticationType    InternalLinkTypeEnum = "internalLinkTypeQrCodeAuthentication"
	InternalLinkTypeSettingsType                InternalLinkTypeEnum = "internalLinkTypeSettings"
	InternalLinkTypeStickerSetType              InternalLinkTypeEnum = "internalLinkTypeStickerSet"
	InternalLinkTypeThemeType                   InternalLinkTypeEnum = "internalLinkTypeTheme"
	InternalLinkTypeThemeSettingsType           InternalLinkTypeEnum = "internalLinkTypeThemeSettings"
	InternalLinkTypeUnknownDeepLinkType         InternalLinkTypeEnum = "internalLinkTypeUnknownDeepLink"
	InternalLinkTypeUnsupportedProxyType        InternalLinkTypeEnum = "internalLinkTypeUnsupportedProxy"
	InternalLinkTypeVideoChatType               InternalLinkTypeEnum = "internalLinkTypeVideoChat"
)

func unmarshalInternalLinkType(rawMsg *json.RawMessage) (InternalLinkType, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch InternalLinkTypeEnum(objMap["@type"].(string)) {
	case InternalLinkTypeActiveSessionsType:
		var internalLinkTypeActiveSessions InternalLinkTypeActiveSessions
		err := json.Unmarshal(*rawMsg, &internalLinkTypeActiveSessions)
		return &internalLinkTypeActiveSessions, err

	case InternalLinkTypeAuthenticationCodeType:
		var internalLinkTypeAuthenticationCode InternalLinkTypeAuthenticationCode
		err := json.Unmarshal(*rawMsg, &internalLinkTypeAuthenticationCode)
		return &internalLinkTypeAuthenticationCode, err

	case InternalLinkTypeBackgroundType:
		var internalLinkTypeBackground InternalLinkTypeBackground
		err := json.Unmarshal(*rawMsg, &internalLinkTypeBackground)
		return &internalLinkTypeBackground, err

	case InternalLinkTypeBotStartType:
		var internalLinkTypeBotStart InternalLinkTypeBotStart
		err := json.Unmarshal(*rawMsg, &internalLinkTypeBotStart)
		return &internalLinkTypeBotStart, err

	case InternalLinkTypeBotStartInGroupType:
		var internalLinkTypeBotStartInGroup InternalLinkTypeBotStartInGroup
		err := json.Unmarshal(*rawMsg, &internalLinkTypeBotStartInGroup)
		return &internalLinkTypeBotStartInGroup, err

	case InternalLinkTypeChangePhoneNumberType:
		var internalLinkTypeChangePhoneNumber InternalLinkTypeChangePhoneNumber
		err := json.Unmarshal(*rawMsg, &internalLinkTypeChangePhoneNumber)
		return &internalLinkTypeChangePhoneNumber, err

	case InternalLinkTypeChatInviteType:
		var internalLinkTypeChatInvite InternalLinkTypeChatInvite
		err := json.Unmarshal(*rawMsg, &internalLinkTypeChatInvite)
		return &internalLinkTypeChatInvite, err

	case InternalLinkTypeFilterSettingsType:
		var internalLinkTypeFilterSettings InternalLinkTypeFilterSettings
		err := json.Unmarshal(*rawMsg, &internalLinkTypeFilterSettings)
		return &internalLinkTypeFilterSettings, err

	case InternalLinkTypeGameType:
		var internalLinkTypeGame InternalLinkTypeGame
		err := json.Unmarshal(*rawMsg, &internalLinkTypeGame)
		return &internalLinkTypeGame, err

	case InternalLinkTypeLanguagePackType:
		var internalLinkTypeLanguagePack InternalLinkTypeLanguagePack
		err := json.Unmarshal(*rawMsg, &internalLinkTypeLanguagePack)
		return &internalLinkTypeLanguagePack, err

	case InternalLinkTypeMessageType:
		var internalLinkTypeMessage InternalLinkTypeMessage
		err := json.Unmarshal(*rawMsg, &internalLinkTypeMessage)
		return &internalLinkTypeMessage, err

	case InternalLinkTypeMessageDraftType:
		var internalLinkTypeMessageDraft InternalLinkTypeMessageDraft
		err := json.Unmarshal(*rawMsg, &internalLinkTypeMessageDraft)
		return &internalLinkTypeMessageDraft, err

	case InternalLinkTypePassportDataRequestType:
		var internalLinkTypePassportDataRequest InternalLinkTypePassportDataRequest
		err := json.Unmarshal(*rawMsg, &internalLinkTypePassportDataRequest)
		return &internalLinkTypePassportDataRequest, err

	case InternalLinkTypePhoneNumberConfirmationType:
		var internalLinkTypePhoneNumberConfirmation InternalLinkTypePhoneNumberConfirmation
		err := json.Unmarshal(*rawMsg, &internalLinkTypePhoneNumberConfirmation)
		return &internalLinkTypePhoneNumberConfirmation, err

	case InternalLinkTypeProxyType:
		var internalLinkTypeProxy InternalLinkTypeProxy
		err := json.Unmarshal(*rawMsg, &internalLinkTypeProxy)
		return &internalLinkTypeProxy, err

	case InternalLinkTypePublicChatType:
		var internalLinkTypePublicChat InternalLinkTypePublicChat
		err := json.Unmarshal(*rawMsg, &internalLinkTypePublicChat)
		return &internalLinkTypePublicChat, err

	case InternalLinkTypeQrCodeAuthenticationType:
		var internalLinkTypeQrCodeAuthentication InternalLinkTypeQrCodeAuthentication
		err := json.Unmarshal(*rawMsg, &internalLinkTypeQrCodeAuthentication)
		return &internalLinkTypeQrCodeAuthentication, err

	case InternalLinkTypeSettingsType:
		var internalLinkTypeSettings InternalLinkTypeSettings
		err := json.Unmarshal(*rawMsg, &internalLinkTypeSettings)
		return &internalLinkTypeSettings, err

	case InternalLinkTypeStickerSetType:
		var internalLinkTypeStickerSet InternalLinkTypeStickerSet
		err := json.Unmarshal(*rawMsg, &internalLinkTypeStickerSet)
		return &internalLinkTypeStickerSet, err

	case InternalLinkTypeThemeType:
		var internalLinkTypeTheme InternalLinkTypeTheme
		err := json.Unmarshal(*rawMsg, &internalLinkTypeTheme)
		return &internalLinkTypeTheme, err

	case InternalLinkTypeThemeSettingsType:
		var internalLinkTypeThemeSettings InternalLinkTypeThemeSettings
		err := json.Unmarshal(*rawMsg, &internalLinkTypeThemeSettings)
		return &internalLinkTypeThemeSettings, err

	case InternalLinkTypeUnknownDeepLinkType:
		var internalLinkTypeUnknownDeepLink InternalLinkTypeUnknownDeepLink
		err := json.Unmarshal(*rawMsg, &internalLinkTypeUnknownDeepLink)
		return &internalLinkTypeUnknownDeepLink, err

	case InternalLinkTypeUnsupportedProxyType:
		var internalLinkTypeUnsupportedProxy InternalLinkTypeUnsupportedProxy
		err := json.Unmarshal(*rawMsg, &internalLinkTypeUnsupportedProxy)
		return &internalLinkTypeUnsupportedProxy, err

	case InternalLinkTypeVideoChatType:
		var internalLinkTypeVideoChat InternalLinkTypeVideoChat
		err := json.Unmarshal(*rawMsg, &internalLinkTypeVideoChat)
		return &internalLinkTypeVideoChat, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// FileType Represents the type of a file
type FileType interface {
	GetFileTypeEnum() FileTypeEnum
}

// FileTypeEnum Alias for abstract FileType 'Sub-Classes', used as constant-enum here
type FileTypeEnum string

// FileType enums
const (
	FileTypeNoneType            FileTypeEnum = "fileTypeNone"
	FileTypeAnimationType       FileTypeEnum = "fileTypeAnimation"
	FileTypeAudioType           FileTypeEnum = "fileTypeAudio"
	FileTypeDocumentType        FileTypeEnum = "fileTypeDocument"
	FileTypePhotoType           FileTypeEnum = "fileTypePhoto"
	FileTypeProfilePhotoType    FileTypeEnum = "fileTypeProfilePhoto"
	FileTypeSecretType          FileTypeEnum = "fileTypeSecret"
	FileTypeSecretThumbnailType FileTypeEnum = "fileTypeSecretThumbnail"
	FileTypeSecureType          FileTypeEnum = "fileTypeSecure"
	FileTypeStickerType         FileTypeEnum = "fileTypeSticker"
	FileTypeThumbnailType       FileTypeEnum = "fileTypeThumbnail"
	FileTypeUnknownType         FileTypeEnum = "fileTypeUnknown"
	FileTypeVideoType           FileTypeEnum = "fileTypeVideo"
	FileTypeVideoNoteType       FileTypeEnum = "fileTypeVideoNote"
	FileTypeVoiceNoteType       FileTypeEnum = "fileTypeVoiceNote"
	FileTypeWallpaperType       FileTypeEnum = "fileTypeWallpaper"
)

func unmarshalFileType(rawMsg *json.RawMessage) (FileType, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch FileTypeEnum(objMap["@type"].(string)) {
	case FileTypeNoneType:
		var fileTypeNone FileTypeNone
		err := json.Unmarshal(*rawMsg, &fileTypeNone)
		return &fileTypeNone, err

	case FileTypeAnimationType:
		var fileTypeAnimation FileTypeAnimation
		err := json.Unmarshal(*rawMsg, &fileTypeAnimation)
		return &fileTypeAnimation, err

	case FileTypeAudioType:
		var fileTypeAudio FileTypeAudio
		err := json.Unmarshal(*rawMsg, &fileTypeAudio)
		return &fileTypeAudio, err

	case FileTypeDocumentType:
		var fileTypeDocument FileTypeDocument
		err := json.Unmarshal(*rawMsg, &fileTypeDocument)
		return &fileTypeDocument, err

	case FileTypePhotoType:
		var fileTypePhoto FileTypePhoto
		err := json.Unmarshal(*rawMsg, &fileTypePhoto)
		return &fileTypePhoto, err

	case FileTypeProfilePhotoType:
		var fileTypeProfilePhoto FileTypeProfilePhoto
		err := json.Unmarshal(*rawMsg, &fileTypeProfilePhoto)
		return &fileTypeProfilePhoto, err

	case FileTypeSecretType:
		var fileTypeSecret FileTypeSecret
		err := json.Unmarshal(*rawMsg, &fileTypeSecret)
		return &fileTypeSecret, err

	case FileTypeSecretThumbnailType:
		var fileTypeSecretThumbnail FileTypeSecretThumbnail
		err := json.Unmarshal(*rawMsg, &fileTypeSecretThumbnail)
		return &fileTypeSecretThumbnail, err

	case FileTypeSecureType:
		var fileTypeSecure FileTypeSecure
		err := json.Unmarshal(*rawMsg, &fileTypeSecure)
		return &fileTypeSecure, err

	case FileTypeStickerType:
		var fileTypeSticker FileTypeSticker
		err := json.Unmarshal(*rawMsg, &fileTypeSticker)
		return &fileTypeSticker, err

	case FileTypeThumbnailType:
		var fileTypeThumbnail FileTypeThumbnail
		err := json.Unmarshal(*rawMsg, &fileTypeThumbnail)
		return &fileTypeThumbnail, err

	case FileTypeUnknownType:
		var fileTypeUnknown FileTypeUnknown
		err := json.Unmarshal(*rawMsg, &fileTypeUnknown)
		return &fileTypeUnknown, err

	case FileTypeVideoType:
		var fileTypeVideo FileTypeVideo
		err := json.Unmarshal(*rawMsg, &fileTypeVideo)
		return &fileTypeVideo, err

	case FileTypeVideoNoteType:
		var fileTypeVideoNote FileTypeVideoNote
		err := json.Unmarshal(*rawMsg, &fileTypeVideoNote)
		return &fileTypeVideoNote, err

	case FileTypeVoiceNoteType:
		var fileTypeVoiceNote FileTypeVoiceNote
		err := json.Unmarshal(*rawMsg, &fileTypeVoiceNote)
		return &fileTypeVoiceNote, err

	case FileTypeWallpaperType:
		var fileTypeWallpaper FileTypeWallpaper
		err := json.Unmarshal(*rawMsg, &fileTypeWallpaper)
		return &fileTypeWallpaper, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// NetworkType Represents the type of a network
type NetworkType interface {
	GetNetworkTypeEnum() NetworkTypeEnum
}

// NetworkTypeEnum Alias for abstract NetworkType 'Sub-Classes', used as constant-enum here
type NetworkTypeEnum string

// NetworkType enums
const (
	NetworkTypeNoneType          NetworkTypeEnum = "networkTypeNone"
	NetworkTypeMobileType        NetworkTypeEnum = "networkTypeMobile"
	NetworkTypeMobileRoamingType NetworkTypeEnum = "networkTypeMobileRoaming"
	NetworkTypeWiFiType          NetworkTypeEnum = "networkTypeWiFi"
	NetworkTypeOtherType         NetworkTypeEnum = "networkTypeOther"
)

func unmarshalNetworkType(rawMsg *json.RawMessage) (NetworkType, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch NetworkTypeEnum(objMap["@type"].(string)) {
	case NetworkTypeNoneType:
		var networkTypeNone NetworkTypeNone
		err := json.Unmarshal(*rawMsg, &networkTypeNone)
		return &networkTypeNone, err

	case NetworkTypeMobileType:
		var networkTypeMobile NetworkTypeMobile
		err := json.Unmarshal(*rawMsg, &networkTypeMobile)
		return &networkTypeMobile, err

	case NetworkTypeMobileRoamingType:
		var networkTypeMobileRoaming NetworkTypeMobileRoaming
		err := json.Unmarshal(*rawMsg, &networkTypeMobileRoaming)
		return &networkTypeMobileRoaming, err

	case NetworkTypeWiFiType:
		var networkTypeWiFi NetworkTypeWiFi
		err := json.Unmarshal(*rawMsg, &networkTypeWiFi)
		return &networkTypeWiFi, err

	case NetworkTypeOtherType:
		var networkTypeOther NetworkTypeOther
		err := json.Unmarshal(*rawMsg, &networkTypeOther)
		return &networkTypeOther, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// NetworkStatisticsEntry Contains statistics about network usage
type NetworkStatisticsEntry interface {
	GetNetworkStatisticsEntryEnum() NetworkStatisticsEntryEnum
}

// NetworkStatisticsEntryEnum Alias for abstract NetworkStatisticsEntry 'Sub-Classes', used as constant-enum here
type NetworkStatisticsEntryEnum string

// NetworkStatisticsEntry enums
const (
	NetworkStatisticsEntryFileType NetworkStatisticsEntryEnum = "networkStatisticsEntryFile"
	NetworkStatisticsEntryCallType NetworkStatisticsEntryEnum = "networkStatisticsEntryCall"
)

func unmarshalNetworkStatisticsEntry(rawMsg *json.RawMessage) (NetworkStatisticsEntry, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch NetworkStatisticsEntryEnum(objMap["@type"].(string)) {
	case NetworkStatisticsEntryFileType:
		var networkStatisticsEntryFile NetworkStatisticsEntryFile
		err := json.Unmarshal(*rawMsg, &networkStatisticsEntryFile)
		return &networkStatisticsEntryFile, err

	case NetworkStatisticsEntryCallType:
		var networkStatisticsEntryCall NetworkStatisticsEntryCall
		err := json.Unmarshal(*rawMsg, &networkStatisticsEntryCall)
		return &networkStatisticsEntryCall, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// ConnectionState Describes the current state of the connection to Telegram servers
type ConnectionState interface {
	GetConnectionStateEnum() ConnectionStateEnum
}

// ConnectionStateEnum Alias for abstract ConnectionState 'Sub-Classes', used as constant-enum here
type ConnectionStateEnum string

// ConnectionState enums
const (
	ConnectionStateWaitingForNetworkType ConnectionStateEnum = "connectionStateWaitingForNetwork"
	ConnectionStateConnectingToProxyType ConnectionStateEnum = "connectionStateConnectingToProxy"
	ConnectionStateConnectingType        ConnectionStateEnum = "connectionStateConnecting"
	ConnectionStateUpdatingType          ConnectionStateEnum = "connectionStateUpdating"
	ConnectionStateReadyType             ConnectionStateEnum = "connectionStateReady"
)

func unmarshalConnectionState(rawMsg *json.RawMessage) (ConnectionState, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch ConnectionStateEnum(objMap["@type"].(string)) {
	case ConnectionStateWaitingForNetworkType:
		var connectionStateWaitingForNetwork ConnectionStateWaitingForNetwork
		err := json.Unmarshal(*rawMsg, &connectionStateWaitingForNetwork)
		return &connectionStateWaitingForNetwork, err

	case ConnectionStateConnectingToProxyType:
		var connectionStateConnectingToProxy ConnectionStateConnectingToProxy
		err := json.Unmarshal(*rawMsg, &connectionStateConnectingToProxy)
		return &connectionStateConnectingToProxy, err

	case ConnectionStateConnectingType:
		var connectionStateConnecting ConnectionStateConnecting
		err := json.Unmarshal(*rawMsg, &connectionStateConnecting)
		return &connectionStateConnecting, err

	case ConnectionStateUpdatingType:
		var connectionStateUpdating ConnectionStateUpdating
		err := json.Unmarshal(*rawMsg, &connectionStateUpdating)
		return &connectionStateUpdating, err

	case ConnectionStateReadyType:
		var connectionStateReady ConnectionStateReady
		err := json.Unmarshal(*rawMsg, &connectionStateReady)
		return &connectionStateReady, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// TopChatCategory Represents the categories of chats for which a list of frequently used chats can be retrieved
type TopChatCategory interface {
	GetTopChatCategoryEnum() TopChatCategoryEnum
}

// TopChatCategoryEnum Alias for abstract TopChatCategory 'Sub-Classes', used as constant-enum here
type TopChatCategoryEnum string

// TopChatCategory enums
const (
	TopChatCategoryUsersType        TopChatCategoryEnum = "topChatCategoryUsers"
	TopChatCategoryBotsType         TopChatCategoryEnum = "topChatCategoryBots"
	TopChatCategoryGroupsType       TopChatCategoryEnum = "topChatCategoryGroups"
	TopChatCategoryChannelsType     TopChatCategoryEnum = "topChatCategoryChannels"
	TopChatCategoryInlineBotsType   TopChatCategoryEnum = "topChatCategoryInlineBots"
	TopChatCategoryCallsType        TopChatCategoryEnum = "topChatCategoryCalls"
	TopChatCategoryForwardChatsType TopChatCategoryEnum = "topChatCategoryForwardChats"
)

func unmarshalTopChatCategory(rawMsg *json.RawMessage) (TopChatCategory, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch TopChatCategoryEnum(objMap["@type"].(string)) {
	case TopChatCategoryUsersType:
		var topChatCategoryUsers TopChatCategoryUsers
		err := json.Unmarshal(*rawMsg, &topChatCategoryUsers)
		return &topChatCategoryUsers, err

	case TopChatCategoryBotsType:
		var topChatCategoryBots TopChatCategoryBots
		err := json.Unmarshal(*rawMsg, &topChatCategoryBots)
		return &topChatCategoryBots, err

	case TopChatCategoryGroupsType:
		var topChatCategoryGroups TopChatCategoryGroups
		err := json.Unmarshal(*rawMsg, &topChatCategoryGroups)
		return &topChatCategoryGroups, err

	case TopChatCategoryChannelsType:
		var topChatCategoryChannels TopChatCategoryChannels
		err := json.Unmarshal(*rawMsg, &topChatCategoryChannels)
		return &topChatCategoryChannels, err

	case TopChatCategoryInlineBotsType:
		var topChatCategoryInlineBots TopChatCategoryInlineBots
		err := json.Unmarshal(*rawMsg, &topChatCategoryInlineBots)
		return &topChatCategoryInlineBots, err

	case TopChatCategoryCallsType:
		var topChatCategoryCalls TopChatCategoryCalls
		err := json.Unmarshal(*rawMsg, &topChatCategoryCalls)
		return &topChatCategoryCalls, err

	case TopChatCategoryForwardChatsType:
		var topChatCategoryForwardChats TopChatCategoryForwardChats
		err := json.Unmarshal(*rawMsg, &topChatCategoryForwardChats)
		return &topChatCategoryForwardChats, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// TMeURLType Describes the type of a URL linking to an internal Telegram entity
type TMeURLType interface {
	GetTMeURLTypeEnum() TMeURLTypeEnum
}

// TMeURLTypeEnum Alias for abstract TMeURLType 'Sub-Classes', used as constant-enum here
type TMeURLTypeEnum string

// TMeURLType enums
const ()

func unmarshalTMeURLType(rawMsg *json.RawMessage) (TMeURLType, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch TMeURLTypeEnum(objMap["@type"].(string)) {

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// SuggestedAction Describes an action suggested to the current user
type SuggestedAction interface {
	GetSuggestedActionEnum() SuggestedActionEnum
}

// SuggestedActionEnum Alias for abstract SuggestedAction 'Sub-Classes', used as constant-enum here
type SuggestedActionEnum string

// SuggestedAction enums
const (
	SuggestedActionEnableArchiveAndMuteNewChatsType SuggestedActionEnum = "suggestedActionEnableArchiveAndMuteNewChats"
	SuggestedActionCheckPasswordType                SuggestedActionEnum = "suggestedActionCheckPassword"
	SuggestedActionCheckPhoneNumberType             SuggestedActionEnum = "suggestedActionCheckPhoneNumber"
	SuggestedActionViewChecksHintType               SuggestedActionEnum = "suggestedActionViewChecksHint"
	SuggestedActionConvertToBroadcastGroupType      SuggestedActionEnum = "suggestedActionConvertToBroadcastGroup"
	SuggestedActionSetPasswordType                  SuggestedActionEnum = "suggestedActionSetPassword"
)

func unmarshalSuggestedAction(rawMsg *json.RawMessage) (SuggestedAction, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch SuggestedActionEnum(objMap["@type"].(string)) {
	case SuggestedActionEnableArchiveAndMuteNewChatsType:
		var suggestedActionEnableArchiveAndMuteNewChats SuggestedActionEnableArchiveAndMuteNewChats
		err := json.Unmarshal(*rawMsg, &suggestedActionEnableArchiveAndMuteNewChats)
		return &suggestedActionEnableArchiveAndMuteNewChats, err

	case SuggestedActionCheckPasswordType:
		var suggestedActionCheckPassword SuggestedActionCheckPassword
		err := json.Unmarshal(*rawMsg, &suggestedActionCheckPassword)
		return &suggestedActionCheckPassword, err

	case SuggestedActionCheckPhoneNumberType:
		var suggestedActionCheckPhoneNumber SuggestedActionCheckPhoneNumber
		err := json.Unmarshal(*rawMsg, &suggestedActionCheckPhoneNumber)
		return &suggestedActionCheckPhoneNumber, err

	case SuggestedActionViewChecksHintType:
		var suggestedActionViewChecksHint SuggestedActionViewChecksHint
		err := json.Unmarshal(*rawMsg, &suggestedActionViewChecksHint)
		return &suggestedActionViewChecksHint, err

	case SuggestedActionConvertToBroadcastGroupType:
		var suggestedActionConvertToBroadcastGroup SuggestedActionConvertToBroadcastGroup
		err := json.Unmarshal(*rawMsg, &suggestedActionConvertToBroadcastGroup)
		return &suggestedActionConvertToBroadcastGroup, err

	case SuggestedActionSetPasswordType:
		var suggestedActionSetPassword SuggestedActionSetPassword
		err := json.Unmarshal(*rawMsg, &suggestedActionSetPassword)
		return &suggestedActionSetPassword, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// TextParseMode Describes the way the text needs to be parsed for TextEntities
type TextParseMode interface {
	GetTextParseModeEnum() TextParseModeEnum
}

// TextParseModeEnum Alias for abstract TextParseMode 'Sub-Classes', used as constant-enum here
type TextParseModeEnum string

// TextParseMode enums
const (
	TextParseModeMarkdownType TextParseModeEnum = "textParseModeMarkdown"
	TextParseModeHTMLType     TextParseModeEnum = "textParseModeHTML"
)

func unmarshalTextParseMode(rawMsg *json.RawMessage) (TextParseMode, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch TextParseModeEnum(objMap["@type"].(string)) {
	case TextParseModeMarkdownType:
		var textParseModeMarkdown TextParseModeMarkdown
		err := json.Unmarshal(*rawMsg, &textParseModeMarkdown)
		return &textParseModeMarkdown, err

	case TextParseModeHTMLType:
		var textParseModeHTML TextParseModeHTML
		err := json.Unmarshal(*rawMsg, &textParseModeHTML)
		return &textParseModeHTML, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// ProxyType Describes the type of a proxy server
type ProxyType interface {
	GetProxyTypeEnum() ProxyTypeEnum
}

// ProxyTypeEnum Alias for abstract ProxyType 'Sub-Classes', used as constant-enum here
type ProxyTypeEnum string

// ProxyType enums
const (
	ProxyTypeSocks5Type  ProxyTypeEnum = "proxyTypeSocks5"
	ProxyTypeHttpType    ProxyTypeEnum = "proxyTypeHttp"
	ProxyTypeMtprotoType ProxyTypeEnum = "proxyTypeMtproto"
)

func unmarshalProxyType(rawMsg *json.RawMessage) (ProxyType, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch ProxyTypeEnum(objMap["@type"].(string)) {
	case ProxyTypeSocks5Type:
		var proxyTypeSocks5 ProxyTypeSocks5
		err := json.Unmarshal(*rawMsg, &proxyTypeSocks5)
		return &proxyTypeSocks5, err

	case ProxyTypeHttpType:
		var proxyTypeHttp ProxyTypeHttp
		err := json.Unmarshal(*rawMsg, &proxyTypeHttp)
		return &proxyTypeHttp, err

	case ProxyTypeMtprotoType:
		var proxyTypeMtproto ProxyTypeMtproto
		err := json.Unmarshal(*rawMsg, &proxyTypeMtproto)
		return &proxyTypeMtproto, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// InputSticker Describes a sticker that needs to be added to a sticker set
type InputSticker interface {
	GetInputStickerEnum() InputStickerEnum
}

// InputStickerEnum Alias for abstract InputSticker 'Sub-Classes', used as constant-enum here
type InputStickerEnum string

// InputSticker enums
const (
	InputStickerStaticType   InputStickerEnum = "inputStickerStatic"
	InputStickerAnimatedType InputStickerEnum = "inputStickerAnimated"
)

func unmarshalInputSticker(rawMsg *json.RawMessage) (InputSticker, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch InputStickerEnum(objMap["@type"].(string)) {
	case InputStickerStaticType:
		var inputStickerStatic InputStickerStatic
		err := json.Unmarshal(*rawMsg, &inputStickerStatic)
		return &inputStickerStatic, err

	case InputStickerAnimatedType:
		var inputStickerAnimated InputStickerAnimated
		err := json.Unmarshal(*rawMsg, &inputStickerAnimated)
		return &inputStickerAnimated, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// StatisticalGraph Describes a statistical graph
type StatisticalGraph interface {
	GetStatisticalGraphEnum() StatisticalGraphEnum
}

// StatisticalGraphEnum Alias for abstract StatisticalGraph 'Sub-Classes', used as constant-enum here
type StatisticalGraphEnum string

// StatisticalGraph enums
const (
	StatisticalGraphDataType  StatisticalGraphEnum = "statisticalGraphData"
	StatisticalGraphAsyncType StatisticalGraphEnum = "statisticalGraphAsync"
	StatisticalGraphErrorType StatisticalGraphEnum = "statisticalGraphError"
)

func unmarshalStatisticalGraph(rawMsg *json.RawMessage) (StatisticalGraph, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch StatisticalGraphEnum(objMap["@type"].(string)) {
	case StatisticalGraphDataType:
		var statisticalGraphData StatisticalGraphData
		err := json.Unmarshal(*rawMsg, &statisticalGraphData)
		return &statisticalGraphData, err

	case StatisticalGraphAsyncType:
		var statisticalGraphAsync StatisticalGraphAsync
		err := json.Unmarshal(*rawMsg, &statisticalGraphAsync)
		return &statisticalGraphAsync, err

	case StatisticalGraphErrorType:
		var statisticalGraphError StatisticalGraphError
		err := json.Unmarshal(*rawMsg, &statisticalGraphError)
		return &statisticalGraphError, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// ChatStatistics Contains a detailed statistics about a chat
type ChatStatistics interface {
	GetChatStatisticsEnum() ChatStatisticsEnum
}

// ChatStatisticsEnum Alias for abstract ChatStatistics 'Sub-Classes', used as constant-enum here
type ChatStatisticsEnum string

// ChatStatistics enums
const (
	ChatStatisticsSupergroupType ChatStatisticsEnum = "chatStatisticsSupergroup"
	ChatStatisticsChannelType    ChatStatisticsEnum = "chatStatisticsChannel"
)

func unmarshalChatStatistics(rawMsg *json.RawMessage) (ChatStatistics, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch ChatStatisticsEnum(objMap["@type"].(string)) {
	case ChatStatisticsSupergroupType:
		var chatStatisticsSupergroup ChatStatisticsSupergroup
		err := json.Unmarshal(*rawMsg, &chatStatisticsSupergroup)
		return &chatStatisticsSupergroup, err

	case ChatStatisticsChannelType:
		var chatStatisticsChannel ChatStatisticsChannel
		err := json.Unmarshal(*rawMsg, &chatStatisticsChannel)
		return &chatStatisticsChannel, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// VectorPathCommand Represents a vector path command
type VectorPathCommand interface {
	GetVectorPathCommandEnum() VectorPathCommandEnum
}

// VectorPathCommandEnum Alias for abstract VectorPathCommand 'Sub-Classes', used as constant-enum here
type VectorPathCommandEnum string

// VectorPathCommand enums
const (
	VectorPathCommandLineType             VectorPathCommandEnum = "vectorPathCommandLine"
	VectorPathCommandCubicBezierCurveType VectorPathCommandEnum = "vectorPathCommandCubicBezierCurve"
)

func unmarshalVectorPathCommand(rawMsg *json.RawMessage) (VectorPathCommand, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch VectorPathCommandEnum(objMap["@type"].(string)) {
	case VectorPathCommandLineType:
		var vectorPathCommandLine VectorPathCommandLine
		err := json.Unmarshal(*rawMsg, &vectorPathCommandLine)
		return &vectorPathCommandLine, err

	case VectorPathCommandCubicBezierCurveType:
		var vectorPathCommandCubicBezierCurve VectorPathCommandCubicBezierCurve
		err := json.Unmarshal(*rawMsg, &vectorPathCommandCubicBezierCurve)
		return &vectorPathCommandCubicBezierCurve, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// BotCommandScope Represents the scope to which bot commands are relevant
type BotCommandScope interface {
	GetBotCommandScopeEnum() BotCommandScopeEnum
}

// BotCommandScopeEnum Alias for abstract BotCommandScope 'Sub-Classes', used as constant-enum here
type BotCommandScopeEnum string

// BotCommandScope enums
const (
	BotCommandScopeDefaultType               BotCommandScopeEnum = "botCommandScopeDefault"
	BotCommandScopeAllPrivateChatsType       BotCommandScopeEnum = "botCommandScopeAllPrivateChats"
	BotCommandScopeAllGroupChatsType         BotCommandScopeEnum = "botCommandScopeAllGroupChats"
	BotCommandScopeAllChatAdministratorsType BotCommandScopeEnum = "botCommandScopeAllChatAdministrators"
	BotCommandScopeChatType                  BotCommandScopeEnum = "botCommandScopeChat"
	BotCommandScopeChatAdministratorsType    BotCommandScopeEnum = "botCommandScopeChatAdministrators"
	BotCommandScopeChatMemberType            BotCommandScopeEnum = "botCommandScopeChatMember"
)

func unmarshalBotCommandScope(rawMsg *json.RawMessage) (BotCommandScope, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch BotCommandScopeEnum(objMap["@type"].(string)) {
	case BotCommandScopeDefaultType:
		var botCommandScopeDefault BotCommandScopeDefault
		err := json.Unmarshal(*rawMsg, &botCommandScopeDefault)
		return &botCommandScopeDefault, err

	case BotCommandScopeAllPrivateChatsType:
		var botCommandScopeAllPrivateChats BotCommandScopeAllPrivateChats
		err := json.Unmarshal(*rawMsg, &botCommandScopeAllPrivateChats)
		return &botCommandScopeAllPrivateChats, err

	case BotCommandScopeAllGroupChatsType:
		var botCommandScopeAllGroupChats BotCommandScopeAllGroupChats
		err := json.Unmarshal(*rawMsg, &botCommandScopeAllGroupChats)
		return &botCommandScopeAllGroupChats, err

	case BotCommandScopeAllChatAdministratorsType:
		var botCommandScopeAllChatAdministrators BotCommandScopeAllChatAdministrators
		err := json.Unmarshal(*rawMsg, &botCommandScopeAllChatAdministrators)
		return &botCommandScopeAllChatAdministrators, err

	case BotCommandScopeChatType:
		var botCommandScopeChat BotCommandScopeChat
		err := json.Unmarshal(*rawMsg, &botCommandScopeChat)
		return &botCommandScopeChat, err

	case BotCommandScopeChatAdministratorsType:
		var botCommandScopeChatAdministrators BotCommandScopeChatAdministrators
		err := json.Unmarshal(*rawMsg, &botCommandScopeChatAdministrators)
		return &botCommandScopeChatAdministrators, err

	case BotCommandScopeChatMemberType:
		var botCommandScopeChatMember BotCommandScopeChatMember
		err := json.Unmarshal(*rawMsg, &botCommandScopeChatMember)
		return &botCommandScopeChatMember, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// Update Contains notifications about data changes
type Update interface {
	GetUpdateEnum() UpdateEnum
}

// UpdateEnum Alias for abstract Update 'Sub-Classes', used as constant-enum here
type UpdateEnum string

// Update enums
const (
	UpdateAuthorizationStateType             UpdateEnum = "updateAuthorizationState"
	UpdateNewMessageType                     UpdateEnum = "updateNewMessage"
	UpdateMessageSendAcknowledgedType        UpdateEnum = "updateMessageSendAcknowledged"
	UpdateMessageSendSucceededType           UpdateEnum = "updateMessageSendSucceeded"
	UpdateMessageSendFailedType              UpdateEnum = "updateMessageSendFailed"
	UpdateMessageContentType                 UpdateEnum = "updateMessageContent"
	UpdateMessageEditedType                  UpdateEnum = "updateMessageEdited"
	UpdateMessageIsPinnedType                UpdateEnum = "updateMessageIsPinned"
	UpdateMessageInteractionInfoType         UpdateEnum = "updateMessageInteractionInfo"
	UpdateMessageContentOpenedType           UpdateEnum = "updateMessageContentOpened"
	UpdateMessageMentionReadType             UpdateEnum = "updateMessageMentionRead"
	UpdateMessageLiveLocationViewedType      UpdateEnum = "updateMessageLiveLocationViewed"
	UpdateNewChatType                        UpdateEnum = "updateNewChat"
	UpdateChatTitleType                      UpdateEnum = "updateChatTitle"
	UpdateChatPhotoType                      UpdateEnum = "updateChatPhoto"
	UpdateChatPermissionsType                UpdateEnum = "updateChatPermissions"
	UpdateChatLastMessageType                UpdateEnum = "updateChatLastMessage"
	UpdateChatPositionType                   UpdateEnum = "updateChatPosition"
	UpdateChatReadInboxType                  UpdateEnum = "updateChatReadInbox"
	UpdateChatReadOutboxType                 UpdateEnum = "updateChatReadOutbox"
	UpdateChatActionBarType                  UpdateEnum = "updateChatActionBar"
	UpdateChatDraftMessageType               UpdateEnum = "updateChatDraftMessage"
	UpdateChatMessageSenderType              UpdateEnum = "updateChatMessageSender"
	UpdateChatMessageTTLType                 UpdateEnum = "updateChatMessageTtl"
	UpdateChatNotificationSettingsType       UpdateEnum = "updateChatNotificationSettings"
	UpdateChatPendingJoinRequestsType        UpdateEnum = "updateChatPendingJoinRequests"
	UpdateChatReplyMarkupType                UpdateEnum = "updateChatReplyMarkup"
	UpdateChatThemeType                      UpdateEnum = "updateChatTheme"
	UpdateChatUnreadMentionCountType         UpdateEnum = "updateChatUnreadMentionCount"
	UpdateChatVideoChatType                  UpdateEnum = "updateChatVideoChat"
	UpdateChatDefaultDisableNotificationType UpdateEnum = "updateChatDefaultDisableNotification"
	UpdateChatHasProtectedContentType        UpdateEnum = "updateChatHasProtectedContent"
	UpdateChatHasScheduledMessagesType       UpdateEnum = "updateChatHasScheduledMessages"
	UpdateChatIsBlockedType                  UpdateEnum = "updateChatIsBlocked"
	UpdateChatIsMarkedAsUnreadType           UpdateEnum = "updateChatIsMarkedAsUnread"
	UpdateChatFiltersType                    UpdateEnum = "updateChatFilters"
	UpdateChatOnlineMemberCountType          UpdateEnum = "updateChatOnlineMemberCount"
	UpdateScopeNotificationSettingsType      UpdateEnum = "updateScopeNotificationSettings"
	UpdateNotificationType                   UpdateEnum = "updateNotification"
	UpdateNotificationGroupType              UpdateEnum = "updateNotificationGroup"
	UpdateActiveNotificationsType            UpdateEnum = "updateActiveNotifications"
	UpdateHavePendingNotificationsType       UpdateEnum = "updateHavePendingNotifications"
	UpdateDeleteMessagesType                 UpdateEnum = "updateDeleteMessages"
	UpdateChatActionType                     UpdateEnum = "updateChatAction"
	UpdateUserStatusType                     UpdateEnum = "updateUserStatus"
	UpdateUserType                           UpdateEnum = "updateUser"
	UpdateBasicGroupType                     UpdateEnum = "updateBasicGroup"
	UpdateSupergroupType                     UpdateEnum = "updateSupergroup"
	UpdateSecretChatType                     UpdateEnum = "updateSecretChat"
	UpdateUserFullInfoType                   UpdateEnum = "updateUserFullInfo"
	UpdateBasicGroupFullInfoType             UpdateEnum = "updateBasicGroupFullInfo"
	UpdateSupergroupFullInfoType             UpdateEnum = "updateSupergroupFullInfo"
	UpdateServiceNotificationType            UpdateEnum = "updateServiceNotification"
	UpdateFileType                           UpdateEnum = "updateFile"
	UpdateFileGenerationStartType            UpdateEnum = "updateFileGenerationStart"
	UpdateFileGenerationStopType             UpdateEnum = "updateFileGenerationStop"
	UpdateCallType                           UpdateEnum = "updateCall"
	UpdateGroupCallType                      UpdateEnum = "updateGroupCall"
	UpdateGroupCallParticipantType           UpdateEnum = "updateGroupCallParticipant"
	UpdateNewCallSignalingDataType           UpdateEnum = "updateNewCallSignalingData"
	UpdateUserPrivacySettingRulesType        UpdateEnum = "updateUserPrivacySettingRules"
	UpdateUnreadMessageCountType             UpdateEnum = "updateUnreadMessageCount"
	UpdateUnreadChatCountType                UpdateEnum = "updateUnreadChatCount"
	UpdateOptionType                         UpdateEnum = "updateOption"
	UpdateStickerSetType                     UpdateEnum = "updateStickerSet"
	UpdateInstalledStickerSetsType           UpdateEnum = "updateInstalledStickerSets"
	UpdateTrendingStickerSetsType            UpdateEnum = "updateTrendingStickerSets"
	UpdateRecentStickersType                 UpdateEnum = "updateRecentStickers"
	UpdateFavoriteStickersType               UpdateEnum = "updateFavoriteStickers"
	UpdateSavedAnimationsType                UpdateEnum = "updateSavedAnimations"
	UpdateSelectedBackgroundType             UpdateEnum = "updateSelectedBackground"
	UpdateChatThemesType                     UpdateEnum = "updateChatThemes"
	UpdateLanguagePackStringsType            UpdateEnum = "updateLanguagePackStrings"
	UpdateConnectionStateType                UpdateEnum = "updateConnectionState"
	UpdateTermsOfServiceType                 UpdateEnum = "updateTermsOfService"
	UpdateUsersNearbyType                    UpdateEnum = "updateUsersNearby"
	UpdateDiceEmojisType                     UpdateEnum = "updateDiceEmojis"
	UpdateAnimatedEmojiMessageClickedType    UpdateEnum = "updateAnimatedEmojiMessageClicked"
	UpdateAnimationSearchParametersType      UpdateEnum = "updateAnimationSearchParameters"
	UpdateSuggestedActionsType               UpdateEnum = "updateSuggestedActions"
	UpdateNewInlineQueryType                 UpdateEnum = "updateNewInlineQuery"
	UpdateNewChosenInlineResultType          UpdateEnum = "updateNewChosenInlineResult"
	UpdateNewCallbackQueryType               UpdateEnum = "updateNewCallbackQuery"
	UpdateNewInlineCallbackQueryType         UpdateEnum = "updateNewInlineCallbackQuery"
	UpdateNewShippingQueryType               UpdateEnum = "updateNewShippingQuery"
	UpdateNewPreCheckoutQueryType            UpdateEnum = "updateNewPreCheckoutQuery"
	UpdateNewCustomEventType                 UpdateEnum = "updateNewCustomEvent"
	UpdateNewCustomQueryType                 UpdateEnum = "updateNewCustomQuery"
	UpdatePollType                           UpdateEnum = "updatePoll"
	UpdatePollAnswerType                     UpdateEnum = "updatePollAnswer"
	UpdateChatMemberType                     UpdateEnum = "updateChatMember"
	UpdateNewChatJoinRequestType             UpdateEnum = "updateNewChatJoinRequest"
)

func unmarshalUpdate(rawMsg *json.RawMessage) (Update, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch UpdateEnum(objMap["@type"].(string)) {
	case UpdateAuthorizationStateType:
		var updateAuthorizationState UpdateAuthorizationState
		err := json.Unmarshal(*rawMsg, &updateAuthorizationState)
		return &updateAuthorizationState, err

	case UpdateNewMessageType:
		var updateNewMessage UpdateNewMessage
		err := json.Unmarshal(*rawMsg, &updateNewMessage)
		return &updateNewMessage, err

	case UpdateMessageSendAcknowledgedType:
		var updateMessageSendAcknowledged UpdateMessageSendAcknowledged
		err := json.Unmarshal(*rawMsg, &updateMessageSendAcknowledged)
		return &updateMessageSendAcknowledged, err

	case UpdateMessageSendSucceededType:
		var updateMessageSendSucceeded UpdateMessageSendSucceeded
		err := json.Unmarshal(*rawMsg, &updateMessageSendSucceeded)
		return &updateMessageSendSucceeded, err

	case UpdateMessageSendFailedType:
		var updateMessageSendFailed UpdateMessageSendFailed
		err := json.Unmarshal(*rawMsg, &updateMessageSendFailed)
		return &updateMessageSendFailed, err

	case UpdateMessageContentType:
		var updateMessageContent UpdateMessageContent
		err := json.Unmarshal(*rawMsg, &updateMessageContent)
		return &updateMessageContent, err

	case UpdateMessageEditedType:
		var updateMessageEdited UpdateMessageEdited
		err := json.Unmarshal(*rawMsg, &updateMessageEdited)
		return &updateMessageEdited, err

	case UpdateMessageIsPinnedType:
		var updateMessageIsPinned UpdateMessageIsPinned
		err := json.Unmarshal(*rawMsg, &updateMessageIsPinned)
		return &updateMessageIsPinned, err

	case UpdateMessageInteractionInfoType:
		var updateMessageInteractionInfo UpdateMessageInteractionInfo
		err := json.Unmarshal(*rawMsg, &updateMessageInteractionInfo)
		return &updateMessageInteractionInfo, err

	case UpdateMessageContentOpenedType:
		var updateMessageContentOpened UpdateMessageContentOpened
		err := json.Unmarshal(*rawMsg, &updateMessageContentOpened)
		return &updateMessageContentOpened, err

	case UpdateMessageMentionReadType:
		var updateMessageMentionRead UpdateMessageMentionRead
		err := json.Unmarshal(*rawMsg, &updateMessageMentionRead)
		return &updateMessageMentionRead, err

	case UpdateMessageLiveLocationViewedType:
		var updateMessageLiveLocationViewed UpdateMessageLiveLocationViewed
		err := json.Unmarshal(*rawMsg, &updateMessageLiveLocationViewed)
		return &updateMessageLiveLocationViewed, err

	case UpdateNewChatType:
		var updateNewChat UpdateNewChat
		err := json.Unmarshal(*rawMsg, &updateNewChat)
		return &updateNewChat, err

	case UpdateChatTitleType:
		var updateChatTitle UpdateChatTitle
		err := json.Unmarshal(*rawMsg, &updateChatTitle)
		return &updateChatTitle, err

	case UpdateChatPhotoType:
		var updateChatPhoto UpdateChatPhoto
		err := json.Unmarshal(*rawMsg, &updateChatPhoto)
		return &updateChatPhoto, err

	case UpdateChatPermissionsType:
		var updateChatPermissions UpdateChatPermissions
		err := json.Unmarshal(*rawMsg, &updateChatPermissions)
		return &updateChatPermissions, err

	case UpdateChatLastMessageType:
		var updateChatLastMessage UpdateChatLastMessage
		err := json.Unmarshal(*rawMsg, &updateChatLastMessage)
		return &updateChatLastMessage, err

	case UpdateChatPositionType:
		var updateChatPosition UpdateChatPosition
		err := json.Unmarshal(*rawMsg, &updateChatPosition)
		return &updateChatPosition, err

	case UpdateChatReadInboxType:
		var updateChatReadInbox UpdateChatReadInbox
		err := json.Unmarshal(*rawMsg, &updateChatReadInbox)
		return &updateChatReadInbox, err

	case UpdateChatReadOutboxType:
		var updateChatReadOutbox UpdateChatReadOutbox
		err := json.Unmarshal(*rawMsg, &updateChatReadOutbox)
		return &updateChatReadOutbox, err

	case UpdateChatActionBarType:
		var updateChatActionBar UpdateChatActionBar
		err := json.Unmarshal(*rawMsg, &updateChatActionBar)
		return &updateChatActionBar, err

	case UpdateChatDraftMessageType:
		var updateChatDraftMessage UpdateChatDraftMessage
		err := json.Unmarshal(*rawMsg, &updateChatDraftMessage)
		return &updateChatDraftMessage, err

	case UpdateChatMessageSenderType:
		var updateChatMessageSender UpdateChatMessageSender
		err := json.Unmarshal(*rawMsg, &updateChatMessageSender)
		return &updateChatMessageSender, err

	case UpdateChatMessageTTLType:
		var updateChatMessageTTL UpdateChatMessageTTL
		err := json.Unmarshal(*rawMsg, &updateChatMessageTTL)
		return &updateChatMessageTTL, err

	case UpdateChatNotificationSettingsType:
		var updateChatNotificationSettings UpdateChatNotificationSettings
		err := json.Unmarshal(*rawMsg, &updateChatNotificationSettings)
		return &updateChatNotificationSettings, err

	case UpdateChatPendingJoinRequestsType:
		var updateChatPendingJoinRequests UpdateChatPendingJoinRequests
		err := json.Unmarshal(*rawMsg, &updateChatPendingJoinRequests)
		return &updateChatPendingJoinRequests, err

	case UpdateChatReplyMarkupType:
		var updateChatReplyMarkup UpdateChatReplyMarkup
		err := json.Unmarshal(*rawMsg, &updateChatReplyMarkup)
		return &updateChatReplyMarkup, err

	case UpdateChatThemeType:
		var updateChatTheme UpdateChatTheme
		err := json.Unmarshal(*rawMsg, &updateChatTheme)
		return &updateChatTheme, err

	case UpdateChatUnreadMentionCountType:
		var updateChatUnreadMentionCount UpdateChatUnreadMentionCount
		err := json.Unmarshal(*rawMsg, &updateChatUnreadMentionCount)
		return &updateChatUnreadMentionCount, err

	case UpdateChatVideoChatType:
		var updateChatVideoChat UpdateChatVideoChat
		err := json.Unmarshal(*rawMsg, &updateChatVideoChat)
		return &updateChatVideoChat, err

	case UpdateChatDefaultDisableNotificationType:
		var updateChatDefaultDisableNotification UpdateChatDefaultDisableNotification
		err := json.Unmarshal(*rawMsg, &updateChatDefaultDisableNotification)
		return &updateChatDefaultDisableNotification, err

	case UpdateChatHasProtectedContentType:
		var updateChatHasProtectedContent UpdateChatHasProtectedContent
		err := json.Unmarshal(*rawMsg, &updateChatHasProtectedContent)
		return &updateChatHasProtectedContent, err

	case UpdateChatHasScheduledMessagesType:
		var updateChatHasScheduledMessages UpdateChatHasScheduledMessages
		err := json.Unmarshal(*rawMsg, &updateChatHasScheduledMessages)
		return &updateChatHasScheduledMessages, err

	case UpdateChatIsBlockedType:
		var updateChatIsBlocked UpdateChatIsBlocked
		err := json.Unmarshal(*rawMsg, &updateChatIsBlocked)
		return &updateChatIsBlocked, err

	case UpdateChatIsMarkedAsUnreadType:
		var updateChatIsMarkedAsUnread UpdateChatIsMarkedAsUnread
		err := json.Unmarshal(*rawMsg, &updateChatIsMarkedAsUnread)
		return &updateChatIsMarkedAsUnread, err

	case UpdateChatFiltersType:
		var updateChatFilters UpdateChatFilters
		err := json.Unmarshal(*rawMsg, &updateChatFilters)
		return &updateChatFilters, err

	case UpdateChatOnlineMemberCountType:
		var updateChatOnlineMemberCount UpdateChatOnlineMemberCount
		err := json.Unmarshal(*rawMsg, &updateChatOnlineMemberCount)
		return &updateChatOnlineMemberCount, err

	case UpdateScopeNotificationSettingsType:
		var updateScopeNotificationSettings UpdateScopeNotificationSettings
		err := json.Unmarshal(*rawMsg, &updateScopeNotificationSettings)
		return &updateScopeNotificationSettings, err

	case UpdateNotificationType:
		var updateNotification UpdateNotification
		err := json.Unmarshal(*rawMsg, &updateNotification)
		return &updateNotification, err

	case UpdateNotificationGroupType:
		var updateNotificationGroup UpdateNotificationGroup
		err := json.Unmarshal(*rawMsg, &updateNotificationGroup)
		return &updateNotificationGroup, err

	case UpdateActiveNotificationsType:
		var updateActiveNotifications UpdateActiveNotifications
		err := json.Unmarshal(*rawMsg, &updateActiveNotifications)
		return &updateActiveNotifications, err

	case UpdateHavePendingNotificationsType:
		var updateHavePendingNotifications UpdateHavePendingNotifications
		err := json.Unmarshal(*rawMsg, &updateHavePendingNotifications)
		return &updateHavePendingNotifications, err

	case UpdateDeleteMessagesType:
		var updateDeleteMessages UpdateDeleteMessages
		err := json.Unmarshal(*rawMsg, &updateDeleteMessages)
		return &updateDeleteMessages, err

	case UpdateChatActionType:
		var updateChatAction UpdateChatAction
		err := json.Unmarshal(*rawMsg, &updateChatAction)
		return &updateChatAction, err

	case UpdateUserStatusType:
		var updateUserStatus UpdateUserStatus
		err := json.Unmarshal(*rawMsg, &updateUserStatus)
		return &updateUserStatus, err

	case UpdateUserType:
		var updateUser UpdateUser
		err := json.Unmarshal(*rawMsg, &updateUser)
		return &updateUser, err

	case UpdateBasicGroupType:
		var updateBasicGroup UpdateBasicGroup
		err := json.Unmarshal(*rawMsg, &updateBasicGroup)
		return &updateBasicGroup, err

	case UpdateSupergroupType:
		var updateSupergroup UpdateSupergroup
		err := json.Unmarshal(*rawMsg, &updateSupergroup)
		return &updateSupergroup, err

	case UpdateSecretChatType:
		var updateSecretChat UpdateSecretChat
		err := json.Unmarshal(*rawMsg, &updateSecretChat)
		return &updateSecretChat, err

	case UpdateUserFullInfoType:
		var updateUserFullInfo UpdateUserFullInfo
		err := json.Unmarshal(*rawMsg, &updateUserFullInfo)
		return &updateUserFullInfo, err

	case UpdateBasicGroupFullInfoType:
		var updateBasicGroupFullInfo UpdateBasicGroupFullInfo
		err := json.Unmarshal(*rawMsg, &updateBasicGroupFullInfo)
		return &updateBasicGroupFullInfo, err

	case UpdateSupergroupFullInfoType:
		var updateSupergroupFullInfo UpdateSupergroupFullInfo
		err := json.Unmarshal(*rawMsg, &updateSupergroupFullInfo)
		return &updateSupergroupFullInfo, err

	case UpdateServiceNotificationType:
		var updateServiceNotification UpdateServiceNotification
		err := json.Unmarshal(*rawMsg, &updateServiceNotification)
		return &updateServiceNotification, err

	case UpdateFileType:
		var updateFile UpdateFile
		err := json.Unmarshal(*rawMsg, &updateFile)
		return &updateFile, err

	case UpdateFileGenerationStartType:
		var updateFileGenerationStart UpdateFileGenerationStart
		err := json.Unmarshal(*rawMsg, &updateFileGenerationStart)
		return &updateFileGenerationStart, err

	case UpdateFileGenerationStopType:
		var updateFileGenerationStop UpdateFileGenerationStop
		err := json.Unmarshal(*rawMsg, &updateFileGenerationStop)
		return &updateFileGenerationStop, err

	case UpdateCallType:
		var updateCall UpdateCall
		err := json.Unmarshal(*rawMsg, &updateCall)
		return &updateCall, err

	case UpdateGroupCallType:
		var updateGroupCall UpdateGroupCall
		err := json.Unmarshal(*rawMsg, &updateGroupCall)
		return &updateGroupCall, err

	case UpdateGroupCallParticipantType:
		var updateGroupCallParticipant UpdateGroupCallParticipant
		err := json.Unmarshal(*rawMsg, &updateGroupCallParticipant)
		return &updateGroupCallParticipant, err

	case UpdateNewCallSignalingDataType:
		var updateNewCallSignalingData UpdateNewCallSignalingData
		err := json.Unmarshal(*rawMsg, &updateNewCallSignalingData)
		return &updateNewCallSignalingData, err

	case UpdateUserPrivacySettingRulesType:
		var updateUserPrivacySettingRules UpdateUserPrivacySettingRules
		err := json.Unmarshal(*rawMsg, &updateUserPrivacySettingRules)
		return &updateUserPrivacySettingRules, err

	case UpdateUnreadMessageCountType:
		var updateUnreadMessageCount UpdateUnreadMessageCount
		err := json.Unmarshal(*rawMsg, &updateUnreadMessageCount)
		return &updateUnreadMessageCount, err

	case UpdateUnreadChatCountType:
		var updateUnreadChatCount UpdateUnreadChatCount
		err := json.Unmarshal(*rawMsg, &updateUnreadChatCount)
		return &updateUnreadChatCount, err

	case UpdateOptionType:
		var updateOption UpdateOption
		err := json.Unmarshal(*rawMsg, &updateOption)
		return &updateOption, err

	case UpdateStickerSetType:
		var updateStickerSet UpdateStickerSet
		err := json.Unmarshal(*rawMsg, &updateStickerSet)
		return &updateStickerSet, err

	case UpdateInstalledStickerSetsType:
		var updateInstalledStickerSets UpdateInstalledStickerSets
		err := json.Unmarshal(*rawMsg, &updateInstalledStickerSets)
		return &updateInstalledStickerSets, err

	case UpdateTrendingStickerSetsType:
		var updateTrendingStickerSets UpdateTrendingStickerSets
		err := json.Unmarshal(*rawMsg, &updateTrendingStickerSets)
		return &updateTrendingStickerSets, err

	case UpdateRecentStickersType:
		var updateRecentStickers UpdateRecentStickers
		err := json.Unmarshal(*rawMsg, &updateRecentStickers)
		return &updateRecentStickers, err

	case UpdateFavoriteStickersType:
		var updateFavoriteStickers UpdateFavoriteStickers
		err := json.Unmarshal(*rawMsg, &updateFavoriteStickers)
		return &updateFavoriteStickers, err

	case UpdateSavedAnimationsType:
		var updateSavedAnimations UpdateSavedAnimations
		err := json.Unmarshal(*rawMsg, &updateSavedAnimations)
		return &updateSavedAnimations, err

	case UpdateSelectedBackgroundType:
		var updateSelectedBackground UpdateSelectedBackground
		err := json.Unmarshal(*rawMsg, &updateSelectedBackground)
		return &updateSelectedBackground, err

	case UpdateChatThemesType:
		var updateChatThemes UpdateChatThemes
		err := json.Unmarshal(*rawMsg, &updateChatThemes)
		return &updateChatThemes, err

	case UpdateLanguagePackStringsType:
		var updateLanguagePackStrings UpdateLanguagePackStrings
		err := json.Unmarshal(*rawMsg, &updateLanguagePackStrings)
		return &updateLanguagePackStrings, err

	case UpdateConnectionStateType:
		var updateConnectionState UpdateConnectionState
		err := json.Unmarshal(*rawMsg, &updateConnectionState)
		return &updateConnectionState, err

	case UpdateTermsOfServiceType:
		var updateTermsOfService UpdateTermsOfService
		err := json.Unmarshal(*rawMsg, &updateTermsOfService)
		return &updateTermsOfService, err

	case UpdateUsersNearbyType:
		var updateUsersNearby UpdateUsersNearby
		err := json.Unmarshal(*rawMsg, &updateUsersNearby)
		return &updateUsersNearby, err

	case UpdateDiceEmojisType:
		var updateDiceEmojis UpdateDiceEmojis
		err := json.Unmarshal(*rawMsg, &updateDiceEmojis)
		return &updateDiceEmojis, err

	case UpdateAnimatedEmojiMessageClickedType:
		var updateAnimatedEmojiMessageClicked UpdateAnimatedEmojiMessageClicked
		err := json.Unmarshal(*rawMsg, &updateAnimatedEmojiMessageClicked)
		return &updateAnimatedEmojiMessageClicked, err

	case UpdateAnimationSearchParametersType:
		var updateAnimationSearchParameters UpdateAnimationSearchParameters
		err := json.Unmarshal(*rawMsg, &updateAnimationSearchParameters)
		return &updateAnimationSearchParameters, err

	case UpdateSuggestedActionsType:
		var updateSuggestedActions UpdateSuggestedActions
		err := json.Unmarshal(*rawMsg, &updateSuggestedActions)
		return &updateSuggestedActions, err

	case UpdateNewInlineQueryType:
		var updateNewInlineQuery UpdateNewInlineQuery
		err := json.Unmarshal(*rawMsg, &updateNewInlineQuery)
		return &updateNewInlineQuery, err

	case UpdateNewChosenInlineResultType:
		var updateNewChosenInlineResult UpdateNewChosenInlineResult
		err := json.Unmarshal(*rawMsg, &updateNewChosenInlineResult)
		return &updateNewChosenInlineResult, err

	case UpdateNewCallbackQueryType:
		var updateNewCallbackQuery UpdateNewCallbackQuery
		err := json.Unmarshal(*rawMsg, &updateNewCallbackQuery)
		return &updateNewCallbackQuery, err

	case UpdateNewInlineCallbackQueryType:
		var updateNewInlineCallbackQuery UpdateNewInlineCallbackQuery
		err := json.Unmarshal(*rawMsg, &updateNewInlineCallbackQuery)
		return &updateNewInlineCallbackQuery, err

	case UpdateNewShippingQueryType:
		var updateNewShippingQuery UpdateNewShippingQuery
		err := json.Unmarshal(*rawMsg, &updateNewShippingQuery)
		return &updateNewShippingQuery, err

	case UpdateNewPreCheckoutQueryType:
		var updateNewPreCheckoutQuery UpdateNewPreCheckoutQuery
		err := json.Unmarshal(*rawMsg, &updateNewPreCheckoutQuery)
		return &updateNewPreCheckoutQuery, err

	case UpdateNewCustomEventType:
		var updateNewCustomEvent UpdateNewCustomEvent
		err := json.Unmarshal(*rawMsg, &updateNewCustomEvent)
		return &updateNewCustomEvent, err

	case UpdateNewCustomQueryType:
		var updateNewCustomQuery UpdateNewCustomQuery
		err := json.Unmarshal(*rawMsg, &updateNewCustomQuery)
		return &updateNewCustomQuery, err

	case UpdatePollType:
		var updatePoll UpdatePoll
		err := json.Unmarshal(*rawMsg, &updatePoll)
		return &updatePoll, err

	case UpdatePollAnswerType:
		var updatePollAnswer UpdatePollAnswer
		err := json.Unmarshal(*rawMsg, &updatePollAnswer)
		return &updatePollAnswer, err

	case UpdateChatMemberType:
		var updateChatMember UpdateChatMember
		err := json.Unmarshal(*rawMsg, &updateChatMember)
		return &updateChatMember, err

	case UpdateNewChatJoinRequestType:
		var updateNewChatJoinRequest UpdateNewChatJoinRequest
		err := json.Unmarshal(*rawMsg, &updateNewChatJoinRequest)
		return &updateNewChatJoinRequest, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}

// LogStream Describes a stream to which TDLib internal log is written
type LogStream interface {
	GetLogStreamEnum() LogStreamEnum
}

// LogStreamEnum Alias for abstract LogStream 'Sub-Classes', used as constant-enum here
type LogStreamEnum string

// LogStream enums
const (
	LogStreamDefaultType LogStreamEnum = "logStreamDefault"
	LogStreamFileType    LogStreamEnum = "logStreamFile"
	LogStreamEmptyType   LogStreamEnum = "logStreamEmpty"
)

func unmarshalLogStream(rawMsg *json.RawMessage) (LogStream, error) {

	if rawMsg == nil {
		return nil, nil
	}
	var objMap map[string]interface{}
	err := json.Unmarshal(*rawMsg, &objMap)
	if err != nil {
		return nil, err
	}

	switch LogStreamEnum(objMap["@type"].(string)) {
	case LogStreamDefaultType:
		var logStreamDefault LogStreamDefault
		err := json.Unmarshal(*rawMsg, &logStreamDefault)
		return &logStreamDefault, err

	case LogStreamFileType:
		var logStreamFile LogStreamFile
		err := json.Unmarshal(*rawMsg, &logStreamFile)
		return &logStreamFile, err

	case LogStreamEmptyType:
		var logStreamEmpty LogStreamEmpty
		err := json.Unmarshal(*rawMsg, &logStreamEmpty)
		return &logStreamEmpty, err

	default:
		return nil, fmt.Errorf("Error UnMarshaling, unknown type:" + objMap["@type"].(string))
	}
}
